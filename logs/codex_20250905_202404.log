[2025-09-05T17:24:04] OpenAI Codex v0.28.0 (research preview)
--------
workdir: /Users/panda/Desktop/EUFM
model: gpt-5
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: medium
reasoning summaries: auto
--------
[2025-09-05T17:24:04] User instructions:
MAKE DASHBOARD INTUITIVE & INTERACTIVE

The dashboard has real data (29 EU funding opportunities, live system status) but the UI doesn't help the user understand what's happening. Fix this by making it much more intuitive and informative.

## CRITICAL ISSUES TO FIX:

### 1. NO VISUAL FEEDBACK
- Buttons don't show loading states when clicked
- No success/error messages when actions complete
- No progress indicators for long operations
- User can't tell if something is working or broken

### 2. UNCLEAR WHAT BUTTONS DO
- "Scan Now" button - what does it actually scan?
- "Execute Task" - what tasks can I execute?
- Search box - what am I searching through?
- Export buttons - what gets exported?

### 3. MISSING HELPFUL INFORMATION
- No tooltips explaining features
- No help text or examples
- No status indicators showing what's active/working
- No recent activity showing what happened

## SOLUTIONS TO IMPLEMENT:

### A. ADD LOADING STATES & FEEDBACK
```javascript
// When scanning funding:
button.innerHTML = '<span class="spinner"></span> Scanning EU portals...';
// After completion:
showToast('✅ Found 12 new funding opportunities!', 'success');
```

### B. ADD HELPFUL TOOLTIPS & DESCRIPTIONS
```html
<button title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
  <span>Scan Now</span>
  <small>Last scan: 2 minutes ago, found 29 opportunities</small>
</button>
```

### C. SHOW REAL-TIME ACTIVITY FEED
- "Scanning Horizon Europe portal..."
- "Found 5 AI opportunities in EIC calls"
- "Analyzing opportunity relevance..."
- "✅ Scan complete - 12 new matches found"

### D. MAKE SEARCH CONTEXTUAL
- Show search suggestions: "Try: AI funding, Horizon Europe, EIC Accelerator"
- Show what you're searching: "Searching 29 opportunities, 21 notes, 8 tools"
- Highlight matches in results

### E. ADD GUIDED ONBOARDING
- First-time user tutorial
- "Try clicking here to scan for funding"
- "This shows your system health"
- "Execute tasks like 'find AI funding for startups'"

### F. IMPROVE TASK EXECUTION
- Show examples: "analyze funding opportunities", "generate proposal outline"
- Show what the system can do
- Live preview of results
- Step-by-step progress

### G. ADD SMART NOTIFICATIONS
- "🚨 Deadline approaching: EIC Accelerator closes in 5 days"
- "💡 Suggestion: Your project matches 3 high-value opportunities"
- "📊 Usage update: 45% of Claude Pro quota used this month"

## SPECIFIC CHANGES NEEDED:

### 1. Update dashboard.js
- Add loading spinners for all async operations
- Add toast notifications for success/error states
- Add tooltips with helpful descriptions
- Show progress for long-running tasks
- Add contextual help bubbles

### 2. Update dashboard.css
- Add spinner animations
- Style toast notifications
- Add tooltip styling
- Improve button states (loading, success, error)
- Add progress bar animations

### 3. Update index.html
- Add tooltip attributes everywhere
- Add help text under buttons
- Add examples in placeholders
- Add status indicators
- Add guided tour elements

### 4. Update API responses
- Return more descriptive messages
- Include progress updates
- Add helpful context in responses
- Stream real-time updates during operations

### 5. Add Smart Defaults
- Pre-fill search with useful queries
- Show suggested actions based on data
- Highlight important/urgent items
- Auto-refresh when new data arrives

## MAKE IT FEEL LIKE:
- **Google Search** - instant, helpful, shows what you're searching
- **GitHub Actions** - clear progress, logs, success/failure states  
- **Slack** - real-time updates, notifications, contextual help
- **Linear** - smooth interactions, smart suggestions, guided flow

## SUCCESS CRITERIA:
✅ User immediately understands what each button does
✅ Clear feedback for every action (loading, success, error)
✅ Helpful tooltips and examples everywhere
✅ Real-time activity feed shows what's happening
✅ Smart suggestions guide user to useful actions
✅ No confusion about system state or capabilities
✅ Feels responsive and alive, not static

Make the dashboard TEACH the user how to use it while they use it!

[2025-09-05T17:24:10] thinking

**Exploring codebase for modification**

I need to modify the codebase in /Users/panda/Desktop/EUFM. My first step is to explore the repository and locate important files like dashboard.js, dashboard.css, index.html, and the API. I have full filesystem access and can run commands, but I notice there's no update_plan tool available, only functions.shell and functions.view_image. So, I’ll proceed with functions.shell to inspect the files and use apply_patch to edit them, starting with a search using rg for relevant files.
[2025-09-05T17:24:13] codex

I’m going to scan the repo to locate the dashboard files and see current structure before updating JS/CSS/HTML and APIs.
[2025-09-05T17:24:14] exec bash -lc 'ls -la' in /Users/panda/Desktop/EUFM
[2025-09-05T17:24:14] bash -lc 'ls -la' succeeded in 40ms:
total 352
drwxr-xr-x   25 panda  staff    800 Sep  5 20:23 .
drwx------+  14 panda  staff    448 Sep  5 17:46 ..
-rw-r--r--@   1 panda  staff   8196 Sep  4 10:39 .DS_Store
-rw-r--r--    1 panda  staff    370 Sep  5 16:22 .env
-rw-r--r--    1 panda  staff    123 Sep  3 12:43 .env.example
drwxr-xr-x   14 panda  staff    448 Sep  5 19:11 .git
drwxr-xr-x    3 panda  staff     96 Sep  3 11:39 .github
-rw-r--r--    1 panda  staff     42 Sep  3 12:44 .gitignore
-rw-r--r--    1 panda  staff   5088 Sep  3 14:08 CODE_OF_CONDUCT.md
-rw-r--r--@   1 panda  staff    458 Sep  3 11:40 CONTRIBUTING.md
-rw-r--r--    1 panda  staff   7894 Sep  3 14:46 PROJECT_OVERVIEW.md
-rw-r--r--@   1 panda  staff    313 Sep  3 14:48 README.md
-rw-r--r--@   1 panda  staff    425 Sep  3 11:40 SECURITY.md
-rw-r--r--    1 panda  staff   6195 Sep  5 20:12 codex_comprehensive_dashboard_analysis.txt
-rw-r--r--    1 panda  staff   2094 Sep  5 19:48 codex_dashboard_task.txt
-rw-r--r--    1 panda  staff   4141 Sep  5 20:23 codex_make_dashboard_intuitive.txt
drwxr-xr-x   12 panda  staff    384 Sep  5 19:46 dist
drwxr-xr-x   11 panda  staff    352 Sep  3 15:01 docs
drwxr-xr-x   19 panda  staff    608 Sep  5 20:24 logs
[2025-09-05T17:24:14] tokens used: 1311
[2025-09-05T17:24:16] exec bash -lc "ls -la src && rg --files src | sed -n '1,200p'" in /Users/panda/Desktop/EUFM
[2025-09-05T17:24:16] bash -lc "ls -la src && rg --files src | sed -n '1,200p'" succeeded in 72ms:
total 16
drwxr-xr-x  12 panda  staff   384 Sep  3 17:17 .
drwxr-xr-x  25 panda  staff   800 Sep  5 20:23 ..
-rw-r--r--@  1 panda  staff  6148 Sep  3 12:43 .DS_Store
drwxr-xr-x   5 panda  staff   160 Sep  3 12:43 adapters
drwxr-xr-x   8 panda  staff   256 Sep  3 15:33 agents
drwxr-xr-x   7 panda  staff   224 Sep  3 15:12 analytics
drwxr-xr-x   3 panda  staff    96 Sep  3 12:42 cli
drwxr-xr-x   7 panda  staff   224 Sep  3 17:21 dashboard
drwxr-xr-x   4 panda  staff   128 Sep  3 15:34 intelligence
drwxr-xr-x   4 panda  staff   128 Sep  3 14:48 memory
drwxr-xr-x   8 panda  staff   256 Sep  3 15:35 orchestrator
drwxr-xr-x   4 panda  staff   128 Sep  3 13:10 tools
src/analytics/optimizationEngine.ts
src/analytics/autoTracker.ts
src/analytics/usageAnalytics.ts
src/analytics/subscriptionManager.ts
src/analytics/toolUsageTracker.ts
src/orchestrator/taskAnalyzer.ts
src/orchestrator/strategicOrchestrator.ts
[2025-09-05T17:24:16] tokens used: 808

[2025-09-05T17:24:20] thinking

**Examining the dashboard files**

I see that files like dashboard.js, dashboard.css, and index.html are all under src/dashboard/web. There's also dashboardServer.ts, which likely serves the API, along with other modules such as fundingOpportunityScanner.ts, systemMonitor.ts, and missionControl.ts. My next step should be to implement front-end UI changes and update the API responses to stream progress and deliver better descriptive messages. I’ll start by opening dashboard.js to understand the current code better.
[2025-09-05T17:24:25] exec bash -lc "sed -n '1,200p' src/dashboard/web/dashboard.js" in /Users/panda/Desktop/EUFM
[2025-09-05T17:24:25] bash -lc "sed -n '1,200p' src/dashboard/web/dashboard.js" succeeded in 24ms:
// EUFM Mission Control Dashboard (NotebookLM-inspired)
class MissionControlDashboard {
  constructor() {
    this.ws = null;
    this.reconnectInterval = 5000;
    this.initTime = new Date();
    this.theme = localStorage.getItem('eufm-theme') || 'light';
    this.sections = ['overview', 'funding', 'activity', 'analytics', 'settings'];
    this.init();
  }

  init() {
    document.querySelector('.app-shell').dataset.theme = this.theme;
    this.cacheEls();
    this.bindUI();
    this.updateTimestamp();
    this.updateInitTime();
    this.loadAll();
    this.connectWS();

[2025-09-05T17:24:25] tokens used: 755
[2025-09-05T17:24:27] exec bash -lc "sed -n '200,400p' src/dashboard/web/dashboard.js" in /Users/panda/Desktop/EUFM
[2025-09-05T17:24:27] bash -lc "sed -n '200,400p' src/dashboard/web/dashboard.js" succeeded in 27ms:
      `).join('');
    };
    render(document.getElementById('subscription-list'));
    render(document.getElementById('subscription-list-2'));
  }

  async updateOpportunities() {
    const opps = await this.api('/api/opportunities');
    const renderOpps = (el) => {
      el.innerHTML = opps.map(opp => `
        <div class="opportunity-item" role="listitem">
          <div class="opportunity-title">${opp.title}</div>
          <div class="opportunity-meta">
            <span class="badge ${opp.status === 'closing_soon' ? 'closing' : 'open'}">${opp.program}</span>
            <span class="opportunity-deadline">Deadline: ${opp.deadline}</span>
          </div>
        </div>
      `).join('');
    };
    renderOpps(document.getElementById('opportunity-list'));
[2025-09-05T17:24:27] tokens used: 2736
[2025-09-05T17:24:31] exec bash -lc "sed -n '1,220p' src/dashboard/web/dashboard.css" in /Users/panda/Desktop/EUFM
[2025-09-05T17:24:31] bash -lc "sed -n '1,220p' src/dashboard/web/dashboard.css" succeeded in 19ms:
 :root {
  --md3-primary: #1a73e8;
  --md3-on-primary: #ffffff;
  --md3-primary-container: #d7e3ff;
  --md3-on-primary-container: #001a40;
  --md3-secondary: #5f6368;
  --md3-on-secondary: #ffffff;
  --md3-surface: #ffffff;
  --md3-surface-variant: #f2f4f7;
  --md3-on-surface: #0b0f1a;
  --md3-outline: #e3e8ef;
  --md3-outline-variant: #d6dae1;
  --md3-success: #34a853;
  --md3-warning: #fbbc05;
  --md3-error: #ea4335;
  --md3-on-error: #ffffff;
  /* elevations */
  --elev-0: 0 0 0 rgba(0,0,0,0);
  --elev-2: 0 2px 6px rgba(15,23,42,0.1);
  --elev-3: 0 4px 12px rgba(15,23,42,0.12);
[2025-09-05T17:24:31] tokens used: 1921

[2025-09-05T17:24:34] thinking

**Improving UI styles**

I noticed that the current CSS shows the base UI styles, but it's missing some crucial components like spinners, toasts, tooltips, and progress bars, apart from just the usage bar. I need to add styles for the spinner, toast container, tooltip, button loading states, and the progress bar. To get a clearer picture of the structure, I should open up index.html and check how everything is organized.
[2025-09-05T17:24:38] exec bash -lc "sed -n '1,220p' src/dashboard/web/index.html" in /Users/panda/Desktop/EUFM
[2025-09-05T17:24:38] bash -lc "sed -n '1,220p' src/dashboard/web/index.html" succeeded in 21ms:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>EUFM Mission Control</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Roboto+Flex:opsz,wght@8..144,300..800&family=Roboto+Mono:wght@400;500&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@24,400,0,0" rel="stylesheet" />
  <link rel="stylesheet" href="dashboard.css" />
</head>
<body>
  <div class="app-shell" data-theme="light">
    <!-- Sidebar Navigation -->
    <aside class="sidebar" aria-label="Primary navigation">
      <div class="brand">
        <span class="material-symbols-rounded">rocket_launch</span>
        <span class="brand-name">EUFM Mission Control</span>
      </div>
[2025-09-05T17:24:38] tokens used: 3739
[2025-09-05T17:24:42] exec bash -lc "sed -n '220,520p' src/dashboard/web/index.html" in /Users/panda/Desktop/EUFM
[2025-09-05T17:24:42] bash -lc "sed -n '220,520p' src/dashboard/web/index.html" succeeded in 35ms:
          <article class="card opportunities full">
            <div class="card-head">
              <span class="material-symbols-rounded">work</span>
              <h3>Live Opportunities</h3>
              <div class="card-actions">
                <button class="btn" id="scan-funding-btn-2">
                  <span class="material-symbols-rounded">search</span>
                  <span>Scan Now</span>
                </button>
              </div>
            </div>
            <div class="opportunity-list" id="opportunity-list-2"></div>
          </article>
        </div>
      </section>

      <section id="section-activity" class="section" aria-labelledby="activity-title" role="region">
        <h2 id="activity-title" class="section-title">Activity & Alerts</h2>
        <div class="grid single">
          <article class="card activity full">
[2025-09-05T17:24:42] tokens used: 2696

[2025-09-05T17:24:45] thinking

**Enhancing user guidance**

I'm noting that index.html currently lacks tooltips, placeholders, and help text. There's a need for more helpful titles, explanations under buttons, examples, and status indicators. I’m also considering adding guided tour elements and improving the toast container and activity feed. Additionally, it seems like I need to implement search suggestions and counts. Oh, and I’ll have to check the API updates in the backend code located at src/dashboard/dashboardServer.ts. Let's get started on that!
[2025-09-05T17:24:47] exec bash -lc "sed -n '1,240p' src/dashboard/dashboardServer.ts" in /Users/panda/Desktop/EUFM
[2025-09-05T17:24:47] bash -lc "sed -n '1,240p' src/dashboard/dashboardServer.ts" succeeded in 55ms:
import express from 'express';
import { createServer } from 'http';
import { WebSocketServer } from 'ws';
import path from 'path';
import { fileURLToPath } from 'url';
import { MissionControl } from './missionControl.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export class DashboardServer {
  private app = express();
  private server = createServer(this.app);
  private wss = new WebSocketServer({ server: this.server });
  private missionControl = new MissionControl();
  private port = process.env.DASHBOARD_PORT || 3000;

  constructor() {
    this.setupExpress();
    this.setupWebSocket();
[2025-09-05T17:24:47] tokens used: 1250
[2025-09-05T17:24:50] exec bash -lc "sed -n '240,520p' src/dashboard/dashboardServer.ts" in /Users/panda/Desktop/EUFM
[2025-09-05T17:24:50] bash -lc "sed -n '240,520p' src/dashboard/dashboardServer.ts" succeeded in 25ms:
        console.log(`🚀 EUFM Mission Control Dashboard running at:`);
        console.log(`   Local:   http://localhost:${this.port}`);
        console.log(`   Network: http://0.0.0.0:${this.port}`);
        console.log('');
        console.log('Dashboard Features:');
        console.log('  • Real-time system monitoring');
        console.log('  • Agent status and execution logs');
        console.log('  • EU funding opportunity scanner');
        console.log('  • Interactive task execution');
        console.log('  • Cost and usage analytics');
        console.log('  • Project timeline tracking');
        resolve();
      });
    });
  }

  async stop(): Promise<void> {
    return new Promise((resolve) => {
      this.server.close(() => {
        console.log('Dashboard server stopped');
[2025-09-05T17:24:50] tokens used: 2300

[2025-09-05T17:24:53] thinking

I need to make sure we have an API to stream progress updates and provide more descriptive messages. For this, the MissionControl class is going to handle scanning and related tasks. I’ll be looking into the missionControl.ts file to implement these features. It’s essential to get everything set up properly to enhance the communication in this project! Let’s see what’s in that file and make the necessary adjustments.
[2025-09-05T17:24:55] exec bash -lc "sed -n '1,240p' src/dashboard/missionControl.ts" in /Users/panda/Desktop/EUFM
[2025-09-05T17:24:55] bash -lc "sed -n '1,240p' src/dashboard/missionControl.ts" succeeded in 36ms:
import { promises as fs } from 'fs';
import { StrategicOrchestrator } from '../orchestrator/strategicOrchestrator.js';
import { UsageAnalyticsAgent } from '../analytics/usageAnalytics.js';
import { loadKnowledgeBase, toContext } from '../memory/memoryLoader.js';
import { SystemMonitor } from './systemMonitor.js';
import { FundingOpportunityScanner } from './fundingOpportunityScanner.js';

export interface MissionControlStatus {
  timestamp: string;
  system: {
    agents: { active: number; completed: number; failed: number };
    tools: { available: number; errors: number };
    memory: { notes: number; sizeKB: number };
    costs: { totalUSD: number; todayUSD: number };
  };
  eufmProject: {
    phase: string;
    progress: number;
    nextMilestone: string;
    fundingOpportunities: number;
[2025-09-05T17:24:55] tokens used: 409

[2025-09-05T17:24:58] thinking

I'm focusing on the fundingOpportunityScanner.ts file and what scanning means in that context. I’m curious about how this scanning function works and what it’s checking for. Is it looking for specific opportunities? I might need to dig into the code and analyze its purpose more thoroughly. Understanding this will help clarify how it functions and could aid in my overall task. Let's see what insights I can uncover from examining it closely!
[2025-09-05T17:25:01] exec bash -lc "sed -n '1,260p' src/dashboard/fundingOpportunityScanner.ts" in /Users/panda/Desktop/EUFM
[2025-09-05T17:25:01] bash -lc "sed -n '1,260p' src/dashboard/fundingOpportunityScanner.ts" succeeded in 31ms:
import { runPerplexityTest } from '../tools/perplexity_sonar.js';
import { geminiComplete } from '../adapters/google_gemini.js';
import { promises as fs } from 'fs';
import path from 'path';

export interface FundingOpportunity {
  id: string;
  title: string;
  program: string;
  deadline: string;
  budget: string;
  description: string;
  eligibility: string[];
  relevanceScore: number;
  url: string;
  status: 'open' | 'closing_soon' | 'closed';
  scannedAt: string;
}

export class FundingOpportunityScanner {
[2025-09-05T17:25:01] tokens used: 1970

[2025-09-05T17:25:07] thinking

**Considering streaming updates**

I’m looking into adding streaming updates through API responses since currently, missionControl's scanFundingOpportunities is synchronous and returns results. Implementing an optional event stream endpoint for scanning progress using Server-Sent Events or WebSockets makes sense. Since we’ve got a WebSocket server already, I can push progress messages to clients. The success criteria mention showing a real-time activity feed, so I’ll think about how to update the dashboard.js with these updates while keeping changes minimal but effective.
**Planning front-end updates**

I’m focusing on enhancing the front-end by adding more user-friendly features like toasts, spinners, tooltips, and a progress indicator, along with an activity feed that goes beyond alerts. In dashboard.css, I’ll implement classes for spinner animations, loading buttons, toasts for success and error messages, and style tooltips and help bubbles. For dashboard.js, I’ll create utilities to manage loading states, display toasts, handle progress steps, and add tooltips or help texts under buttons for better user guidance.
**Implementing onboarding and features**

I'm considering adding guided onboarding with "coach marks" that show one-time tooltips as help bubbles next to elements. I also want to implement contextual search by displaying a suggestions panel if there are no results. The search could show counts like "Searching X opportunities, Y notes, Z tools," wrapping matches in `<mark>` for visibility. For better user experience, I’ll pre-fill the search with useful queries as placeholders. Lastly, I’ll enhance task execution with examples in modals and show progress steps on submit, while providing an activity feed for real-time updates.
**Enhancing real-time updates**

I’m looking to add local ephemeral feed updates while running. To do that, I'll update the API for descriptive messages and progress updates, along with streaming real-time updates. I'll modify the DashboardServer to include an EventEmitter for missionControl to emit 'activity' and 'progress' events. We can change the FundingOpportunityScanner to accept a callback during scans to emit steps. It might also be beneficial to adjust MissionControl to function as an EventEmitter and broadcast alerts and progress effectively.
**Enhancing dashboard functionality**

I’m planning to improve the API for more descriptive messages, like returning JSON responses for scan funding and implementing a streaming endpoint using SSE for progress updates. We can also leverage WebSocket broadcasts from missionControl events to show progress on the front-end. 

Next, I’ll need to update dashboard.css for spinner animations and styles for toasts and tooltips. In index.html, I’ll add attributes and help texts under buttons. The dashboard.js updates will involve state variables for loading states and utility functions to manage toasts and loading actions, ensuring the scanning process is clear and informative to users.
[2025-09-05T17:25:37] codex
**Planning front-end updates**

I’m focusing on enhancing the front-end by adding more user-friendly features like toasts, spinners, tooltips, and a progress indicator, along with an activity feed that goes beyond alerts. In dashboard.css, I’ll implement classes for spinner animations, loading buttons, toasts for success and error messages, and style tooltips and help bubbles. For dashboard.js, I’ll create utilities to manage loading states, display toasts, handle progress steps, and add tooltips or help texts under buttons for better user guidance.
[2025-09-05T17:25:37] codex
**Implementing onboarding and features**

I'm considering adding guided onboarding with "coach marks" that show one-time tooltips as help bubbles next to elements. I also want to implement contextual search by displaying a suggestions panel if there are no results. The search could show counts like "Searching X opportunities, Y notes, Z tools," wrapping matches in `<mark>` for visibility. For better user experience, I’ll pre-fill the search with useful queries as placeholders. Lastly, I’ll enhance task execution with examples in modals and show progress steps on submit, while providing an activity feed for real-time updates.
[2025-09-05T17:25:37] codex
**Enhancing real-time updates**

I’m looking to add local ephemeral feed updates while running. To do that, I'll update the API for descriptive messages and progress updates, along with streaming real-time updates. I'll modify the DashboardServer to include an EventEmitter for missionControl to emit 'activity' and 'progress' events. We can change the FundingOpportunityScanner to accept a callback during scans to emit steps. It might also be beneficial to adjust MissionControl to function as an EventEmitter and broadcast alerts and progress effectively.
[2025-09-05T17:25:37] codex
**Enhancing dashboard functionality**

I’m planning to improve the API for more descriptive messages, like returning JSON responses for scan funding and implementing a streaming endpoint using SSE for progress updates. We can also leverage WebSocket broadcasts from missionControl events to show progress on the front-end. 

Next, I’ll need to update dashboard.css for spinner animations and styles for toasts and tooltips. In index.html, I’ll add attributes and help texts under buttons. The dashboard.js updates will involve state variables for loading states and utility functions to manage toasts and loading actions, ensuring the scanning process is clear and informative to users.
[2025-09-05T17:25:37] codex

Next, I’ll patch the frontend (JS/CSS/HTML) to add spinners, toasts, tooltips, progress, and guided hints; then update backend to emit progress via WebSocket.
[2025-09-05T17:25:58] apply_patch auto_approved=true:
M /Users/panda/Desktop/EUFM/src/dashboard/web/dashboard.css
@@ -50,2 +50,33 @@
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
@@ -102,2 +133,6 @@
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
@@ -186,2 +221,3 @@
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
[2025-09-05T17:25:58] apply_patch(auto_approved=true) exited 0 in 108ms:
Success. Updated the following files:
M src/dashboard/web/dashboard.css
[2025-09-05T17:25:58] turn diff:
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }

[2025-09-05T17:25:58] tokens used: 5441
[2025-09-05T17:25:58] turn diff:
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }


[2025-09-05T17:26:05] thinking

**Updating HTML components**

I'm working on patching the index.html file by adding some helpful features like titles, tooltips, and help text. I need to include certain elements, like a toasts container and guided tour data-help attributes. There are also extra descriptions I want to place under buttons, with suggestions for placeholders. For the scan buttons, I’ll add a title attribute along with a small help text below the button area, keeping it simple by including helper text under the card title as required.
**Enhancing UI elements**

I'm planning to enhance the UI by adding small elements within the card-actions or below them. For the export buttons, I'll add title attributes since they already handle exporting status in JSON and CSV formats. Next, I’ll enhance the "Execute Task" button with a title and help text. For the search input, I need to add placeholders for examples and data-help. I'll create a status strip indicating "Searching X opportunities, Y notes, Z tools" under the search panel and implement it via dashboard.js. Additionally, I’ll include a toast container at the end of the body and an inline progress area for scanning. Lastly, I plan to add onboarding markers using data-tour attributes and enrich key items with data-help. Time to patch index.html!
[2025-09-05T17:26:12] codex
**Enhancing UI elements**

I'm planning to enhance the UI by adding small elements within the card-actions or below them. For the export buttons, I'll add title attributes since they already handle exporting status in JSON and CSV formats. Next, I’ll enhance the "Execute Task" button with a title and help text. For the search input, I need to add placeholders for examples and data-help. I'll create a status strip indicating "Searching X opportunities, Y notes, Z tools" under the search panel and implement it via dashboard.js. Additionally, I’ll include a toast container at the end of the body and an inline progress area for scanning. Lastly, I plan to add onboarding markers using data-tour attributes and enrich key items with data-help. Time to patch index.html!
[2025-09-05T17:26:31] tokens used: 3221
[2025-09-05T17:26:31] turn diff:
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }


[2025-09-05T17:26:34] thinking

It seems like the patch I attempted failed, possibly because of a context mismatch. I think this could be due to minor spacing issues or existing attributes causing the problem. I'll need to check the relevant section around the chat to ensure that everything aligns properly. It's important to make sure the context is correct before moving forward, so let’s dig into that!
[2025-09-05T17:26:36] exec bash -lc "sed -n '120,220p' src/dashboard/web/index.html" in /Users/panda/Desktop/EUFM
[2025-09-05T17:26:36] bash -lc "sed -n '120,220p' src/dashboard/web/index.html" succeeded in 33ms:
          <!-- Project Status -->
          <article class="card project" aria-label="EUFM project status">
            <div class="card-head">
              <span class="material-symbols-rounded">flag</span>
              <h3>EUFM Project</h3>
            </div>
            <div class="project-body">
              <div class="phase" id="project-phase">Foundation Complete</div>
              <div class="progress">
                <div class="bar"><div class="fill" id="progress-fill" style="width: 0%"></div></div>
                <div class="progress-text" id="progress-text">0% Complete</div>
              </div>
              <div class="next" id="next-milestone">Next: —</div>
              <div class="pills">
                <div class="pill">
                  <span class="material-symbols-rounded">euro</span>
                  <span><span id="funding-count">0</span> Active Calls</span>
                </div>
              </div>
            </div>
[2025-09-05T17:26:36] tokens used: 1597
[2025-09-05T17:26:36] turn diff:
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }

[2025-09-05T17:26:42] exec bash -lc "sed -n '220,440p' src/dashboard/web/index.html" in /Users/panda/Desktop/EUFM
[2025-09-05T17:26:42] bash -lc "sed -n '220,440p' src/dashboard/web/index.html" succeeded in 20ms:
          <article class="card opportunities full">
            <div class="card-head">
              <span class="material-symbols-rounded">work</span>
              <h3>Live Opportunities</h3>
              <div class="card-actions">
                <button class="btn" id="scan-funding-btn-2">
                  <span class="material-symbols-rounded">search</span>
                  <span>Scan Now</span>
                </button>
              </div>
            </div>
            <div class="opportunity-list" id="opportunity-list-2"></div>
          </article>
        </div>
      </section>

      <section id="section-activity" class="section" aria-labelledby="activity-title" role="region">
        <h2 id="activity-title" class="section-title">Activity & Alerts</h2>
        <div class="grid single">
          <article class="card activity full">
[2025-09-05T17:26:42] tokens used: 1243
[2025-09-05T17:26:42] turn diff:
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }

[2025-09-05T17:26:47] apply_patch auto_approved=true:
M /Users/panda/Desktop/EUFM/src/dashboard/web/index.html
@@ -67,10 +67,10 @@
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
[2025-09-05T17:26:47] apply_patch(auto_approved=true) exited 0 in 221ms:
Success. Updated the following files:
M src/dashboard/web/index.html
[2025-09-05T17:26:47] turn diff:
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..c819b93d9410247fb0b895416d6ec59f30e2ca92
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>

[2025-09-05T17:26:47] tokens used: 1470
[2025-09-05T17:26:47] turn diff:
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..c819b93d9410247fb0b895416d6ec59f30e2ca92
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>

[2025-09-05T17:26:56] apply_patch auto_approved=true:
M /Users/panda/Desktop/EUFM/src/dashboard/web/index.html
@@ -164,4 +164,4 @@
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
@@ -169,3 +169,3 @@
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
@@ -173,2 +173,3 @@
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
[2025-09-05T17:26:56] apply_patch(auto_approved=true) exited 0 in 266ms:
Success. Updated the following files:
M src/dashboard/web/index.html
[2025-09-05T17:26:56] turn diff:
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..efcd7608f3d87118630c77850a1ed6e63eb16f15
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>

[2025-09-05T17:26:56] tokens used: 850
[2025-09-05T17:26:56] turn diff:
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..efcd7608f3d87118630c77850a1ed6e63eb16f15
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>

[2025-09-05T17:27:04] apply_patch auto_approved=true:
M /Users/panda/Desktop/EUFM/src/dashboard/web/index.html
@@ -194,4 +194,4 @@
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
@@ -208,3 +208,3 @@
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
[2025-09-05T17:27:04] apply_patch(auto_approved=true) exited 0 in 207ms:
Success. Updated the following files:
M src/dashboard/web/index.html
[2025-09-05T17:27:04] turn diff:
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..9a337933b43aa343880499760a31123b175cf4c5
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>

[2025-09-05T17:27:04] tokens used: 805
[2025-09-05T17:27:04] turn diff:
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..9a337933b43aa343880499760a31123b175cf4c5
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>

[2025-09-05T17:27:12] apply_patch auto_approved=true:
M /Users/panda/Desktop/EUFM/src/dashboard/web/index.html
@@ -225,3 +225,3 @@
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
[2025-09-05T17:27:12] apply_patch(auto_approved=true) exited 0 in 281ms:
Success. Updated the following files:
M src/dashboard/web/index.html
[2025-09-05T17:27:12] turn diff:
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..38af4cd168e963ba06207b7f1c7d71d5b77205f8
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>
@@ -222,7 +223,7 @@
               <span class="material-symbols-rounded">work</span>
               <h3>Live Opportunities</h3>
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>

[2025-09-05T17:27:12] tokens used: 486
[2025-09-05T17:27:12] turn diff:
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..38af4cd168e963ba06207b7f1c7d71d5b77205f8
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>
@@ -222,7 +223,7 @@
               <span class="material-symbols-rounded">work</span>
               <h3>Live Opportunities</h3>
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>

[2025-09-05T17:27:18] apply_patch auto_approved=true:
M /Users/panda/Desktop/EUFM/src/dashboard/web/index.html
@@ -282,3 +282,3 @@
           <div class="row">
-            <button class="btn" id="export-json-btn">
+            <button class="btn" id="export-json-btn" title="Download a JSON snapshot of system status">
               <span class="material-symbols-rounded">download</span>
@@ -286,2 +286,3 @@
             </button>
+            <small class="meta">Includes agents, costs, memory, alerts and project status</small>
           </div>
[2025-09-05T17:27:18] apply_patch(auto_approved=true) exited 0 in 278ms:
Success. Updated the following files:
M src/dashboard/web/index.html
[2025-09-05T17:27:18] turn diff:
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..689c364a05f60338a3ec57cb4a0b84d4f71b79b3
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>
@@ -222,7 +223,7 @@
               <span class="material-symbols-rounded">work</span>
               <h3>Live Opportunities</h3>
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
@@ -279,10 +280,11 @@
             </label>
           </div>
           <div class="row">
-            <button class="btn" id="export-json-btn">
+            <button class="btn" id="export-json-btn" title="Download a JSON snapshot of system status">
               <span class="material-symbols-rounded">download</span>
               <span>Export status JSON</span>
             </button>
+            <small class="meta">Includes agents, costs, memory, alerts and project status</small>
           </div>
         </div>
       </section>

[2025-09-05T17:27:18] tokens used: 417
[2025-09-05T17:27:18] turn diff:
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..689c364a05f60338a3ec57cb4a0b84d4f71b79b3
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>
@@ -222,7 +223,7 @@
               <span class="material-symbols-rounded">work</span>
               <h3>Live Opportunities</h3>
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
@@ -279,10 +280,11 @@
             </label>
           </div>
           <div class="row">
-            <button class="btn" id="export-json-btn">
+            <button class="btn" id="export-json-btn" title="Download a JSON snapshot of system status">
               <span class="material-symbols-rounded">download</span>
               <span>Export status JSON</span>
             </button>
+            <small class="meta">Includes agents, costs, memory, alerts and project status</small>
           </div>
         </div>
       </section>

[2025-09-05T17:27:21] apply_patch auto_approved=true:
M /Users/panda/Desktop/EUFM/src/dashboard/web/index.html
@@ -311,2 +311,5 @@
 
+  <!-- Toasts -->
+  <div id="toast-container" class="toast-container" aria-live="polite"></div>
+
   <script src="dashboard.js"></script>
[2025-09-05T17:27:22] apply_patch(auto_approved=true) exited 0 in 313ms:
Success. Updated the following files:
M src/dashboard/web/index.html
[2025-09-05T17:27:22] turn diff:
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..ee751a887da82d618e95d78dfa323c4364e599ef
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>
@@ -222,7 +223,7 @@
               <span class="material-symbols-rounded">work</span>
               <h3>Live Opportunities</h3>
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
@@ -279,10 +280,11 @@
             </label>
           </div>
           <div class="row">
-            <button class="btn" id="export-json-btn">
+            <button class="btn" id="export-json-btn" title="Download a JSON snapshot of system status">
               <span class="material-symbols-rounded">download</span>
               <span>Export status JSON</span>
             </button>
+            <small class="meta">Includes agents, costs, memory, alerts and project status</small>
           </div>
         </div>
       </section>
@@ -307,6 +309,9 @@
     <div class="search-results" id="search-results" role="listbox" aria-label="Search results"></div>
   </div>
 
+  <!-- Toasts -->
+  <div id="toast-container" class="toast-container" aria-live="polite"></div>
+
   <script src="dashboard.js"></script>
 </body>
 </html>

[2025-09-05T17:27:22] tokens used: 358
[2025-09-05T17:27:22] turn diff:
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..ee751a887da82d618e95d78dfa323c4364e599ef
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>
@@ -222,7 +223,7 @@
               <span class="material-symbols-rounded">work</span>
               <h3>Live Opportunities</h3>
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
@@ -279,10 +280,11 @@
             </label>
           </div>
           <div class="row">
-            <button class="btn" id="export-json-btn">
+            <button class="btn" id="export-json-btn" title="Download a JSON snapshot of system status">
               <span class="material-symbols-rounded">download</span>
               <span>Export status JSON</span>
             </button>
+            <small class="meta">Includes agents, costs, memory, alerts and project status</small>
           </div>
         </div>
       </section>
@@ -307,6 +309,9 @@
     <div class="search-results" id="search-results" role="listbox" aria-label="Search results"></div>
   </div>
 
+  <!-- Toasts -->
+  <div id="toast-container" class="toast-container" aria-live="polite"></div>
+
   <script src="dashboard.js"></script>
 </body>
 </html>


[2025-09-05T17:27:30] thinking

**Updating dashboard.js**

I’m focusing on updating dashboard.js with a few enhancements! First, I want to add toast utilities, loading spinner controls, and progress updates for scanFunding and task submission. I’m thinking of integrating contextual search suggestions and display counts as well.

To do this, I'll add a constructor state for counts and scanning status, cache elements like toast containers and buttons, and create utility methods for showing toasts and managing loading states. It all seems logical, but I’ll refine it as I go!
**Implementing Loading Functionality**

I’m planning to create a flexible function called startButtonLoading(btn, label) that will add a 'loading' class and set a data-label, possibly even setting aria-busy for accessibility. 

Next, I want to wrap the existing 'scanFunding' function to show a spinner. I’ll set both scan buttons to loading and ensure that chat message lines reflect the activity as in the examples. Also, I noticed there's no progress bar in the HTML, so I might add a small inline area under the card header for that purpose.
**Enhancing Backend Functionality**

I’m planning to add a small text label called 'scan-help' and an ephemeral '.progress-inline' section below the action buttons. 

Next, I’ll handle WebSocket messages by introducing types like 'activity', 'progress', and 'notify'. I also need to update the updateOpportunities function to track the last scan time based on the most recent opps' scannedAt.

For search improvements, if the query length is less than 2, I’ll show a static list with suggestions and counts. I want to highlight matches by replacing titles and snippets in the results. 

Lastly, for onboarding, upon the first load without the localStorage 'eufm-onboarded', I’ll show help bubbles near the scan button to guide users. I'll remove them after six seconds or when the user clicks anywhere.
**Implementing Updates for Notifications and Tasks**

I’m looking to add a 'dismiss' option and set a flag to manage notifications effectively. 

For smart notifications, when the updateOpportunities function detects any opportunities that are closing soon, I want to show a toast message saying, "Deadline approaching: ...". I'll specifically target those with the status 'closing_soon' and near deadlines.

Additionally, I plan to improve the task execution flow by showing progress stubs and toast messages when submitting tasks. It feels like these incremental updates in dashboard.js will enhance the user experience!
[2025-09-05T17:27:40] codex
**Implementing Loading Functionality**

I’m planning to create a flexible function called startButtonLoading(btn, label) that will add a 'loading' class and set a data-label, possibly even setting aria-busy for accessibility. 

Next, I want to wrap the existing 'scanFunding' function to show a spinner. I’ll set both scan buttons to loading and ensure that chat message lines reflect the activity as in the examples. Also, I noticed there's no progress bar in the HTML, so I might add a small inline area under the card header for that purpose.
[2025-09-05T17:27:40] codex
**Enhancing Backend Functionality**

I’m planning to add a small text label called 'scan-help' and an ephemeral '.progress-inline' section below the action buttons. 

Next, I’ll handle WebSocket messages by introducing types like 'activity', 'progress', and 'notify'. I also need to update the updateOpportunities function to track the last scan time based on the most recent opps' scannedAt.

For search improvements, if the query length is less than 2, I’ll show a static list with suggestions and counts. I want to highlight matches by replacing titles and snippets in the results. 

Lastly, for onboarding, upon the first load without the localStorage 'eufm-onboarded', I’ll show help bubbles near the scan button to guide users. I'll remove them after six seconds or when the user clicks anywhere.
[2025-09-05T17:27:40] codex
**Implementing Updates for Notifications and Tasks**

I’m looking to add a 'dismiss' option and set a flag to manage notifications effectively. 

For smart notifications, when the updateOpportunities function detects any opportunities that are closing soon, I want to show a toast message saying, "Deadline approaching: ...". I'll specifically target those with the status 'closing_soon' and near deadlines.

Additionally, I plan to improve the task execution flow by showing progress stubs and toast messages when submitting tasks. It feels like these incremental updates in dashboard.js will enhance the user experience!
[2025-09-05T17:28:00] apply_patch auto_approved=true:
M /Users/panda/Desktop/EUFM/src/dashboard/web/dashboard.js
@@ -8,2 +8,4 @@
     this.sections = ['overview', 'funding', 'activity', 'analytics', 'settings'];
+    this.counts = { opportunities: 0, notes: 0, tools: 0 };
+    this.state = { scanning: false };
     this.init();
@@ -33,2 +35,6 @@
     this.$searchResults = document.getElementById('search-results');
+    this.$toast = document.getElementById('toast-container');
+    this.$scanBtn1 = document.getElementById('scan-funding-btn');
+    this.$scanBtn2 = document.getElementById('scan-funding-btn-2');
+    this.$scanHelp = document.getElementById('scan-help');
   }
@@ -144,2 +150,42 @@
 
+  // --- UI feedback helpers ---
+  showToast(message, type = 'info') {
+    if (!this.$toast) return;
+    const div = document.createElement('div');
+    div.className = `toast ${type}`;
+    div.innerHTML = `
+      <span class="material-symbols-rounded">${type === 'success' ? 'check_circle' : type === 'error' ? 'error' : 'info'}</span>
+      <div>${message}</div>
+    `;
+    this.$toast.appendChild(div);
+    setTimeout(() => div.remove(), 4000);
+  }
+
+  setLoadingBtn(btn, loading = true) {
+    if (!btn) return;
+    btn.classList.toggle('loading', !!loading);
+    btn.setAttribute('aria-busy', loading ? 'true' : 'false');
+    btn.disabled = !!loading;
+  }
+
+  insertInlineProgress(targetEl) {
+    if (!targetEl) return null;
+    let wrap = targetEl.parentElement?.querySelector('.progress-inline');
+    if (!wrap) {
+      wrap = document.createElement('div');
+      wrap.className = 'progress-inline';
+      wrap.innerHTML = `<div class="progress-bar"><div class="fill"></div></div><span class="label">Preparing…</span>`;
+      targetEl.parentElement?.appendChild(wrap);
+    }
+    return wrap;
+  }
+
+  setInlineProgress(wrap, percent, label) {
+    if (!wrap) return;
+    const fill = wrap.querySelector('.fill');
+    const lab = wrap.querySelector('.label');
+    if (fill) fill.style.width = `${Math.max(0, Math.min(100, percent))}%`;
+    if (lab && label) lab.textContent = label;
+  }
+
   async updateStatus() {
@@ -164,2 +210,7 @@
     document.getElementById('funding-count').textContent = s.eufmProject.fundingOpportunities;
+    // counts for search context
+    this.counts.opportunities = s.eufmProject.fundingOpportunities;
+    document.getElementById('global-search').placeholder = `Search ${this.counts.opportunities} opportunities, ${s.system.memory.notes} notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator`;
+    this.counts.notes = s.system.memory.notes;
+    this.counts.tools = 8;
     // Activity from alerts
@@ -186,2 +237,3 @@
     `).join('');
+    this.counts.tools = Array.isArray(tools) ? tools.length : 0;
   }
@@ -221,2 +273,9 @@
     if (el2) renderOpps(el2);
+    // Update last scan helper and smart notifications
+    const last = opps.reduce((acc, o) => Math.max(acc, new Date(o.scannedAt || 0).getTime()), 0);
+    if (this.$scanHelp) this.$scanHelp.textContent = last ? `Last scan: ${new Date(last).toLocaleString()} • Found ${opps.length} opportunities` : 'Last scan: —';
+    const closingSoon = opps.filter(o => o.status === 'closing_soon').slice(0, 1);
+    if (closingSoon.length) {
+      this.showToast(`🚨 Deadline approaching: ${closingSoon[0].title} closes soon`, 'info');
+    }
   }
@@ -239,6 +298,14 @@
   async scanFunding() {
-    this.addChatMessage('system', 'Starting EU funding opportunity scan...');
+    if (this.state.scanning) return;
+    this.state.scanning = true;
+    this.addChatMessage('system', 'Scanning EU portals…');
+    this.showToast('Scanning EU portals for opportunities…', 'info');
+    const btns = [this.$scanBtn1, this.$scanBtn2];
+    btns.forEach(b => this.setLoadingBtn(b, true));
+    const progressHost = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+    this.setInlineProgress(progressHost, 5, 'Contacting sources…');
     try {
-      await this.api('/api/scan-funding', { method: 'POST' });
-      this.addChatMessage('system', 'Scan complete. Updating opportunities...');
+      const res = await this.api('/api/scan-funding', { method: 'POST' });
+      this.addChatMessage('system', '✅ Scan complete - updating opportunities…');
+      this.showToast(`✅ ${res?.message || 'Scan complete'}${res?.found ? ` • ${res.found} opportunities` : ''}`, 'success');
       await this.updateOpportunities();
@@ -246,3 +313,9 @@
       this.addChatMessage('system', 'Funding scan failed. Check logs.');
+      this.showToast('Funding scan failed', 'error');
     }
+    finally {
+      btns.forEach(b => this.setLoadingBtn(b, false));
+      this.state.scanning = false;
+      if (progressHost) progressHost.remove();
+    }
   }
@@ -255,2 +328,6 @@
     this.addChatMessage('user', `${dryRun ? 'Dry Run' : 'Execute'}: ${task}`);
+    this.showToast(`${dryRun ? 'Analyzing' : 'Executing'} task…`, 'info');
+    const execBtn = document.getElementById('submit-task-btn');
+    const dryBtn = document.getElementById('submit-task-dry-btn');
+    [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, true));
     try {
@@ -258,2 +335,3 @@
       this.addChatMessage('system', dryRun ? 'Task analyzed successfully.' : 'Task completed successfully.');
+      this.showToast(dryRun ? '✅ Analysis complete' : '✅ Task completed', 'success');
       document.getElementById('task-modal').classList.remove('open');
@@ -263,2 +341,6 @@
       this.addChatMessage('system', 'Task execution failed.');
+      this.showToast('Task execution failed', 'error');
+    }
+    finally {
+      [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, false));
     }
@@ -294,3 +376,14 @@
   async search(q) {
-    if (!q || q.trim().length < 2) { this.$searchPanel.hidden = true; return; }
+    if (!q || q.trim().length < 2) {
+      // Suggestions
+      this.$searchPanel.hidden = false;
+      this.$searchResults.innerHTML = `
+        <div class="search-item">
+          <div class="type">Suggestions</div>
+          <div class="title">Searching ${this.counts.opportunities} opportunities, ${this.counts.notes} notes, ${this.counts.tools} tools</div>
+          <div class="snippet">Try: <code>AI funding</code>, <code>Horizon Europe</code>, <code>EIC Accelerator</code></div>
+        </div>
+      `;
+      return;
+    }
     try {
@@ -298,2 +391,7 @@
       this.$searchPanel.hidden = false;
+      const hi = (text) => {
+        if (!text) return '';
+        const re = new RegExp(`(${q.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&')})`, 'ig');
+        return String(text).replace(re, '<mark>$1</mark>');
+      };
       this.$searchResults.innerHTML = results.map(r => `
@@ -301,4 +399,4 @@
           <div class="type">${r.type}</div>
-          <div class="title">${r.title}</div>
-          <div class="snippet">${r.snippet || ''}</div>
+          <div class="title">${hi(r.title)}</div>
+          <div class="snippet">${hi(r.snippet || '')}</div>
         </div>
@@ -329,2 +427,8 @@
           if (msg.type === 'funding_opportunities') { this.updateOpportunities(); }
+          if (msg.type === 'activity') { this.addChatMessage('system', msg.message); }
+          if (msg.type === 'progress' && this.state.scanning) {
+            const host = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+            if (msg.percent != null) this.setInlineProgress(host, msg.percent, msg.message || '');
+          }
+          if (msg.type === 'notify') { this.showToast(msg.message, msg.level || 'info'); }
         } catch {}
[2025-09-05T17:28:00] apply_patch(auto_approved=true) exited 0 in 389ms:
Success. Updated the following files:
M src/dashboard/web/dashboard.js
[2025-09-05T17:28:00] turn diff:
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/dashboard.js b/src/dashboard/web/dashboard.js
index cd16d5697fb3c112440336e88cb1eb4ec5d3ffa1..c9fb4dd8ff23080b09231c1e5bf5cd0d2429c6b7
--- a/src/dashboard/web/dashboard.js
+++ b/src/dashboard/web/dashboard.js
@@ -6,6 +6,8 @@
     this.initTime = new Date();
     this.theme = localStorage.getItem('eufm-theme') || 'light';
     this.sections = ['overview', 'funding', 'activity', 'analytics', 'settings'];
+    this.counts = { opportunities: 0, notes: 0, tools: 0 };
+    this.state = { scanning: false };
     this.init();
   }
 
@@ -31,6 +33,10 @@
     this.$globalSearch = document.getElementById('global-search');
     this.$searchPanel = document.getElementById('search-panel');
     this.$searchResults = document.getElementById('search-results');
+    this.$toast = document.getElementById('toast-container');
+    this.$scanBtn1 = document.getElementById('scan-funding-btn');
+    this.$scanBtn2 = document.getElementById('scan-funding-btn-2');
+    this.$scanHelp = document.getElementById('scan-help');
   }
 
   bindUI() {
@@ -142,6 +148,46 @@
     return res.text();
   }
 
+  // --- UI feedback helpers ---
+  showToast(message, type = 'info') {
+    if (!this.$toast) return;
+    const div = document.createElement('div');
+    div.className = `toast ${type}`;
+    div.innerHTML = `
+      <span class="material-symbols-rounded">${type === 'success' ? 'check_circle' : type === 'error' ? 'error' : 'info'}</span>
+      <div>${message}</div>
+    `;
+    this.$toast.appendChild(div);
+    setTimeout(() => div.remove(), 4000);
+  }
+
+  setLoadingBtn(btn, loading = true) {
+    if (!btn) return;
+    btn.classList.toggle('loading', !!loading);
+    btn.setAttribute('aria-busy', loading ? 'true' : 'false');
+    btn.disabled = !!loading;
+  }
+
+  insertInlineProgress(targetEl) {
+    if (!targetEl) return null;
+    let wrap = targetEl.parentElement?.querySelector('.progress-inline');
+    if (!wrap) {
+      wrap = document.createElement('div');
+      wrap.className = 'progress-inline';
+      wrap.innerHTML = `<div class="progress-bar"><div class="fill"></div></div><span class="label">Preparing…</span>`;
+      targetEl.parentElement?.appendChild(wrap);
+    }
+    return wrap;
+  }
+
+  setInlineProgress(wrap, percent, label) {
+    if (!wrap) return;
+    const fill = wrap.querySelector('.fill');
+    const lab = wrap.querySelector('.label');
+    if (fill) fill.style.width = `${Math.max(0, Math.min(100, percent))}%`;
+    if (lab && label) lab.textContent = label;
+  }
+
   async updateStatus() {
     const s = await this.api('/api/status');
     // Agents
@@ -162,6 +208,11 @@
     document.getElementById('progress-text').textContent = `${s.eufmProject.progress}% Complete`;
     document.getElementById('next-milestone').textContent = `Next: ${s.eufmProject.nextMilestone}`;
     document.getElementById('funding-count').textContent = s.eufmProject.fundingOpportunities;
+    // counts for search context
+    this.counts.opportunities = s.eufmProject.fundingOpportunities;
+    document.getElementById('global-search').placeholder = `Search ${this.counts.opportunities} opportunities, ${s.system.memory.notes} notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator`;
+    this.counts.notes = s.system.memory.notes;
+    this.counts.tools = 8;
     // Activity from alerts
     this.renderActivity(s.alerts, 'activity-list');
   }
@@ -184,6 +235,7 @@
         <div class="tool-status status-${t.status}">${t.status}</div>
       </div>
     `).join('');
+    this.counts.tools = Array.isArray(tools) ? tools.length : 0;
   }
 
   async updateSubscriptions() {
@@ -219,6 +271,13 @@
     renderOpps(document.getElementById('opportunity-list'));
     const el2 = document.getElementById('opportunity-list-2');
     if (el2) renderOpps(el2);
+    // Update last scan helper and smart notifications
+    const last = opps.reduce((acc, o) => Math.max(acc, new Date(o.scannedAt || 0).getTime()), 0);
+    if (this.$scanHelp) this.$scanHelp.textContent = last ? `Last scan: ${new Date(last).toLocaleString()} • Found ${opps.length} opportunities` : 'Last scan: —';
+    const closingSoon = opps.filter(o => o.status === 'closing_soon').slice(0, 1);
+    if (closingSoon.length) {
+      this.showToast(`🚨 Deadline approaching: ${closingSoon[0].title} closes soon`, 'info');
+    }
   }
 
   async updateAlerts() {
@@ -237,14 +296,28 @@
   }
 
   async scanFunding() {
-    this.addChatMessage('system', 'Starting EU funding opportunity scan...');
+    if (this.state.scanning) return;
+    this.state.scanning = true;
+    this.addChatMessage('system', 'Scanning EU portals…');
+    this.showToast('Scanning EU portals for opportunities…', 'info');
+    const btns = [this.$scanBtn1, this.$scanBtn2];
+    btns.forEach(b => this.setLoadingBtn(b, true));
+    const progressHost = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+    this.setInlineProgress(progressHost, 5, 'Contacting sources…');
     try {
-      await this.api('/api/scan-funding', { method: 'POST' });
-      this.addChatMessage('system', 'Scan complete. Updating opportunities...');
+      const res = await this.api('/api/scan-funding', { method: 'POST' });
+      this.addChatMessage('system', '✅ Scan complete - updating opportunities…');
+      this.showToast(`✅ ${res?.message || 'Scan complete'}${res?.found ? ` • ${res.found} opportunities` : ''}`, 'success');
       await this.updateOpportunities();
     } catch (e) {
       this.addChatMessage('system', 'Funding scan failed. Check logs.');
+      this.showToast('Funding scan failed', 'error');
     }
+    finally {
+      btns.forEach(b => this.setLoadingBtn(b, false));
+      this.state.scanning = false;
+      if (progressHost) progressHost.remove();
+    }
   }
 
   openTaskModal() { document.getElementById('task-modal').classList.add('open'); }
@@ -253,14 +326,23 @@
     const task = document.getElementById('task-input').value.trim();
     if (!task) return;
     this.addChatMessage('user', `${dryRun ? 'Dry Run' : 'Execute'}: ${task}`);
+    this.showToast(`${dryRun ? 'Analyzing' : 'Executing'} task…`, 'info');
+    const execBtn = document.getElementById('submit-task-btn');
+    const dryBtn = document.getElementById('submit-task-dry-btn');
+    [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, true));
     try {
       await this.api('/api/execute', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ task, dryRun }) });
       this.addChatMessage('system', dryRun ? 'Task analyzed successfully.' : 'Task completed successfully.');
+      this.showToast(dryRun ? '✅ Analysis complete' : '✅ Task completed', 'success');
       document.getElementById('task-modal').classList.remove('open');
       document.getElementById('task-input').value = '';
       await this.refresh();
     } catch (e) {
       this.addChatMessage('system', 'Task execution failed.');
+      this.showToast('Task execution failed', 'error');
+    }
+    finally {
+      [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, false));
     }
   }
 
@@ -292,15 +374,31 @@
   }
 
   async search(q) {
-    if (!q || q.trim().length < 2) { this.$searchPanel.hidden = true; return; }
+    if (!q || q.trim().length < 2) {
+      // Suggestions
+      this.$searchPanel.hidden = false;
+      this.$searchResults.innerHTML = `
+        <div class="search-item">
+          <div class="type">Suggestions</div>
+          <div class="title">Searching ${this.counts.opportunities} opportunities, ${this.counts.notes} notes, ${this.counts.tools} tools</div>
+          <div class="snippet">Try: <code>AI funding</code>, <code>Horizon Europe</code>, <code>EIC Accelerator</code></div>
+        </div>
+      `;
+      return;
+    }
     try {
       const results = await this.api(`/api/search?q=${encodeURIComponent(q)}`);
       this.$searchPanel.hidden = false;
+      const hi = (text) => {
+        if (!text) return '';
+        const re = new RegExp(`(${q.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&')})`, 'ig');
+        return String(text).replace(re, '<mark>$1</mark>');
+      };
       this.$searchResults.innerHTML = results.map(r => `
         <div class="search-item">
           <div class="type">${r.type}</div>
-          <div class="title">${r.title}</div>
-          <div class="snippet">${r.snippet || ''}</div>
+          <div class="title">${hi(r.title)}</div>
+          <div class="snippet">${hi(r.snippet || '')}</div>
         </div>
       `).join('');
     } catch {
@@ -327,6 +425,12 @@
           const msg = JSON.parse(evt.data);
           if (msg.type === 'status_update') { this.applyStatus(msg.data); }
           if (msg.type === 'funding_opportunities') { this.updateOpportunities(); }
+          if (msg.type === 'activity') { this.addChatMessage('system', msg.message); }
+          if (msg.type === 'progress' && this.state.scanning) {
+            const host = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+            if (msg.percent != null) this.setInlineProgress(host, msg.percent, msg.message || '');
+          }
+          if (msg.type === 'notify') { this.showToast(msg.message, msg.level || 'info'); }
         } catch {}
       };
     } catch {}
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..ee751a887da82d618e95d78dfa323c4364e599ef
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>
@@ -222,7 +223,7 @@
               <span class="material-symbols-rounded">work</span>
               <h3>Live Opportunities</h3>
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
@@ -279,10 +280,11 @@
             </label>
           </div>
           <div class="row">
-            <button class="btn" id="export-json-btn">
+            <button class="btn" id="export-json-btn" title="Download a JSON snapshot of system status">
               <span class="material-symbols-rounded">download</span>
               <span>Export status JSON</span>
             </button>
+            <small class="meta">Includes agents, costs, memory, alerts and project status</small>
           </div>
         </div>
       </section>
@@ -307,6 +309,9 @@
     <div class="search-results" id="search-results" role="listbox" aria-label="Search results"></div>
   </div>
 
+  <!-- Toasts -->
+  <div id="toast-container" class="toast-container" aria-live="polite"></div>
+
   <script src="dashboard.js"></script>
 </body>
 </html>

[2025-09-05T17:28:00] tokens used: 4171
[2025-09-05T17:28:00] turn diff:
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/dashboard.js b/src/dashboard/web/dashboard.js
index cd16d5697fb3c112440336e88cb1eb4ec5d3ffa1..c9fb4dd8ff23080b09231c1e5bf5cd0d2429c6b7
--- a/src/dashboard/web/dashboard.js
+++ b/src/dashboard/web/dashboard.js
@@ -6,6 +6,8 @@
     this.initTime = new Date();
     this.theme = localStorage.getItem('eufm-theme') || 'light';
     this.sections = ['overview', 'funding', 'activity', 'analytics', 'settings'];
+    this.counts = { opportunities: 0, notes: 0, tools: 0 };
+    this.state = { scanning: false };
     this.init();
   }
 
@@ -31,6 +33,10 @@
     this.$globalSearch = document.getElementById('global-search');
     this.$searchPanel = document.getElementById('search-panel');
     this.$searchResults = document.getElementById('search-results');
+    this.$toast = document.getElementById('toast-container');
+    this.$scanBtn1 = document.getElementById('scan-funding-btn');
+    this.$scanBtn2 = document.getElementById('scan-funding-btn-2');
+    this.$scanHelp = document.getElementById('scan-help');
   }
 
   bindUI() {
@@ -142,6 +148,46 @@
     return res.text();
   }
 
+  // --- UI feedback helpers ---
+  showToast(message, type = 'info') {
+    if (!this.$toast) return;
+    const div = document.createElement('div');
+    div.className = `toast ${type}`;
+    div.innerHTML = `
+      <span class="material-symbols-rounded">${type === 'success' ? 'check_circle' : type === 'error' ? 'error' : 'info'}</span>
+      <div>${message}</div>
+    `;
+    this.$toast.appendChild(div);
+    setTimeout(() => div.remove(), 4000);
+  }
+
+  setLoadingBtn(btn, loading = true) {
+    if (!btn) return;
+    btn.classList.toggle('loading', !!loading);
+    btn.setAttribute('aria-busy', loading ? 'true' : 'false');
+    btn.disabled = !!loading;
+  }
+
+  insertInlineProgress(targetEl) {
+    if (!targetEl) return null;
+    let wrap = targetEl.parentElement?.querySelector('.progress-inline');
+    if (!wrap) {
+      wrap = document.createElement('div');
+      wrap.className = 'progress-inline';
+      wrap.innerHTML = `<div class="progress-bar"><div class="fill"></div></div><span class="label">Preparing…</span>`;
+      targetEl.parentElement?.appendChild(wrap);
+    }
+    return wrap;
+  }
+
+  setInlineProgress(wrap, percent, label) {
+    if (!wrap) return;
+    const fill = wrap.querySelector('.fill');
+    const lab = wrap.querySelector('.label');
+    if (fill) fill.style.width = `${Math.max(0, Math.min(100, percent))}%`;
+    if (lab && label) lab.textContent = label;
+  }
+
   async updateStatus() {
     const s = await this.api('/api/status');
     // Agents
@@ -162,6 +208,11 @@
     document.getElementById('progress-text').textContent = `${s.eufmProject.progress}% Complete`;
     document.getElementById('next-milestone').textContent = `Next: ${s.eufmProject.nextMilestone}`;
     document.getElementById('funding-count').textContent = s.eufmProject.fundingOpportunities;
+    // counts for search context
+    this.counts.opportunities = s.eufmProject.fundingOpportunities;
+    document.getElementById('global-search').placeholder = `Search ${this.counts.opportunities} opportunities, ${s.system.memory.notes} notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator`;
+    this.counts.notes = s.system.memory.notes;
+    this.counts.tools = 8;
     // Activity from alerts
     this.renderActivity(s.alerts, 'activity-list');
   }
@@ -184,6 +235,7 @@
         <div class="tool-status status-${t.status}">${t.status}</div>
       </div>
     `).join('');
+    this.counts.tools = Array.isArray(tools) ? tools.length : 0;
   }
 
   async updateSubscriptions() {
@@ -219,6 +271,13 @@
     renderOpps(document.getElementById('opportunity-list'));
     const el2 = document.getElementById('opportunity-list-2');
     if (el2) renderOpps(el2);
+    // Update last scan helper and smart notifications
+    const last = opps.reduce((acc, o) => Math.max(acc, new Date(o.scannedAt || 0).getTime()), 0);
+    if (this.$scanHelp) this.$scanHelp.textContent = last ? `Last scan: ${new Date(last).toLocaleString()} • Found ${opps.length} opportunities` : 'Last scan: —';
+    const closingSoon = opps.filter(o => o.status === 'closing_soon').slice(0, 1);
+    if (closingSoon.length) {
+      this.showToast(`🚨 Deadline approaching: ${closingSoon[0].title} closes soon`, 'info');
+    }
   }
 
   async updateAlerts() {
@@ -237,14 +296,28 @@
   }
 
   async scanFunding() {
-    this.addChatMessage('system', 'Starting EU funding opportunity scan...');
+    if (this.state.scanning) return;
+    this.state.scanning = true;
+    this.addChatMessage('system', 'Scanning EU portals…');
+    this.showToast('Scanning EU portals for opportunities…', 'info');
+    const btns = [this.$scanBtn1, this.$scanBtn2];
+    btns.forEach(b => this.setLoadingBtn(b, true));
+    const progressHost = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+    this.setInlineProgress(progressHost, 5, 'Contacting sources…');
     try {
-      await this.api('/api/scan-funding', { method: 'POST' });
-      this.addChatMessage('system', 'Scan complete. Updating opportunities...');
+      const res = await this.api('/api/scan-funding', { method: 'POST' });
+      this.addChatMessage('system', '✅ Scan complete - updating opportunities…');
+      this.showToast(`✅ ${res?.message || 'Scan complete'}${res?.found ? ` • ${res.found} opportunities` : ''}`, 'success');
       await this.updateOpportunities();
     } catch (e) {
       this.addChatMessage('system', 'Funding scan failed. Check logs.');
+      this.showToast('Funding scan failed', 'error');
     }
+    finally {
+      btns.forEach(b => this.setLoadingBtn(b, false));
+      this.state.scanning = false;
+      if (progressHost) progressHost.remove();
+    }
   }
 
   openTaskModal() { document.getElementById('task-modal').classList.add('open'); }
@@ -253,14 +326,23 @@
     const task = document.getElementById('task-input').value.trim();
     if (!task) return;
     this.addChatMessage('user', `${dryRun ? 'Dry Run' : 'Execute'}: ${task}`);
+    this.showToast(`${dryRun ? 'Analyzing' : 'Executing'} task…`, 'info');
+    const execBtn = document.getElementById('submit-task-btn');
+    const dryBtn = document.getElementById('submit-task-dry-btn');
+    [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, true));
     try {
       await this.api('/api/execute', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ task, dryRun }) });
       this.addChatMessage('system', dryRun ? 'Task analyzed successfully.' : 'Task completed successfully.');
+      this.showToast(dryRun ? '✅ Analysis complete' : '✅ Task completed', 'success');
       document.getElementById('task-modal').classList.remove('open');
       document.getElementById('task-input').value = '';
       await this.refresh();
     } catch (e) {
       this.addChatMessage('system', 'Task execution failed.');
+      this.showToast('Task execution failed', 'error');
+    }
+    finally {
+      [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, false));
     }
   }
 
@@ -292,15 +374,31 @@
   }
 
   async search(q) {
-    if (!q || q.trim().length < 2) { this.$searchPanel.hidden = true; return; }
+    if (!q || q.trim().length < 2) {
+      // Suggestions
+      this.$searchPanel.hidden = false;
+      this.$searchResults.innerHTML = `
+        <div class="search-item">
+          <div class="type">Suggestions</div>
+          <div class="title">Searching ${this.counts.opportunities} opportunities, ${this.counts.notes} notes, ${this.counts.tools} tools</div>
+          <div class="snippet">Try: <code>AI funding</code>, <code>Horizon Europe</code>, <code>EIC Accelerator</code></div>
+        </div>
+      `;
+      return;
+    }
     try {
       const results = await this.api(`/api/search?q=${encodeURIComponent(q)}`);
       this.$searchPanel.hidden = false;
+      const hi = (text) => {
+        if (!text) return '';
+        const re = new RegExp(`(${q.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&')})`, 'ig');
+        return String(text).replace(re, '<mark>$1</mark>');
+      };
       this.$searchResults.innerHTML = results.map(r => `
         <div class="search-item">
           <div class="type">${r.type}</div>
-          <div class="title">${r.title}</div>
-          <div class="snippet">${r.snippet || ''}</div>
+          <div class="title">${hi(r.title)}</div>
+          <div class="snippet">${hi(r.snippet || '')}</div>
         </div>
       `).join('');
     } catch {
@@ -327,6 +425,12 @@
           const msg = JSON.parse(evt.data);
           if (msg.type === 'status_update') { this.applyStatus(msg.data); }
           if (msg.type === 'funding_opportunities') { this.updateOpportunities(); }
+          if (msg.type === 'activity') { this.addChatMessage('system', msg.message); }
+          if (msg.type === 'progress' && this.state.scanning) {
+            const host = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+            if (msg.percent != null) this.setInlineProgress(host, msg.percent, msg.message || '');
+          }
+          if (msg.type === 'notify') { this.showToast(msg.message, msg.level || 'info'); }
         } catch {}
       };
     } catch {}
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..ee751a887da82d618e95d78dfa323c4364e599ef
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>
@@ -222,7 +223,7 @@
               <span class="material-symbols-rounded">work</span>
               <h3>Live Opportunities</h3>
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
@@ -279,10 +280,11 @@
             </label>
           </div>
           <div class="row">
-            <button class="btn" id="export-json-btn">
+            <button class="btn" id="export-json-btn" title="Download a JSON snapshot of system status">
               <span class="material-symbols-rounded">download</span>
               <span>Export status JSON</span>
             </button>
+            <small class="meta">Includes agents, costs, memory, alerts and project status</small>
           </div>
         </div>
       </section>
@@ -307,6 +309,9 @@
     <div class="search-results" id="search-results" role="listbox" aria-label="Search results"></div>
   </div>
 
+  <!-- Toasts -->
+  <div id="toast-container" class="toast-container" aria-live="polite"></div>
+
   <script src="dashboard.js"></script>
 </body>
 </html>


[2025-09-05T17:28:06] thinking

**Planning guided onboarding**

I realize we want to implement guided onboarding to enhance user experience. Although we didn’t include help bubbles, we have data-help tooltips. To accomplish this, I can add a simple logic in the init() method after loadAll. Specifically, I should call this.onboardIfFirstRun() to display a help bubble near the scan button and the status chip. It looks like I need to patch dashboard.js to include that function and make the call.
[2025-09-05T17:28:18] apply_patch auto_approved=true:
M /Users/panda/Desktop/EUFM/src/dashboard/web/dashboard.js
@@ -25,2 +25,3 @@
     setInterval(() => this.refresh(), 30000);
+    this.onboardIfFirstRun();
   }
@@ -190,2 +191,26 @@
 
+  onboardIfFirstRun() {
+    const key = 'eufm-onboarded';
+    if (localStorage.getItem(key)) return;
+    const chip = document.getElementById('system-status-chip');
+    const scan = this.$scanBtn1 || this.$scanBtn2;
+    const hints = [];
+    const makeBubble = (target, title, hint) => {
+      if (!target) return;
+      const rect = target.getBoundingClientRect();
+      const b = document.createElement('div');
+      b.className = 'help-bubble';
+      b.style.top = `${window.scrollY + rect.top - 56}px`;
+      b.style.left = `${window.scrollX + rect.left}px`;
+      b.innerHTML = `<div class="title">${title}</div><div class="hint">${hint}</div><div class="help-arrow"></div>`;
+      document.body.appendChild(b);
+      hints.push(b);
+    };
+    makeBubble(chip, 'System Health', 'Live status of agents, uptime and time.');
+    makeBubble(scan, 'Scan for Funding', 'Click to scan EU portals for AI/tech calls.');
+    const dismiss = () => { hints.forEach(h => h.remove()); localStorage.setItem(key, '1'); };
+    setTimeout(dismiss, 6000);
+    document.addEventListener('click', dismiss, { once: true });
+  }
+
   async updateStatus() {
[2025-09-05T17:28:18] apply_patch(auto_approved=true) exited 0 in 417ms:
Success. Updated the following files:
M src/dashboard/web/dashboard.js
[2025-09-05T17:28:18] turn diff:
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/dashboard.js b/src/dashboard/web/dashboard.js
index cd16d5697fb3c112440336e88cb1eb4ec5d3ffa1..b421d3d91ed7d5cdd241efb9579e90f4975060a4
--- a/src/dashboard/web/dashboard.js
+++ b/src/dashboard/web/dashboard.js
@@ -6,6 +6,8 @@
     this.initTime = new Date();
     this.theme = localStorage.getItem('eufm-theme') || 'light';
     this.sections = ['overview', 'funding', 'activity', 'analytics', 'settings'];
+    this.counts = { opportunities: 0, notes: 0, tools: 0 };
+    this.state = { scanning: false };
     this.init();
   }
 
@@ -21,6 +23,7 @@
     setInterval(() => this.updateTimestamp(), 1000);
     setInterval(() => this.updateUptime(), 1000);
     setInterval(() => this.refresh(), 30000);
+    this.onboardIfFirstRun();
   }
 
   cacheEls() {
@@ -31,6 +34,10 @@
     this.$globalSearch = document.getElementById('global-search');
     this.$searchPanel = document.getElementById('search-panel');
     this.$searchResults = document.getElementById('search-results');
+    this.$toast = document.getElementById('toast-container');
+    this.$scanBtn1 = document.getElementById('scan-funding-btn');
+    this.$scanBtn2 = document.getElementById('scan-funding-btn-2');
+    this.$scanHelp = document.getElementById('scan-help');
   }
 
   bindUI() {
@@ -142,6 +149,70 @@
     return res.text();
   }
 
+  // --- UI feedback helpers ---
+  showToast(message, type = 'info') {
+    if (!this.$toast) return;
+    const div = document.createElement('div');
+    div.className = `toast ${type}`;
+    div.innerHTML = `
+      <span class="material-symbols-rounded">${type === 'success' ? 'check_circle' : type === 'error' ? 'error' : 'info'}</span>
+      <div>${message}</div>
+    `;
+    this.$toast.appendChild(div);
+    setTimeout(() => div.remove(), 4000);
+  }
+
+  setLoadingBtn(btn, loading = true) {
+    if (!btn) return;
+    btn.classList.toggle('loading', !!loading);
+    btn.setAttribute('aria-busy', loading ? 'true' : 'false');
+    btn.disabled = !!loading;
+  }
+
+  insertInlineProgress(targetEl) {
+    if (!targetEl) return null;
+    let wrap = targetEl.parentElement?.querySelector('.progress-inline');
+    if (!wrap) {
+      wrap = document.createElement('div');
+      wrap.className = 'progress-inline';
+      wrap.innerHTML = `<div class="progress-bar"><div class="fill"></div></div><span class="label">Preparing…</span>`;
+      targetEl.parentElement?.appendChild(wrap);
+    }
+    return wrap;
+  }
+
+  setInlineProgress(wrap, percent, label) {
+    if (!wrap) return;
+    const fill = wrap.querySelector('.fill');
+    const lab = wrap.querySelector('.label');
+    if (fill) fill.style.width = `${Math.max(0, Math.min(100, percent))}%`;
+    if (lab && label) lab.textContent = label;
+  }
+
+  onboardIfFirstRun() {
+    const key = 'eufm-onboarded';
+    if (localStorage.getItem(key)) return;
+    const chip = document.getElementById('system-status-chip');
+    const scan = this.$scanBtn1 || this.$scanBtn2;
+    const hints = [];
+    const makeBubble = (target, title, hint) => {
+      if (!target) return;
+      const rect = target.getBoundingClientRect();
+      const b = document.createElement('div');
+      b.className = 'help-bubble';
+      b.style.top = `${window.scrollY + rect.top - 56}px`;
+      b.style.left = `${window.scrollX + rect.left}px`;
+      b.innerHTML = `<div class="title">${title}</div><div class="hint">${hint}</div><div class="help-arrow"></div>`;
+      document.body.appendChild(b);
+      hints.push(b);
+    };
+    makeBubble(chip, 'System Health', 'Live status of agents, uptime and time.');
+    makeBubble(scan, 'Scan for Funding', 'Click to scan EU portals for AI/tech calls.');
+    const dismiss = () => { hints.forEach(h => h.remove()); localStorage.setItem(key, '1'); };
+    setTimeout(dismiss, 6000);
+    document.addEventListener('click', dismiss, { once: true });
+  }
+
   async updateStatus() {
     const s = await this.api('/api/status');
     // Agents
@@ -162,6 +233,11 @@
     document.getElementById('progress-text').textContent = `${s.eufmProject.progress}% Complete`;
     document.getElementById('next-milestone').textContent = `Next: ${s.eufmProject.nextMilestone}`;
     document.getElementById('funding-count').textContent = s.eufmProject.fundingOpportunities;
+    // counts for search context
+    this.counts.opportunities = s.eufmProject.fundingOpportunities;
+    document.getElementById('global-search').placeholder = `Search ${this.counts.opportunities} opportunities, ${s.system.memory.notes} notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator`;
+    this.counts.notes = s.system.memory.notes;
+    this.counts.tools = 8;
     // Activity from alerts
     this.renderActivity(s.alerts, 'activity-list');
   }
@@ -184,6 +260,7 @@
         <div class="tool-status status-${t.status}">${t.status}</div>
       </div>
     `).join('');
+    this.counts.tools = Array.isArray(tools) ? tools.length : 0;
   }
 
   async updateSubscriptions() {
@@ -219,6 +296,13 @@
     renderOpps(document.getElementById('opportunity-list'));
     const el2 = document.getElementById('opportunity-list-2');
     if (el2) renderOpps(el2);
+    // Update last scan helper and smart notifications
+    const last = opps.reduce((acc, o) => Math.max(acc, new Date(o.scannedAt || 0).getTime()), 0);
+    if (this.$scanHelp) this.$scanHelp.textContent = last ? `Last scan: ${new Date(last).toLocaleString()} • Found ${opps.length} opportunities` : 'Last scan: —';
+    const closingSoon = opps.filter(o => o.status === 'closing_soon').slice(0, 1);
+    if (closingSoon.length) {
+      this.showToast(`🚨 Deadline approaching: ${closingSoon[0].title} closes soon`, 'info');
+    }
   }
 
   async updateAlerts() {
@@ -237,13 +321,27 @@
   }
 
   async scanFunding() {
-    this.addChatMessage('system', 'Starting EU funding opportunity scan...');
+    if (this.state.scanning) return;
+    this.state.scanning = true;
+    this.addChatMessage('system', 'Scanning EU portals…');
+    this.showToast('Scanning EU portals for opportunities…', 'info');
+    const btns = [this.$scanBtn1, this.$scanBtn2];
+    btns.forEach(b => this.setLoadingBtn(b, true));
+    const progressHost = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+    this.setInlineProgress(progressHost, 5, 'Contacting sources…');
     try {
-      await this.api('/api/scan-funding', { method: 'POST' });
-      this.addChatMessage('system', 'Scan complete. Updating opportunities...');
+      const res = await this.api('/api/scan-funding', { method: 'POST' });
+      this.addChatMessage('system', '✅ Scan complete - updating opportunities…');
+      this.showToast(`✅ ${res?.message || 'Scan complete'}${res?.found ? ` • ${res.found} opportunities` : ''}`, 'success');
       await this.updateOpportunities();
     } catch (e) {
       this.addChatMessage('system', 'Funding scan failed. Check logs.');
+      this.showToast('Funding scan failed', 'error');
+    }
+    finally {
+      btns.forEach(b => this.setLoadingBtn(b, false));
+      this.state.scanning = false;
+      if (progressHost) progressHost.remove();
     }
   }
 
@@ -253,15 +351,24 @@
     const task = document.getElementById('task-input').value.trim();
     if (!task) return;
     this.addChatMessage('user', `${dryRun ? 'Dry Run' : 'Execute'}: ${task}`);
+    this.showToast(`${dryRun ? 'Analyzing' : 'Executing'} task…`, 'info');
+    const execBtn = document.getElementById('submit-task-btn');
+    const dryBtn = document.getElementById('submit-task-dry-btn');
+    [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, true));
     try {
       await this.api('/api/execute', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ task, dryRun }) });
       this.addChatMessage('system', dryRun ? 'Task analyzed successfully.' : 'Task completed successfully.');
+      this.showToast(dryRun ? '✅ Analysis complete' : '✅ Task completed', 'success');
       document.getElementById('task-modal').classList.remove('open');
       document.getElementById('task-input').value = '';
       await this.refresh();
     } catch (e) {
       this.addChatMessage('system', 'Task execution failed.');
+      this.showToast('Task execution failed', 'error');
     }
+    finally {
+      [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, false));
+    }
   }
 
   addChatMessage(type, message) {
@@ -292,15 +399,31 @@
   }
 
   async search(q) {
-    if (!q || q.trim().length < 2) { this.$searchPanel.hidden = true; return; }
+    if (!q || q.trim().length < 2) {
+      // Suggestions
+      this.$searchPanel.hidden = false;
+      this.$searchResults.innerHTML = `
+        <div class="search-item">
+          <div class="type">Suggestions</div>
+          <div class="title">Searching ${this.counts.opportunities} opportunities, ${this.counts.notes} notes, ${this.counts.tools} tools</div>
+          <div class="snippet">Try: <code>AI funding</code>, <code>Horizon Europe</code>, <code>EIC Accelerator</code></div>
+        </div>
+      `;
+      return;
+    }
     try {
       const results = await this.api(`/api/search?q=${encodeURIComponent(q)}`);
       this.$searchPanel.hidden = false;
+      const hi = (text) => {
+        if (!text) return '';
+        const re = new RegExp(`(${q.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&')})`, 'ig');
+        return String(text).replace(re, '<mark>$1</mark>');
+      };
       this.$searchResults.innerHTML = results.map(r => `
         <div class="search-item">
           <div class="type">${r.type}</div>
-          <div class="title">${r.title}</div>
-          <div class="snippet">${r.snippet || ''}</div>
+          <div class="title">${hi(r.title)}</div>
+          <div class="snippet">${hi(r.snippet || '')}</div>
         </div>
       `).join('');
     } catch {
@@ -327,6 +450,12 @@
           const msg = JSON.parse(evt.data);
           if (msg.type === 'status_update') { this.applyStatus(msg.data); }
           if (msg.type === 'funding_opportunities') { this.updateOpportunities(); }
+          if (msg.type === 'activity') { this.addChatMessage('system', msg.message); }
+          if (msg.type === 'progress' && this.state.scanning) {
+            const host = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+            if (msg.percent != null) this.setInlineProgress(host, msg.percent, msg.message || '');
+          }
+          if (msg.type === 'notify') { this.showToast(msg.message, msg.level || 'info'); }
         } catch {}
       };
     } catch {}
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..ee751a887da82d618e95d78dfa323c4364e599ef
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>
@@ -222,7 +223,7 @@
               <span class="material-symbols-rounded">work</span>
               <h3>Live Opportunities</h3>
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
@@ -279,10 +280,11 @@
             </label>
           </div>
           <div class="row">
-            <button class="btn" id="export-json-btn">
+            <button class="btn" id="export-json-btn" title="Download a JSON snapshot of system status">
               <span class="material-symbols-rounded">download</span>
               <span>Export status JSON</span>
             </button>
+            <small class="meta">Includes agents, costs, memory, alerts and project status</small>
           </div>
         </div>
       </section>
@@ -307,6 +309,9 @@
     <div class="search-results" id="search-results" role="listbox" aria-label="Search results"></div>
   </div>
 
+  <!-- Toasts -->
+  <div id="toast-container" class="toast-container" aria-live="polite"></div>
+
   <script src="dashboard.js"></script>
 </body>
 </html>

[2025-09-05T17:28:18] tokens used: 4157
[2025-09-05T17:28:18] turn diff:
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/dashboard.js b/src/dashboard/web/dashboard.js
index cd16d5697fb3c112440336e88cb1eb4ec5d3ffa1..b421d3d91ed7d5cdd241efb9579e90f4975060a4
--- a/src/dashboard/web/dashboard.js
+++ b/src/dashboard/web/dashboard.js
@@ -6,6 +6,8 @@
     this.initTime = new Date();
     this.theme = localStorage.getItem('eufm-theme') || 'light';
     this.sections = ['overview', 'funding', 'activity', 'analytics', 'settings'];
+    this.counts = { opportunities: 0, notes: 0, tools: 0 };
+    this.state = { scanning: false };
     this.init();
   }
 
@@ -21,6 +23,7 @@
     setInterval(() => this.updateTimestamp(), 1000);
     setInterval(() => this.updateUptime(), 1000);
     setInterval(() => this.refresh(), 30000);
+    this.onboardIfFirstRun();
   }
 
   cacheEls() {
@@ -31,6 +34,10 @@
     this.$globalSearch = document.getElementById('global-search');
     this.$searchPanel = document.getElementById('search-panel');
     this.$searchResults = document.getElementById('search-results');
+    this.$toast = document.getElementById('toast-container');
+    this.$scanBtn1 = document.getElementById('scan-funding-btn');
+    this.$scanBtn2 = document.getElementById('scan-funding-btn-2');
+    this.$scanHelp = document.getElementById('scan-help');
   }
 
   bindUI() {
@@ -142,6 +149,70 @@
     return res.text();
   }
 
+  // --- UI feedback helpers ---
+  showToast(message, type = 'info') {
+    if (!this.$toast) return;
+    const div = document.createElement('div');
+    div.className = `toast ${type}`;
+    div.innerHTML = `
+      <span class="material-symbols-rounded">${type === 'success' ? 'check_circle' : type === 'error' ? 'error' : 'info'}</span>
+      <div>${message}</div>
+    `;
+    this.$toast.appendChild(div);
+    setTimeout(() => div.remove(), 4000);
+  }
+
+  setLoadingBtn(btn, loading = true) {
+    if (!btn) return;
+    btn.classList.toggle('loading', !!loading);
+    btn.setAttribute('aria-busy', loading ? 'true' : 'false');
+    btn.disabled = !!loading;
+  }
+
+  insertInlineProgress(targetEl) {
+    if (!targetEl) return null;
+    let wrap = targetEl.parentElement?.querySelector('.progress-inline');
+    if (!wrap) {
+      wrap = document.createElement('div');
+      wrap.className = 'progress-inline';
+      wrap.innerHTML = `<div class="progress-bar"><div class="fill"></div></div><span class="label">Preparing…</span>`;
+      targetEl.parentElement?.appendChild(wrap);
+    }
+    return wrap;
+  }
+
+  setInlineProgress(wrap, percent, label) {
+    if (!wrap) return;
+    const fill = wrap.querySelector('.fill');
+    const lab = wrap.querySelector('.label');
+    if (fill) fill.style.width = `${Math.max(0, Math.min(100, percent))}%`;
+    if (lab && label) lab.textContent = label;
+  }
+
+  onboardIfFirstRun() {
+    const key = 'eufm-onboarded';
+    if (localStorage.getItem(key)) return;
+    const chip = document.getElementById('system-status-chip');
+    const scan = this.$scanBtn1 || this.$scanBtn2;
+    const hints = [];
+    const makeBubble = (target, title, hint) => {
+      if (!target) return;
+      const rect = target.getBoundingClientRect();
+      const b = document.createElement('div');
+      b.className = 'help-bubble';
+      b.style.top = `${window.scrollY + rect.top - 56}px`;
+      b.style.left = `${window.scrollX + rect.left}px`;
+      b.innerHTML = `<div class="title">${title}</div><div class="hint">${hint}</div><div class="help-arrow"></div>`;
+      document.body.appendChild(b);
+      hints.push(b);
+    };
+    makeBubble(chip, 'System Health', 'Live status of agents, uptime and time.');
+    makeBubble(scan, 'Scan for Funding', 'Click to scan EU portals for AI/tech calls.');
+    const dismiss = () => { hints.forEach(h => h.remove()); localStorage.setItem(key, '1'); };
+    setTimeout(dismiss, 6000);
+    document.addEventListener('click', dismiss, { once: true });
+  }
+
   async updateStatus() {
     const s = await this.api('/api/status');
     // Agents
@@ -162,6 +233,11 @@
     document.getElementById('progress-text').textContent = `${s.eufmProject.progress}% Complete`;
     document.getElementById('next-milestone').textContent = `Next: ${s.eufmProject.nextMilestone}`;
     document.getElementById('funding-count').textContent = s.eufmProject.fundingOpportunities;
+    // counts for search context
+    this.counts.opportunities = s.eufmProject.fundingOpportunities;
+    document.getElementById('global-search').placeholder = `Search ${this.counts.opportunities} opportunities, ${s.system.memory.notes} notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator`;
+    this.counts.notes = s.system.memory.notes;
+    this.counts.tools = 8;
     // Activity from alerts
     this.renderActivity(s.alerts, 'activity-list');
   }
@@ -184,6 +260,7 @@
         <div class="tool-status status-${t.status}">${t.status}</div>
       </div>
     `).join('');
+    this.counts.tools = Array.isArray(tools) ? tools.length : 0;
   }
 
   async updateSubscriptions() {
@@ -219,6 +296,13 @@
     renderOpps(document.getElementById('opportunity-list'));
     const el2 = document.getElementById('opportunity-list-2');
     if (el2) renderOpps(el2);
+    // Update last scan helper and smart notifications
+    const last = opps.reduce((acc, o) => Math.max(acc, new Date(o.scannedAt || 0).getTime()), 0);
+    if (this.$scanHelp) this.$scanHelp.textContent = last ? `Last scan: ${new Date(last).toLocaleString()} • Found ${opps.length} opportunities` : 'Last scan: —';
+    const closingSoon = opps.filter(o => o.status === 'closing_soon').slice(0, 1);
+    if (closingSoon.length) {
+      this.showToast(`🚨 Deadline approaching: ${closingSoon[0].title} closes soon`, 'info');
+    }
   }
 
   async updateAlerts() {
@@ -237,13 +321,27 @@
   }
 
   async scanFunding() {
-    this.addChatMessage('system', 'Starting EU funding opportunity scan...');
+    if (this.state.scanning) return;
+    this.state.scanning = true;
+    this.addChatMessage('system', 'Scanning EU portals…');
+    this.showToast('Scanning EU portals for opportunities…', 'info');
+    const btns = [this.$scanBtn1, this.$scanBtn2];
+    btns.forEach(b => this.setLoadingBtn(b, true));
+    const progressHost = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+    this.setInlineProgress(progressHost, 5, 'Contacting sources…');
     try {
-      await this.api('/api/scan-funding', { method: 'POST' });
-      this.addChatMessage('system', 'Scan complete. Updating opportunities...');
+      const res = await this.api('/api/scan-funding', { method: 'POST' });
+      this.addChatMessage('system', '✅ Scan complete - updating opportunities…');
+      this.showToast(`✅ ${res?.message || 'Scan complete'}${res?.found ? ` • ${res.found} opportunities` : ''}`, 'success');
       await this.updateOpportunities();
     } catch (e) {
       this.addChatMessage('system', 'Funding scan failed. Check logs.');
+      this.showToast('Funding scan failed', 'error');
+    }
+    finally {
+      btns.forEach(b => this.setLoadingBtn(b, false));
+      this.state.scanning = false;
+      if (progressHost) progressHost.remove();
     }
   }
 
@@ -253,15 +351,24 @@
     const task = document.getElementById('task-input').value.trim();
     if (!task) return;
     this.addChatMessage('user', `${dryRun ? 'Dry Run' : 'Execute'}: ${task}`);
+    this.showToast(`${dryRun ? 'Analyzing' : 'Executing'} task…`, 'info');
+    const execBtn = document.getElementById('submit-task-btn');
+    const dryBtn = document.getElementById('submit-task-dry-btn');
+    [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, true));
     try {
       await this.api('/api/execute', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ task, dryRun }) });
       this.addChatMessage('system', dryRun ? 'Task analyzed successfully.' : 'Task completed successfully.');
+      this.showToast(dryRun ? '✅ Analysis complete' : '✅ Task completed', 'success');
       document.getElementById('task-modal').classList.remove('open');
       document.getElementById('task-input').value = '';
       await this.refresh();
     } catch (e) {
       this.addChatMessage('system', 'Task execution failed.');
+      this.showToast('Task execution failed', 'error');
     }
+    finally {
+      [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, false));
+    }
   }
 
   addChatMessage(type, message) {
@@ -292,15 +399,31 @@
   }
 
   async search(q) {
-    if (!q || q.trim().length < 2) { this.$searchPanel.hidden = true; return; }
+    if (!q || q.trim().length < 2) {
+      // Suggestions
+      this.$searchPanel.hidden = false;
+      this.$searchResults.innerHTML = `
+        <div class="search-item">
+          <div class="type">Suggestions</div>
+          <div class="title">Searching ${this.counts.opportunities} opportunities, ${this.counts.notes} notes, ${this.counts.tools} tools</div>
+          <div class="snippet">Try: <code>AI funding</code>, <code>Horizon Europe</code>, <code>EIC Accelerator</code></div>
+        </div>
+      `;
+      return;
+    }
     try {
       const results = await this.api(`/api/search?q=${encodeURIComponent(q)}`);
       this.$searchPanel.hidden = false;
+      const hi = (text) => {
+        if (!text) return '';
+        const re = new RegExp(`(${q.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&')})`, 'ig');
+        return String(text).replace(re, '<mark>$1</mark>');
+      };
       this.$searchResults.innerHTML = results.map(r => `
         <div class="search-item">
           <div class="type">${r.type}</div>
-          <div class="title">${r.title}</div>
-          <div class="snippet">${r.snippet || ''}</div>
+          <div class="title">${hi(r.title)}</div>
+          <div class="snippet">${hi(r.snippet || '')}</div>
         </div>
       `).join('');
     } catch {
@@ -327,6 +450,12 @@
           const msg = JSON.parse(evt.data);
           if (msg.type === 'status_update') { this.applyStatus(msg.data); }
           if (msg.type === 'funding_opportunities') { this.updateOpportunities(); }
+          if (msg.type === 'activity') { this.addChatMessage('system', msg.message); }
+          if (msg.type === 'progress' && this.state.scanning) {
+            const host = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+            if (msg.percent != null) this.setInlineProgress(host, msg.percent, msg.message || '');
+          }
+          if (msg.type === 'notify') { this.showToast(msg.message, msg.level || 'info'); }
         } catch {}
       };
     } catch {}
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..ee751a887da82d618e95d78dfa323c4364e599ef
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>
@@ -222,7 +223,7 @@
               <span class="material-symbols-rounded">work</span>
               <h3>Live Opportunities</h3>
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
@@ -279,10 +280,11 @@
             </label>
           </div>
           <div class="row">
-            <button class="btn" id="export-json-btn">
+            <button class="btn" id="export-json-btn" title="Download a JSON snapshot of system status">
               <span class="material-symbols-rounded">download</span>
               <span>Export status JSON</span>
             </button>
+            <small class="meta">Includes agents, costs, memory, alerts and project status</small>
           </div>
         </div>
       </section>
@@ -307,6 +309,9 @@
     <div class="search-results" id="search-results" role="listbox" aria-label="Search results"></div>
   </div>
 
+  <!-- Toasts -->
+  <div id="toast-container" class="toast-container" aria-live="polite"></div>
+
   <script src="dashboard.js"></script>
 </body>
 </html>

[2025-09-05T17:28:28] apply_patch auto_approved=true:
M /Users/panda/Desktop/EUFM/src/dashboard/fundingOpportunityScanner.ts
@@ -30,3 +30,3 @@
 
-  async scanAll(): Promise<FundingOpportunity[]> {
+  async scanAll(progressCb?: (evt: { stage: string; message: string; percent?: number }) => void): Promise<FundingOpportunity[]> {
     const sources = [
@@ -40,7 +40,11 @@
     const opportunities: FundingOpportunity[] = [];
-    
-    for (const source of sources) {
+    const total = sources.length;
+    progressCb?.({ stage: 'start', message: 'Starting funding scan…', percent: 2 });
+    for (let i = 0; i < sources.length; i++) {
+      const source = sources[i];
       try {
+        progressCb?.({ stage: 'source', message: `Scanning ${source}…`, percent: Math.round(((i) / total) * 100) });
         const sourceOpportunities = await this.scanSource(source);
         opportunities.push(...sourceOpportunities);
+        progressCb?.({ stage: 'parsed', message: `Analyzing ${source} results…`, percent: Math.round(((i + 0.6) / total) * 100) });
       } catch (error) {
@@ -52,4 +56,7 @@
     await this.saveOpportunities(opportunities);
+    progressCb?.({ stage: 'save', message: 'Saving results…', percent: 96 });
     
-    return opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    const sorted = opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    progressCb?.({ stage: 'done', message: `Scan complete — ${sorted.length} opportunities found`, percent: 100 });
+    return sorted;
   }
[2025-09-05T17:28:29] apply_patch(auto_approved=true) exited 0 in 542ms:
Success. Updated the following files:
M src/dashboard/fundingOpportunityScanner.ts
[2025-09-05T17:28:29] turn diff:
diff --git a/src/dashboard/fundingOpportunityScanner.ts b/src/dashboard/fundingOpportunityScanner.ts
index ec1230aa52b2a4f6355a228632f4cbaed0a3799b..c24b9505f3661908fdcbfcbb0b517e8fb43719df
--- a/src/dashboard/fundingOpportunityScanner.ts
+++ b/src/dashboard/fundingOpportunityScanner.ts
@@ -28,7 +28,7 @@
     await fs.mkdir(this.baseDir, { recursive: true }).catch(() => {});
   }
 
-  async scanAll(): Promise<FundingOpportunity[]> {
+  async scanAll(progressCb?: (evt: { stage: string; message: string; percent?: number }) => void): Promise<FundingOpportunity[]> {
     const sources = [
       'Horizon Europe',
       'Digital Europe Programme', 
@@ -38,11 +38,15 @@
     ];
 
     const opportunities: FundingOpportunity[] = [];
-    
-    for (const source of sources) {
+    const total = sources.length;
+    progressCb?.({ stage: 'start', message: 'Starting funding scan…', percent: 2 });
+    for (let i = 0; i < sources.length; i++) {
+      const source = sources[i];
       try {
+        progressCb?.({ stage: 'source', message: `Scanning ${source}…`, percent: Math.round(((i) / total) * 100) });
         const sourceOpportunities = await this.scanSource(source);
         opportunities.push(...sourceOpportunities);
+        progressCb?.({ stage: 'parsed', message: `Analyzing ${source} results…`, percent: Math.round(((i + 0.6) / total) * 100) });
       } catch (error) {
         console.warn(`Failed to scan ${source}:`, error);
       }
@@ -50,8 +54,11 @@
 
     // Save results
     await this.saveOpportunities(opportunities);
+    progressCb?.({ stage: 'save', message: 'Saving results…', percent: 96 });
     
-    return opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    const sorted = opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    progressCb?.({ stage: 'done', message: `Scan complete — ${sorted.length} opportunities found`, percent: 100 });
+    return sorted;
   }
 
   private async scanSource(program: string): Promise<FundingOpportunity[]> {
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/dashboard.js b/src/dashboard/web/dashboard.js
index cd16d5697fb3c112440336e88cb1eb4ec5d3ffa1..b421d3d91ed7d5cdd241efb9579e90f4975060a4
--- a/src/dashboard/web/dashboard.js
+++ b/src/dashboard/web/dashboard.js
@@ -6,6 +6,8 @@
     this.initTime = new Date();
     this.theme = localStorage.getItem('eufm-theme') || 'light';
     this.sections = ['overview', 'funding', 'activity', 'analytics', 'settings'];
+    this.counts = { opportunities: 0, notes: 0, tools: 0 };
+    this.state = { scanning: false };
     this.init();
   }
 
@@ -21,6 +23,7 @@
     setInterval(() => this.updateTimestamp(), 1000);
     setInterval(() => this.updateUptime(), 1000);
     setInterval(() => this.refresh(), 30000);
+    this.onboardIfFirstRun();
   }
 
   cacheEls() {
@@ -31,6 +34,10 @@
     this.$globalSearch = document.getElementById('global-search');
     this.$searchPanel = document.getElementById('search-panel');
     this.$searchResults = document.getElementById('search-results');
+    this.$toast = document.getElementById('toast-container');
+    this.$scanBtn1 = document.getElementById('scan-funding-btn');
+    this.$scanBtn2 = document.getElementById('scan-funding-btn-2');
+    this.$scanHelp = document.getElementById('scan-help');
   }
 
   bindUI() {
@@ -142,6 +149,70 @@
     return res.text();
   }
 
+  // --- UI feedback helpers ---
+  showToast(message, type = 'info') {
+    if (!this.$toast) return;
+    const div = document.createElement('div');
+    div.className = `toast ${type}`;
+    div.innerHTML = `
+      <span class="material-symbols-rounded">${type === 'success' ? 'check_circle' : type === 'error' ? 'error' : 'info'}</span>
+      <div>${message}</div>
+    `;
+    this.$toast.appendChild(div);
+    setTimeout(() => div.remove(), 4000);
+  }
+
+  setLoadingBtn(btn, loading = true) {
+    if (!btn) return;
+    btn.classList.toggle('loading', !!loading);
+    btn.setAttribute('aria-busy', loading ? 'true' : 'false');
+    btn.disabled = !!loading;
+  }
+
+  insertInlineProgress(targetEl) {
+    if (!targetEl) return null;
+    let wrap = targetEl.parentElement?.querySelector('.progress-inline');
+    if (!wrap) {
+      wrap = document.createElement('div');
+      wrap.className = 'progress-inline';
+      wrap.innerHTML = `<div class="progress-bar"><div class="fill"></div></div><span class="label">Preparing…</span>`;
+      targetEl.parentElement?.appendChild(wrap);
+    }
+    return wrap;
+  }
+
+  setInlineProgress(wrap, percent, label) {
+    if (!wrap) return;
+    const fill = wrap.querySelector('.fill');
+    const lab = wrap.querySelector('.label');
+    if (fill) fill.style.width = `${Math.max(0, Math.min(100, percent))}%`;
+    if (lab && label) lab.textContent = label;
+  }
+
+  onboardIfFirstRun() {
+    const key = 'eufm-onboarded';
+    if (localStorage.getItem(key)) return;
+    const chip = document.getElementById('system-status-chip');
+    const scan = this.$scanBtn1 || this.$scanBtn2;
+    const hints = [];
+    const makeBubble = (target, title, hint) => {
+      if (!target) return;
+      const rect = target.getBoundingClientRect();
+      const b = document.createElement('div');
+      b.className = 'help-bubble';
+      b.style.top = `${window.scrollY + rect.top - 56}px`;
+      b.style.left = `${window.scrollX + rect.left}px`;
+      b.innerHTML = `<div class="title">${title}</div><div class="hint">${hint}</div><div class="help-arrow"></div>`;
+      document.body.appendChild(b);
+      hints.push(b);
+    };
+    makeBubble(chip, 'System Health', 'Live status of agents, uptime and time.');
+    makeBubble(scan, 'Scan for Funding', 'Click to scan EU portals for AI/tech calls.');
+    const dismiss = () => { hints.forEach(h => h.remove()); localStorage.setItem(key, '1'); };
+    setTimeout(dismiss, 6000);
+    document.addEventListener('click', dismiss, { once: true });
+  }
+
   async updateStatus() {
     const s = await this.api('/api/status');
     // Agents
@@ -162,6 +233,11 @@
     document.getElementById('progress-text').textContent = `${s.eufmProject.progress}% Complete`;
     document.getElementById('next-milestone').textContent = `Next: ${s.eufmProject.nextMilestone}`;
     document.getElementById('funding-count').textContent = s.eufmProject.fundingOpportunities;
+    // counts for search context
+    this.counts.opportunities = s.eufmProject.fundingOpportunities;
+    document.getElementById('global-search').placeholder = `Search ${this.counts.opportunities} opportunities, ${s.system.memory.notes} notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator`;
+    this.counts.notes = s.system.memory.notes;
+    this.counts.tools = 8;
     // Activity from alerts
     this.renderActivity(s.alerts, 'activity-list');
   }
@@ -184,6 +260,7 @@
         <div class="tool-status status-${t.status}">${t.status}</div>
       </div>
     `).join('');
+    this.counts.tools = Array.isArray(tools) ? tools.length : 0;
   }
 
   async updateSubscriptions() {
@@ -219,6 +296,13 @@
     renderOpps(document.getElementById('opportunity-list'));
     const el2 = document.getElementById('opportunity-list-2');
     if (el2) renderOpps(el2);
+    // Update last scan helper and smart notifications
+    const last = opps.reduce((acc, o) => Math.max(acc, new Date(o.scannedAt || 0).getTime()), 0);
+    if (this.$scanHelp) this.$scanHelp.textContent = last ? `Last scan: ${new Date(last).toLocaleString()} • Found ${opps.length} opportunities` : 'Last scan: —';
+    const closingSoon = opps.filter(o => o.status === 'closing_soon').slice(0, 1);
+    if (closingSoon.length) {
+      this.showToast(`🚨 Deadline approaching: ${closingSoon[0].title} closes soon`, 'info');
+    }
   }
 
   async updateAlerts() {
@@ -237,13 +321,27 @@
   }
 
   async scanFunding() {
-    this.addChatMessage('system', 'Starting EU funding opportunity scan...');
+    if (this.state.scanning) return;
+    this.state.scanning = true;
+    this.addChatMessage('system', 'Scanning EU portals…');
+    this.showToast('Scanning EU portals for opportunities…', 'info');
+    const btns = [this.$scanBtn1, this.$scanBtn2];
+    btns.forEach(b => this.setLoadingBtn(b, true));
+    const progressHost = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+    this.setInlineProgress(progressHost, 5, 'Contacting sources…');
     try {
-      await this.api('/api/scan-funding', { method: 'POST' });
-      this.addChatMessage('system', 'Scan complete. Updating opportunities...');
+      const res = await this.api('/api/scan-funding', { method: 'POST' });
+      this.addChatMessage('system', '✅ Scan complete - updating opportunities…');
+      this.showToast(`✅ ${res?.message || 'Scan complete'}${res?.found ? ` • ${res.found} opportunities` : ''}`, 'success');
       await this.updateOpportunities();
     } catch (e) {
       this.addChatMessage('system', 'Funding scan failed. Check logs.');
+      this.showToast('Funding scan failed', 'error');
+    }
+    finally {
+      btns.forEach(b => this.setLoadingBtn(b, false));
+      this.state.scanning = false;
+      if (progressHost) progressHost.remove();
     }
   }
 
@@ -253,15 +351,24 @@
     const task = document.getElementById('task-input').value.trim();
     if (!task) return;
     this.addChatMessage('user', `${dryRun ? 'Dry Run' : 'Execute'}: ${task}`);
+    this.showToast(`${dryRun ? 'Analyzing' : 'Executing'} task…`, 'info');
+    const execBtn = document.getElementById('submit-task-btn');
+    const dryBtn = document.getElementById('submit-task-dry-btn');
+    [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, true));
     try {
       await this.api('/api/execute', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ task, dryRun }) });
       this.addChatMessage('system', dryRun ? 'Task analyzed successfully.' : 'Task completed successfully.');
+      this.showToast(dryRun ? '✅ Analysis complete' : '✅ Task completed', 'success');
       document.getElementById('task-modal').classList.remove('open');
       document.getElementById('task-input').value = '';
       await this.refresh();
     } catch (e) {
       this.addChatMessage('system', 'Task execution failed.');
+      this.showToast('Task execution failed', 'error');
     }
+    finally {
+      [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, false));
+    }
   }
 
   addChatMessage(type, message) {
@@ -292,15 +399,31 @@
   }
 
   async search(q) {
-    if (!q || q.trim().length < 2) { this.$searchPanel.hidden = true; return; }
+    if (!q || q.trim().length < 2) {
+      // Suggestions
+      this.$searchPanel.hidden = false;
+      this.$searchResults.innerHTML = `
+        <div class="search-item">
+          <div class="type">Suggestions</div>
+          <div class="title">Searching ${this.counts.opportunities} opportunities, ${this.counts.notes} notes, ${this.counts.tools} tools</div>
+          <div class="snippet">Try: <code>AI funding</code>, <code>Horizon Europe</code>, <code>EIC Accelerator</code></div>
+        </div>
+      `;
+      return;
+    }
     try {
       const results = await this.api(`/api/search?q=${encodeURIComponent(q)}`);
       this.$searchPanel.hidden = false;
+      const hi = (text) => {
+        if (!text) return '';
+        const re = new RegExp(`(${q.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&')})`, 'ig');
+        return String(text).replace(re, '<mark>$1</mark>');
+      };
       this.$searchResults.innerHTML = results.map(r => `
         <div class="search-item">
           <div class="type">${r.type}</div>
-          <div class="title">${r.title}</div>
-          <div class="snippet">${r.snippet || ''}</div>
+          <div class="title">${hi(r.title)}</div>
+          <div class="snippet">${hi(r.snippet || '')}</div>
         </div>
       `).join('');
     } catch {
@@ -327,6 +450,12 @@
           const msg = JSON.parse(evt.data);
           if (msg.type === 'status_update') { this.applyStatus(msg.data); }
           if (msg.type === 'funding_opportunities') { this.updateOpportunities(); }
+          if (msg.type === 'activity') { this.addChatMessage('system', msg.message); }
+          if (msg.type === 'progress' && this.state.scanning) {
+            const host = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+            if (msg.percent != null) this.setInlineProgress(host, msg.percent, msg.message || '');
+          }
+          if (msg.type === 'notify') { this.showToast(msg.message, msg.level || 'info'); }
         } catch {}
       };
     } catch {}
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..ee751a887da82d618e95d78dfa323c4364e599ef
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>
@@ -222,7 +223,7 @@
               <span class="material-symbols-rounded">work</span>
               <h3>Live Opportunities</h3>
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
@@ -279,10 +280,11 @@
             </label>
           </div>
           <div class="row">
-            <button class="btn" id="export-json-btn">
+            <button class="btn" id="export-json-btn" title="Download a JSON snapshot of system status">
               <span class="material-symbols-rounded">download</span>
               <span>Export status JSON</span>
             </button>
+            <small class="meta">Includes agents, costs, memory, alerts and project status</small>
           </div>
         </div>
       </section>
@@ -307,6 +309,9 @@
     <div class="search-results" id="search-results" role="listbox" aria-label="Search results"></div>
   </div>
 
+  <!-- Toasts -->
+  <div id="toast-container" class="toast-container" aria-live="polite"></div>
+
   <script src="dashboard.js"></script>
 </body>
 </html>

[2025-09-05T17:28:29] tokens used: 1442
[2025-09-05T17:28:29] turn diff:
diff --git a/src/dashboard/fundingOpportunityScanner.ts b/src/dashboard/fundingOpportunityScanner.ts
index ec1230aa52b2a4f6355a228632f4cbaed0a3799b..c24b9505f3661908fdcbfcbb0b517e8fb43719df
--- a/src/dashboard/fundingOpportunityScanner.ts
+++ b/src/dashboard/fundingOpportunityScanner.ts
@@ -28,7 +28,7 @@
     await fs.mkdir(this.baseDir, { recursive: true }).catch(() => {});
   }
 
-  async scanAll(): Promise<FundingOpportunity[]> {
+  async scanAll(progressCb?: (evt: { stage: string; message: string; percent?: number }) => void): Promise<FundingOpportunity[]> {
     const sources = [
       'Horizon Europe',
       'Digital Europe Programme', 
@@ -38,11 +38,15 @@
     ];
 
     const opportunities: FundingOpportunity[] = [];
-    
-    for (const source of sources) {
+    const total = sources.length;
+    progressCb?.({ stage: 'start', message: 'Starting funding scan…', percent: 2 });
+    for (let i = 0; i < sources.length; i++) {
+      const source = sources[i];
       try {
+        progressCb?.({ stage: 'source', message: `Scanning ${source}…`, percent: Math.round(((i) / total) * 100) });
         const sourceOpportunities = await this.scanSource(source);
         opportunities.push(...sourceOpportunities);
+        progressCb?.({ stage: 'parsed', message: `Analyzing ${source} results…`, percent: Math.round(((i + 0.6) / total) * 100) });
       } catch (error) {
         console.warn(`Failed to scan ${source}:`, error);
       }
@@ -50,8 +54,11 @@
 
     // Save results
     await this.saveOpportunities(opportunities);
+    progressCb?.({ stage: 'save', message: 'Saving results…', percent: 96 });
     
-    return opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    const sorted = opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    progressCb?.({ stage: 'done', message: `Scan complete — ${sorted.length} opportunities found`, percent: 100 });
+    return sorted;
   }
 
   private async scanSource(program: string): Promise<FundingOpportunity[]> {
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/dashboard.js b/src/dashboard/web/dashboard.js
index cd16d5697fb3c112440336e88cb1eb4ec5d3ffa1..b421d3d91ed7d5cdd241efb9579e90f4975060a4
--- a/src/dashboard/web/dashboard.js
+++ b/src/dashboard/web/dashboard.js
@@ -6,6 +6,8 @@
     this.initTime = new Date();
     this.theme = localStorage.getItem('eufm-theme') || 'light';
     this.sections = ['overview', 'funding', 'activity', 'analytics', 'settings'];
+    this.counts = { opportunities: 0, notes: 0, tools: 0 };
+    this.state = { scanning: false };
     this.init();
   }
 
@@ -21,6 +23,7 @@
     setInterval(() => this.updateTimestamp(), 1000);
     setInterval(() => this.updateUptime(), 1000);
     setInterval(() => this.refresh(), 30000);
+    this.onboardIfFirstRun();
   }
 
   cacheEls() {
@@ -31,6 +34,10 @@
     this.$globalSearch = document.getElementById('global-search');
     this.$searchPanel = document.getElementById('search-panel');
     this.$searchResults = document.getElementById('search-results');
+    this.$toast = document.getElementById('toast-container');
+    this.$scanBtn1 = document.getElementById('scan-funding-btn');
+    this.$scanBtn2 = document.getElementById('scan-funding-btn-2');
+    this.$scanHelp = document.getElementById('scan-help');
   }
 
   bindUI() {
@@ -142,6 +149,70 @@
     return res.text();
   }
 
+  // --- UI feedback helpers ---
+  showToast(message, type = 'info') {
+    if (!this.$toast) return;
+    const div = document.createElement('div');
+    div.className = `toast ${type}`;
+    div.innerHTML = `
+      <span class="material-symbols-rounded">${type === 'success' ? 'check_circle' : type === 'error' ? 'error' : 'info'}</span>
+      <div>${message}</div>
+    `;
+    this.$toast.appendChild(div);
+    setTimeout(() => div.remove(), 4000);
+  }
+
+  setLoadingBtn(btn, loading = true) {
+    if (!btn) return;
+    btn.classList.toggle('loading', !!loading);
+    btn.setAttribute('aria-busy', loading ? 'true' : 'false');
+    btn.disabled = !!loading;
+  }
+
+  insertInlineProgress(targetEl) {
+    if (!targetEl) return null;
+    let wrap = targetEl.parentElement?.querySelector('.progress-inline');
+    if (!wrap) {
+      wrap = document.createElement('div');
+      wrap.className = 'progress-inline';
+      wrap.innerHTML = `<div class="progress-bar"><div class="fill"></div></div><span class="label">Preparing…</span>`;
+      targetEl.parentElement?.appendChild(wrap);
+    }
+    return wrap;
+  }
+
+  setInlineProgress(wrap, percent, label) {
+    if (!wrap) return;
+    const fill = wrap.querySelector('.fill');
+    const lab = wrap.querySelector('.label');
+    if (fill) fill.style.width = `${Math.max(0, Math.min(100, percent))}%`;
+    if (lab && label) lab.textContent = label;
+  }
+
+  onboardIfFirstRun() {
+    const key = 'eufm-onboarded';
+    if (localStorage.getItem(key)) return;
+    const chip = document.getElementById('system-status-chip');
+    const scan = this.$scanBtn1 || this.$scanBtn2;
+    const hints = [];
+    const makeBubble = (target, title, hint) => {
+      if (!target) return;
+      const rect = target.getBoundingClientRect();
+      const b = document.createElement('div');
+      b.className = 'help-bubble';
+      b.style.top = `${window.scrollY + rect.top - 56}px`;
+      b.style.left = `${window.scrollX + rect.left}px`;
+      b.innerHTML = `<div class="title">${title}</div><div class="hint">${hint}</div><div class="help-arrow"></div>`;
+      document.body.appendChild(b);
+      hints.push(b);
+    };
+    makeBubble(chip, 'System Health', 'Live status of agents, uptime and time.');
+    makeBubble(scan, 'Scan for Funding', 'Click to scan EU portals for AI/tech calls.');
+    const dismiss = () => { hints.forEach(h => h.remove()); localStorage.setItem(key, '1'); };
+    setTimeout(dismiss, 6000);
+    document.addEventListener('click', dismiss, { once: true });
+  }
+
   async updateStatus() {
     const s = await this.api('/api/status');
     // Agents
@@ -162,6 +233,11 @@
     document.getElementById('progress-text').textContent = `${s.eufmProject.progress}% Complete`;
     document.getElementById('next-milestone').textContent = `Next: ${s.eufmProject.nextMilestone}`;
     document.getElementById('funding-count').textContent = s.eufmProject.fundingOpportunities;
+    // counts for search context
+    this.counts.opportunities = s.eufmProject.fundingOpportunities;
+    document.getElementById('global-search').placeholder = `Search ${this.counts.opportunities} opportunities, ${s.system.memory.notes} notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator`;
+    this.counts.notes = s.system.memory.notes;
+    this.counts.tools = 8;
     // Activity from alerts
     this.renderActivity(s.alerts, 'activity-list');
   }
@@ -184,6 +260,7 @@
         <div class="tool-status status-${t.status}">${t.status}</div>
       </div>
     `).join('');
+    this.counts.tools = Array.isArray(tools) ? tools.length : 0;
   }
 
   async updateSubscriptions() {
@@ -219,6 +296,13 @@
     renderOpps(document.getElementById('opportunity-list'));
     const el2 = document.getElementById('opportunity-list-2');
     if (el2) renderOpps(el2);
+    // Update last scan helper and smart notifications
+    const last = opps.reduce((acc, o) => Math.max(acc, new Date(o.scannedAt || 0).getTime()), 0);
+    if (this.$scanHelp) this.$scanHelp.textContent = last ? `Last scan: ${new Date(last).toLocaleString()} • Found ${opps.length} opportunities` : 'Last scan: —';
+    const closingSoon = opps.filter(o => o.status === 'closing_soon').slice(0, 1);
+    if (closingSoon.length) {
+      this.showToast(`🚨 Deadline approaching: ${closingSoon[0].title} closes soon`, 'info');
+    }
   }
 
   async updateAlerts() {
@@ -237,13 +321,27 @@
   }
 
   async scanFunding() {
-    this.addChatMessage('system', 'Starting EU funding opportunity scan...');
+    if (this.state.scanning) return;
+    this.state.scanning = true;
+    this.addChatMessage('system', 'Scanning EU portals…');
+    this.showToast('Scanning EU portals for opportunities…', 'info');
+    const btns = [this.$scanBtn1, this.$scanBtn2];
+    btns.forEach(b => this.setLoadingBtn(b, true));
+    const progressHost = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+    this.setInlineProgress(progressHost, 5, 'Contacting sources…');
     try {
-      await this.api('/api/scan-funding', { method: 'POST' });
-      this.addChatMessage('system', 'Scan complete. Updating opportunities...');
+      const res = await this.api('/api/scan-funding', { method: 'POST' });
+      this.addChatMessage('system', '✅ Scan complete - updating opportunities…');
+      this.showToast(`✅ ${res?.message || 'Scan complete'}${res?.found ? ` • ${res.found} opportunities` : ''}`, 'success');
       await this.updateOpportunities();
     } catch (e) {
       this.addChatMessage('system', 'Funding scan failed. Check logs.');
+      this.showToast('Funding scan failed', 'error');
+    }
+    finally {
+      btns.forEach(b => this.setLoadingBtn(b, false));
+      this.state.scanning = false;
+      if (progressHost) progressHost.remove();
     }
   }
 
@@ -253,15 +351,24 @@
     const task = document.getElementById('task-input').value.trim();
     if (!task) return;
     this.addChatMessage('user', `${dryRun ? 'Dry Run' : 'Execute'}: ${task}`);
+    this.showToast(`${dryRun ? 'Analyzing' : 'Executing'} task…`, 'info');
+    const execBtn = document.getElementById('submit-task-btn');
+    const dryBtn = document.getElementById('submit-task-dry-btn');
+    [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, true));
     try {
       await this.api('/api/execute', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ task, dryRun }) });
       this.addChatMessage('system', dryRun ? 'Task analyzed successfully.' : 'Task completed successfully.');
+      this.showToast(dryRun ? '✅ Analysis complete' : '✅ Task completed', 'success');
       document.getElementById('task-modal').classList.remove('open');
       document.getElementById('task-input').value = '';
       await this.refresh();
     } catch (e) {
       this.addChatMessage('system', 'Task execution failed.');
+      this.showToast('Task execution failed', 'error');
     }
+    finally {
+      [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, false));
+    }
   }
 
   addChatMessage(type, message) {
@@ -292,15 +399,31 @@
   }
 
   async search(q) {
-    if (!q || q.trim().length < 2) { this.$searchPanel.hidden = true; return; }
+    if (!q || q.trim().length < 2) {
+      // Suggestions
+      this.$searchPanel.hidden = false;
+      this.$searchResults.innerHTML = `
+        <div class="search-item">
+          <div class="type">Suggestions</div>
+          <div class="title">Searching ${this.counts.opportunities} opportunities, ${this.counts.notes} notes, ${this.counts.tools} tools</div>
+          <div class="snippet">Try: <code>AI funding</code>, <code>Horizon Europe</code>, <code>EIC Accelerator</code></div>
+        </div>
+      `;
+      return;
+    }
     try {
       const results = await this.api(`/api/search?q=${encodeURIComponent(q)}`);
       this.$searchPanel.hidden = false;
+      const hi = (text) => {
+        if (!text) return '';
+        const re = new RegExp(`(${q.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&')})`, 'ig');
+        return String(text).replace(re, '<mark>$1</mark>');
+      };
       this.$searchResults.innerHTML = results.map(r => `
         <div class="search-item">
           <div class="type">${r.type}</div>
-          <div class="title">${r.title}</div>
-          <div class="snippet">${r.snippet || ''}</div>
+          <div class="title">${hi(r.title)}</div>
+          <div class="snippet">${hi(r.snippet || '')}</div>
         </div>
       `).join('');
     } catch {
@@ -327,6 +450,12 @@
           const msg = JSON.parse(evt.data);
           if (msg.type === 'status_update') { this.applyStatus(msg.data); }
           if (msg.type === 'funding_opportunities') { this.updateOpportunities(); }
+          if (msg.type === 'activity') { this.addChatMessage('system', msg.message); }
+          if (msg.type === 'progress' && this.state.scanning) {
+            const host = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+            if (msg.percent != null) this.setInlineProgress(host, msg.percent, msg.message || '');
+          }
+          if (msg.type === 'notify') { this.showToast(msg.message, msg.level || 'info'); }
         } catch {}
       };
     } catch {}
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..ee751a887da82d618e95d78dfa323c4364e599ef
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>
@@ -222,7 +223,7 @@
               <span class="material-symbols-rounded">work</span>
               <h3>Live Opportunities</h3>
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
@@ -279,10 +280,11 @@
             </label>
           </div>
           <div class="row">
-            <button class="btn" id="export-json-btn">
+            <button class="btn" id="export-json-btn" title="Download a JSON snapshot of system status">
               <span class="material-symbols-rounded">download</span>
               <span>Export status JSON</span>
             </button>
+            <small class="meta">Includes agents, costs, memory, alerts and project status</small>
           </div>
         </div>
       </section>
@@ -307,6 +309,9 @@
     <div class="search-results" id="search-results" role="listbox" aria-label="Search results"></div>
   </div>
 
+  <!-- Toasts -->
+  <div id="toast-container" class="toast-container" aria-live="polite"></div>
+
   <script src="dashboard.js"></script>
 </body>
 </html>


[2025-09-05T17:28:36] thinking

**Updating MissionControl**

Okay, I need to modify MissionControl. First, I'll import EventEmitter and add public events. In the addAlert method, I want to emit an 'alert' event with the level and message. When executing tasks, I'll also emit 'notify' events at the start, completion, and during progress. In the scanFundingOpportunities method, I'll utilize scanner.scanAll with a progress callback that emits 'progress' through events and add an alert before finally returning the results. Time to patch missionControl.ts!
[2025-09-05T17:28:41] apply_patch auto_approved=true:
M /Users/panda/Desktop/EUFM/src/dashboard/missionControl.ts
@@ -1,2 +1,3 @@
 import { promises as fs } from 'fs';
+import { EventEmitter } from 'events';
 import { StrategicOrchestrator } from '../orchestrator/strategicOrchestrator.js';
@@ -30,2 +31,3 @@
   private alerts: MissionControlStatus['alerts'] = [];
+  public events = new EventEmitter();
 
@@ -105,2 +107,3 @@
     });
+    this.events.emit('alert', { level, message });
     
@@ -114,2 +117,3 @@
     await this.addAlert('info', `Starting task: ${taskDescription}`);
+    this.events.emit('progress', { stage: 'task', message: 'Starting task…', percent: 5 });
     
@@ -118,2 +122,3 @@
       await this.addAlert('info', `Task completed successfully: ${result.taskId}`);
+      this.events.emit('notify', { level: 'success', message: 'Task completed successfully' });
       return result;
@@ -121,2 +126,3 @@
       await this.addAlert('error', `Task failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Task execution failed' });
       throw error;
@@ -128,4 +134,5 @@
     try {
-      const opportunities = await this.fundingScanner.scanAll();
+      const opportunities = await this.fundingScanner.scanAll((evt) => this.events.emit('progress', evt));
       await this.addAlert('info', `Found ${opportunities.length} funding opportunities`);
+      this.events.emit('notify', { level: 'success', message: `Scan complete — ${opportunities.length} found` });
       return opportunities;
@@ -133,2 +140,3 @@
       await this.addAlert('error', `Funding scan failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Funding scan failed' });
       throw error;
[2025-09-05T17:28:42] apply_patch(auto_approved=true) exited 0 in 711ms:
Success. Updated the following files:
M src/dashboard/missionControl.ts
[2025-09-05T17:28:42] turn diff:
diff --git a/src/dashboard/fundingOpportunityScanner.ts b/src/dashboard/fundingOpportunityScanner.ts
index ec1230aa52b2a4f6355a228632f4cbaed0a3799b..c24b9505f3661908fdcbfcbb0b517e8fb43719df
--- a/src/dashboard/fundingOpportunityScanner.ts
+++ b/src/dashboard/fundingOpportunityScanner.ts
@@ -28,7 +28,7 @@
     await fs.mkdir(this.baseDir, { recursive: true }).catch(() => {});
   }
 
-  async scanAll(): Promise<FundingOpportunity[]> {
+  async scanAll(progressCb?: (evt: { stage: string; message: string; percent?: number }) => void): Promise<FundingOpportunity[]> {
     const sources = [
       'Horizon Europe',
       'Digital Europe Programme', 
@@ -38,11 +38,15 @@
     ];
 
     const opportunities: FundingOpportunity[] = [];
-    
-    for (const source of sources) {
+    const total = sources.length;
+    progressCb?.({ stage: 'start', message: 'Starting funding scan…', percent: 2 });
+    for (let i = 0; i < sources.length; i++) {
+      const source = sources[i];
       try {
+        progressCb?.({ stage: 'source', message: `Scanning ${source}…`, percent: Math.round(((i) / total) * 100) });
         const sourceOpportunities = await this.scanSource(source);
         opportunities.push(...sourceOpportunities);
+        progressCb?.({ stage: 'parsed', message: `Analyzing ${source} results…`, percent: Math.round(((i + 0.6) / total) * 100) });
       } catch (error) {
         console.warn(`Failed to scan ${source}:`, error);
       }
@@ -50,8 +54,11 @@
 
     // Save results
     await this.saveOpportunities(opportunities);
+    progressCb?.({ stage: 'save', message: 'Saving results…', percent: 96 });
     
-    return opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    const sorted = opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    progressCb?.({ stage: 'done', message: `Scan complete — ${sorted.length} opportunities found`, percent: 100 });
+    return sorted;
   }
 
   private async scanSource(program: string): Promise<FundingOpportunity[]> {
diff --git a/src/dashboard/missionControl.ts b/src/dashboard/missionControl.ts
index b7cc2a083f748dc35dd013fe24edce703ae5e138..0b4b0a946d314e52604c7716e001fa4adbee3b6c
--- a/src/dashboard/missionControl.ts
+++ b/src/dashboard/missionControl.ts
@@ -1,4 +1,5 @@
 import { promises as fs } from 'fs';
+import { EventEmitter } from 'events';
 import { StrategicOrchestrator } from '../orchestrator/strategicOrchestrator.js';
 import { UsageAnalyticsAgent } from '../analytics/usageAnalytics.js';
 import { loadKnowledgeBase, toContext } from '../memory/memoryLoader.js';
@@ -28,6 +29,7 @@
   private monitor = new SystemMonitor();
   private fundingScanner = new FundingOpportunityScanner();
   private alerts: MissionControlStatus['alerts'] = [];
+  public events = new EventEmitter();
 
   async getStatus(): Promise<MissionControlStatus> {
     const timestamp = new Date().toISOString();
@@ -103,6 +105,7 @@
       message,
       timestamp: new Date().toISOString()
     });
+    this.events.emit('alert', { level, message });
     
     // Keep only last 50 alerts
     if (this.alerts.length > 50) {
@@ -112,13 +115,16 @@
 
   async executeTask(taskDescription: string, options: { dryRun?: boolean } = {}) {
     await this.addAlert('info', `Starting task: ${taskDescription}`);
+    this.events.emit('progress', { stage: 'task', message: 'Starting task…', percent: 5 });
     
     try {
       const result = await this.orchestrator.execute(taskDescription, options);
       await this.addAlert('info', `Task completed successfully: ${result.taskId}`);
+      this.events.emit('notify', { level: 'success', message: 'Task completed successfully' });
       return result;
     } catch (error) {
       await this.addAlert('error', `Task failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Task execution failed' });
       throw error;
     }
   }
@@ -126,11 +132,13 @@
   async scanFundingOpportunities() {
     await this.addAlert('info', 'Starting EU funding opportunity scan...');
     try {
-      const opportunities = await this.fundingScanner.scanAll();
+      const opportunities = await this.fundingScanner.scanAll((evt) => this.events.emit('progress', evt));
       await this.addAlert('info', `Found ${opportunities.length} funding opportunities`);
+      this.events.emit('notify', { level: 'success', message: `Scan complete — ${opportunities.length} found` });
       return opportunities;
     } catch (error) {
       await this.addAlert('error', `Funding scan failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Funding scan failed' });
       throw error;
     }
   }
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/dashboard.js b/src/dashboard/web/dashboard.js
index cd16d5697fb3c112440336e88cb1eb4ec5d3ffa1..b421d3d91ed7d5cdd241efb9579e90f4975060a4
--- a/src/dashboard/web/dashboard.js
+++ b/src/dashboard/web/dashboard.js
@@ -6,6 +6,8 @@
     this.initTime = new Date();
     this.theme = localStorage.getItem('eufm-theme') || 'light';
     this.sections = ['overview', 'funding', 'activity', 'analytics', 'settings'];
+    this.counts = { opportunities: 0, notes: 0, tools: 0 };
+    this.state = { scanning: false };
     this.init();
   }
 
@@ -21,6 +23,7 @@
     setInterval(() => this.updateTimestamp(), 1000);
     setInterval(() => this.updateUptime(), 1000);
     setInterval(() => this.refresh(), 30000);
+    this.onboardIfFirstRun();
   }
 
   cacheEls() {
@@ -31,6 +34,10 @@
     this.$globalSearch = document.getElementById('global-search');
     this.$searchPanel = document.getElementById('search-panel');
     this.$searchResults = document.getElementById('search-results');
+    this.$toast = document.getElementById('toast-container');
+    this.$scanBtn1 = document.getElementById('scan-funding-btn');
+    this.$scanBtn2 = document.getElementById('scan-funding-btn-2');
+    this.$scanHelp = document.getElementById('scan-help');
   }
 
   bindUI() {
@@ -142,6 +149,70 @@
     return res.text();
   }
 
+  // --- UI feedback helpers ---
+  showToast(message, type = 'info') {
+    if (!this.$toast) return;
+    const div = document.createElement('div');
+    div.className = `toast ${type}`;
+    div.innerHTML = `
+      <span class="material-symbols-rounded">${type === 'success' ? 'check_circle' : type === 'error' ? 'error' : 'info'}</span>
+      <div>${message}</div>
+    `;
+    this.$toast.appendChild(div);
+    setTimeout(() => div.remove(), 4000);
+  }
+
+  setLoadingBtn(btn, loading = true) {
+    if (!btn) return;
+    btn.classList.toggle('loading', !!loading);
+    btn.setAttribute('aria-busy', loading ? 'true' : 'false');
+    btn.disabled = !!loading;
+  }
+
+  insertInlineProgress(targetEl) {
+    if (!targetEl) return null;
+    let wrap = targetEl.parentElement?.querySelector('.progress-inline');
+    if (!wrap) {
+      wrap = document.createElement('div');
+      wrap.className = 'progress-inline';
+      wrap.innerHTML = `<div class="progress-bar"><div class="fill"></div></div><span class="label">Preparing…</span>`;
+      targetEl.parentElement?.appendChild(wrap);
+    }
+    return wrap;
+  }
+
+  setInlineProgress(wrap, percent, label) {
+    if (!wrap) return;
+    const fill = wrap.querySelector('.fill');
+    const lab = wrap.querySelector('.label');
+    if (fill) fill.style.width = `${Math.max(0, Math.min(100, percent))}%`;
+    if (lab && label) lab.textContent = label;
+  }
+
+  onboardIfFirstRun() {
+    const key = 'eufm-onboarded';
+    if (localStorage.getItem(key)) return;
+    const chip = document.getElementById('system-status-chip');
+    const scan = this.$scanBtn1 || this.$scanBtn2;
+    const hints = [];
+    const makeBubble = (target, title, hint) => {
+      if (!target) return;
+      const rect = target.getBoundingClientRect();
+      const b = document.createElement('div');
+      b.className = 'help-bubble';
+      b.style.top = `${window.scrollY + rect.top - 56}px`;
+      b.style.left = `${window.scrollX + rect.left}px`;
+      b.innerHTML = `<div class="title">${title}</div><div class="hint">${hint}</div><div class="help-arrow"></div>`;
+      document.body.appendChild(b);
+      hints.push(b);
+    };
+    makeBubble(chip, 'System Health', 'Live status of agents, uptime and time.');
+    makeBubble(scan, 'Scan for Funding', 'Click to scan EU portals for AI/tech calls.');
+    const dismiss = () => { hints.forEach(h => h.remove()); localStorage.setItem(key, '1'); };
+    setTimeout(dismiss, 6000);
+    document.addEventListener('click', dismiss, { once: true });
+  }
+
   async updateStatus() {
     const s = await this.api('/api/status');
     // Agents
@@ -162,6 +233,11 @@
     document.getElementById('progress-text').textContent = `${s.eufmProject.progress}% Complete`;
     document.getElementById('next-milestone').textContent = `Next: ${s.eufmProject.nextMilestone}`;
     document.getElementById('funding-count').textContent = s.eufmProject.fundingOpportunities;
+    // counts for search context
+    this.counts.opportunities = s.eufmProject.fundingOpportunities;
+    document.getElementById('global-search').placeholder = `Search ${this.counts.opportunities} opportunities, ${s.system.memory.notes} notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator`;
+    this.counts.notes = s.system.memory.notes;
+    this.counts.tools = 8;
     // Activity from alerts
     this.renderActivity(s.alerts, 'activity-list');
   }
@@ -184,6 +260,7 @@
         <div class="tool-status status-${t.status}">${t.status}</div>
       </div>
     `).join('');
+    this.counts.tools = Array.isArray(tools) ? tools.length : 0;
   }
 
   async updateSubscriptions() {
@@ -219,6 +296,13 @@
     renderOpps(document.getElementById('opportunity-list'));
     const el2 = document.getElementById('opportunity-list-2');
     if (el2) renderOpps(el2);
+    // Update last scan helper and smart notifications
+    const last = opps.reduce((acc, o) => Math.max(acc, new Date(o.scannedAt || 0).getTime()), 0);
+    if (this.$scanHelp) this.$scanHelp.textContent = last ? `Last scan: ${new Date(last).toLocaleString()} • Found ${opps.length} opportunities` : 'Last scan: —';
+    const closingSoon = opps.filter(o => o.status === 'closing_soon').slice(0, 1);
+    if (closingSoon.length) {
+      this.showToast(`🚨 Deadline approaching: ${closingSoon[0].title} closes soon`, 'info');
+    }
   }
 
   async updateAlerts() {
@@ -237,13 +321,27 @@
   }
 
   async scanFunding() {
-    this.addChatMessage('system', 'Starting EU funding opportunity scan...');
+    if (this.state.scanning) return;
+    this.state.scanning = true;
+    this.addChatMessage('system', 'Scanning EU portals…');
+    this.showToast('Scanning EU portals for opportunities…', 'info');
+    const btns = [this.$scanBtn1, this.$scanBtn2];
+    btns.forEach(b => this.setLoadingBtn(b, true));
+    const progressHost = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+    this.setInlineProgress(progressHost, 5, 'Contacting sources…');
     try {
-      await this.api('/api/scan-funding', { method: 'POST' });
-      this.addChatMessage('system', 'Scan complete. Updating opportunities...');
+      const res = await this.api('/api/scan-funding', { method: 'POST' });
+      this.addChatMessage('system', '✅ Scan complete - updating opportunities…');
+      this.showToast(`✅ ${res?.message || 'Scan complete'}${res?.found ? ` • ${res.found} opportunities` : ''}`, 'success');
       await this.updateOpportunities();
     } catch (e) {
       this.addChatMessage('system', 'Funding scan failed. Check logs.');
+      this.showToast('Funding scan failed', 'error');
+    }
+    finally {
+      btns.forEach(b => this.setLoadingBtn(b, false));
+      this.state.scanning = false;
+      if (progressHost) progressHost.remove();
     }
   }
 
@@ -253,15 +351,24 @@
     const task = document.getElementById('task-input').value.trim();
     if (!task) return;
     this.addChatMessage('user', `${dryRun ? 'Dry Run' : 'Execute'}: ${task}`);
+    this.showToast(`${dryRun ? 'Analyzing' : 'Executing'} task…`, 'info');
+    const execBtn = document.getElementById('submit-task-btn');
+    const dryBtn = document.getElementById('submit-task-dry-btn');
+    [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, true));
     try {
       await this.api('/api/execute', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ task, dryRun }) });
       this.addChatMessage('system', dryRun ? 'Task analyzed successfully.' : 'Task completed successfully.');
+      this.showToast(dryRun ? '✅ Analysis complete' : '✅ Task completed', 'success');
       document.getElementById('task-modal').classList.remove('open');
       document.getElementById('task-input').value = '';
       await this.refresh();
     } catch (e) {
       this.addChatMessage('system', 'Task execution failed.');
+      this.showToast('Task execution failed', 'error');
     }
+    finally {
+      [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, false));
+    }
   }
 
   addChatMessage(type, message) {
@@ -292,15 +399,31 @@
   }
 
   async search(q) {
-    if (!q || q.trim().length < 2) { this.$searchPanel.hidden = true; return; }
+    if (!q || q.trim().length < 2) {
+      // Suggestions
+      this.$searchPanel.hidden = false;
+      this.$searchResults.innerHTML = `
+        <div class="search-item">
+          <div class="type">Suggestions</div>
+          <div class="title">Searching ${this.counts.opportunities} opportunities, ${this.counts.notes} notes, ${this.counts.tools} tools</div>
+          <div class="snippet">Try: <code>AI funding</code>, <code>Horizon Europe</code>, <code>EIC Accelerator</code></div>
+        </div>
+      `;
+      return;
+    }
     try {
       const results = await this.api(`/api/search?q=${encodeURIComponent(q)}`);
       this.$searchPanel.hidden = false;
+      const hi = (text) => {
+        if (!text) return '';
+        const re = new RegExp(`(${q.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&')})`, 'ig');
+        return String(text).replace(re, '<mark>$1</mark>');
+      };
       this.$searchResults.innerHTML = results.map(r => `
         <div class="search-item">
           <div class="type">${r.type}</div>
-          <div class="title">${r.title}</div>
-          <div class="snippet">${r.snippet || ''}</div>
+          <div class="title">${hi(r.title)}</div>
+          <div class="snippet">${hi(r.snippet || '')}</div>
         </div>
       `).join('');
     } catch {
@@ -327,6 +450,12 @@
           const msg = JSON.parse(evt.data);
           if (msg.type === 'status_update') { this.applyStatus(msg.data); }
           if (msg.type === 'funding_opportunities') { this.updateOpportunities(); }
+          if (msg.type === 'activity') { this.addChatMessage('system', msg.message); }
+          if (msg.type === 'progress' && this.state.scanning) {
+            const host = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+            if (msg.percent != null) this.setInlineProgress(host, msg.percent, msg.message || '');
+          }
+          if (msg.type === 'notify') { this.showToast(msg.message, msg.level || 'info'); }
         } catch {}
       };
     } catch {}
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..ee751a887da82d618e95d78dfa323c4364e599ef
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>
@@ -222,7 +223,7 @@
               <span class="material-symbols-rounded">work</span>
               <h3>Live Opportunities</h3>
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
@@ -279,10 +280,11 @@
             </label>
           </div>
           <div class="row">
-            <button class="btn" id="export-json-btn">
+            <button class="btn" id="export-json-btn" title="Download a JSON snapshot of system status">
               <span class="material-symbols-rounded">download</span>
               <span>Export status JSON</span>
             </button>
+            <small class="meta">Includes agents, costs, memory, alerts and project status</small>
           </div>
         </div>
       </section>
@@ -307,6 +309,9 @@
     <div class="search-results" id="search-results" role="listbox" aria-label="Search results"></div>
   </div>
 
+  <!-- Toasts -->
+  <div id="toast-container" class="toast-container" aria-live="polite"></div>
+
   <script src="dashboard.js"></script>
 </body>
 </html>

[2025-09-05T17:28:42] tokens used: 1347
[2025-09-05T17:28:42] turn diff:
diff --git a/src/dashboard/fundingOpportunityScanner.ts b/src/dashboard/fundingOpportunityScanner.ts
index ec1230aa52b2a4f6355a228632f4cbaed0a3799b..c24b9505f3661908fdcbfcbb0b517e8fb43719df
--- a/src/dashboard/fundingOpportunityScanner.ts
+++ b/src/dashboard/fundingOpportunityScanner.ts
@@ -28,7 +28,7 @@
     await fs.mkdir(this.baseDir, { recursive: true }).catch(() => {});
   }
 
-  async scanAll(): Promise<FundingOpportunity[]> {
+  async scanAll(progressCb?: (evt: { stage: string; message: string; percent?: number }) => void): Promise<FundingOpportunity[]> {
     const sources = [
       'Horizon Europe',
       'Digital Europe Programme', 
@@ -38,11 +38,15 @@
     ];
 
     const opportunities: FundingOpportunity[] = [];
-    
-    for (const source of sources) {
+    const total = sources.length;
+    progressCb?.({ stage: 'start', message: 'Starting funding scan…', percent: 2 });
+    for (let i = 0; i < sources.length; i++) {
+      const source = sources[i];
       try {
+        progressCb?.({ stage: 'source', message: `Scanning ${source}…`, percent: Math.round(((i) / total) * 100) });
         const sourceOpportunities = await this.scanSource(source);
         opportunities.push(...sourceOpportunities);
+        progressCb?.({ stage: 'parsed', message: `Analyzing ${source} results…`, percent: Math.round(((i + 0.6) / total) * 100) });
       } catch (error) {
         console.warn(`Failed to scan ${source}:`, error);
       }
@@ -50,8 +54,11 @@
 
     // Save results
     await this.saveOpportunities(opportunities);
+    progressCb?.({ stage: 'save', message: 'Saving results…', percent: 96 });
     
-    return opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    const sorted = opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    progressCb?.({ stage: 'done', message: `Scan complete — ${sorted.length} opportunities found`, percent: 100 });
+    return sorted;
   }
 
   private async scanSource(program: string): Promise<FundingOpportunity[]> {
diff --git a/src/dashboard/missionControl.ts b/src/dashboard/missionControl.ts
index b7cc2a083f748dc35dd013fe24edce703ae5e138..0b4b0a946d314e52604c7716e001fa4adbee3b6c
--- a/src/dashboard/missionControl.ts
+++ b/src/dashboard/missionControl.ts
@@ -1,4 +1,5 @@
 import { promises as fs } from 'fs';
+import { EventEmitter } from 'events';
 import { StrategicOrchestrator } from '../orchestrator/strategicOrchestrator.js';
 import { UsageAnalyticsAgent } from '../analytics/usageAnalytics.js';
 import { loadKnowledgeBase, toContext } from '../memory/memoryLoader.js';
@@ -28,6 +29,7 @@
   private monitor = new SystemMonitor();
   private fundingScanner = new FundingOpportunityScanner();
   private alerts: MissionControlStatus['alerts'] = [];
+  public events = new EventEmitter();
 
   async getStatus(): Promise<MissionControlStatus> {
     const timestamp = new Date().toISOString();
@@ -103,6 +105,7 @@
       message,
       timestamp: new Date().toISOString()
     });
+    this.events.emit('alert', { level, message });
     
     // Keep only last 50 alerts
     if (this.alerts.length > 50) {
@@ -112,13 +115,16 @@
 
   async executeTask(taskDescription: string, options: { dryRun?: boolean } = {}) {
     await this.addAlert('info', `Starting task: ${taskDescription}`);
+    this.events.emit('progress', { stage: 'task', message: 'Starting task…', percent: 5 });
     
     try {
       const result = await this.orchestrator.execute(taskDescription, options);
       await this.addAlert('info', `Task completed successfully: ${result.taskId}`);
+      this.events.emit('notify', { level: 'success', message: 'Task completed successfully' });
       return result;
     } catch (error) {
       await this.addAlert('error', `Task failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Task execution failed' });
       throw error;
     }
   }
@@ -126,11 +132,13 @@
   async scanFundingOpportunities() {
     await this.addAlert('info', 'Starting EU funding opportunity scan...');
     try {
-      const opportunities = await this.fundingScanner.scanAll();
+      const opportunities = await this.fundingScanner.scanAll((evt) => this.events.emit('progress', evt));
       await this.addAlert('info', `Found ${opportunities.length} funding opportunities`);
+      this.events.emit('notify', { level: 'success', message: `Scan complete — ${opportunities.length} found` });
       return opportunities;
     } catch (error) {
       await this.addAlert('error', `Funding scan failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Funding scan failed' });
       throw error;
     }
   }
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/dashboard.js b/src/dashboard/web/dashboard.js
index cd16d5697fb3c112440336e88cb1eb4ec5d3ffa1..b421d3d91ed7d5cdd241efb9579e90f4975060a4
--- a/src/dashboard/web/dashboard.js
+++ b/src/dashboard/web/dashboard.js
@@ -6,6 +6,8 @@
     this.initTime = new Date();
     this.theme = localStorage.getItem('eufm-theme') || 'light';
     this.sections = ['overview', 'funding', 'activity', 'analytics', 'settings'];
+    this.counts = { opportunities: 0, notes: 0, tools: 0 };
+    this.state = { scanning: false };
     this.init();
   }
 
@@ -21,6 +23,7 @@
     setInterval(() => this.updateTimestamp(), 1000);
     setInterval(() => this.updateUptime(), 1000);
     setInterval(() => this.refresh(), 30000);
+    this.onboardIfFirstRun();
   }
 
   cacheEls() {
@@ -31,6 +34,10 @@
     this.$globalSearch = document.getElementById('global-search');
     this.$searchPanel = document.getElementById('search-panel');
     this.$searchResults = document.getElementById('search-results');
+    this.$toast = document.getElementById('toast-container');
+    this.$scanBtn1 = document.getElementById('scan-funding-btn');
+    this.$scanBtn2 = document.getElementById('scan-funding-btn-2');
+    this.$scanHelp = document.getElementById('scan-help');
   }
 
   bindUI() {
@@ -142,6 +149,70 @@
     return res.text();
   }
 
+  // --- UI feedback helpers ---
+  showToast(message, type = 'info') {
+    if (!this.$toast) return;
+    const div = document.createElement('div');
+    div.className = `toast ${type}`;
+    div.innerHTML = `
+      <span class="material-symbols-rounded">${type === 'success' ? 'check_circle' : type === 'error' ? 'error' : 'info'}</span>
+      <div>${message}</div>
+    `;
+    this.$toast.appendChild(div);
+    setTimeout(() => div.remove(), 4000);
+  }
+
+  setLoadingBtn(btn, loading = true) {
+    if (!btn) return;
+    btn.classList.toggle('loading', !!loading);
+    btn.setAttribute('aria-busy', loading ? 'true' : 'false');
+    btn.disabled = !!loading;
+  }
+
+  insertInlineProgress(targetEl) {
+    if (!targetEl) return null;
+    let wrap = targetEl.parentElement?.querySelector('.progress-inline');
+    if (!wrap) {
+      wrap = document.createElement('div');
+      wrap.className = 'progress-inline';
+      wrap.innerHTML = `<div class="progress-bar"><div class="fill"></div></div><span class="label">Preparing…</span>`;
+      targetEl.parentElement?.appendChild(wrap);
+    }
+    return wrap;
+  }
+
+  setInlineProgress(wrap, percent, label) {
+    if (!wrap) return;
+    const fill = wrap.querySelector('.fill');
+    const lab = wrap.querySelector('.label');
+    if (fill) fill.style.width = `${Math.max(0, Math.min(100, percent))}%`;
+    if (lab && label) lab.textContent = label;
+  }
+
+  onboardIfFirstRun() {
+    const key = 'eufm-onboarded';
+    if (localStorage.getItem(key)) return;
+    const chip = document.getElementById('system-status-chip');
+    const scan = this.$scanBtn1 || this.$scanBtn2;
+    const hints = [];
+    const makeBubble = (target, title, hint) => {
+      if (!target) return;
+      const rect = target.getBoundingClientRect();
+      const b = document.createElement('div');
+      b.className = 'help-bubble';
+      b.style.top = `${window.scrollY + rect.top - 56}px`;
+      b.style.left = `${window.scrollX + rect.left}px`;
+      b.innerHTML = `<div class="title">${title}</div><div class="hint">${hint}</div><div class="help-arrow"></div>`;
+      document.body.appendChild(b);
+      hints.push(b);
+    };
+    makeBubble(chip, 'System Health', 'Live status of agents, uptime and time.');
+    makeBubble(scan, 'Scan for Funding', 'Click to scan EU portals for AI/tech calls.');
+    const dismiss = () => { hints.forEach(h => h.remove()); localStorage.setItem(key, '1'); };
+    setTimeout(dismiss, 6000);
+    document.addEventListener('click', dismiss, { once: true });
+  }
+
   async updateStatus() {
     const s = await this.api('/api/status');
     // Agents
@@ -162,6 +233,11 @@
     document.getElementById('progress-text').textContent = `${s.eufmProject.progress}% Complete`;
     document.getElementById('next-milestone').textContent = `Next: ${s.eufmProject.nextMilestone}`;
     document.getElementById('funding-count').textContent = s.eufmProject.fundingOpportunities;
+    // counts for search context
+    this.counts.opportunities = s.eufmProject.fundingOpportunities;
+    document.getElementById('global-search').placeholder = `Search ${this.counts.opportunities} opportunities, ${s.system.memory.notes} notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator`;
+    this.counts.notes = s.system.memory.notes;
+    this.counts.tools = 8;
     // Activity from alerts
     this.renderActivity(s.alerts, 'activity-list');
   }
@@ -184,6 +260,7 @@
         <div class="tool-status status-${t.status}">${t.status}</div>
       </div>
     `).join('');
+    this.counts.tools = Array.isArray(tools) ? tools.length : 0;
   }
 
   async updateSubscriptions() {
@@ -219,6 +296,13 @@
     renderOpps(document.getElementById('opportunity-list'));
     const el2 = document.getElementById('opportunity-list-2');
     if (el2) renderOpps(el2);
+    // Update last scan helper and smart notifications
+    const last = opps.reduce((acc, o) => Math.max(acc, new Date(o.scannedAt || 0).getTime()), 0);
+    if (this.$scanHelp) this.$scanHelp.textContent = last ? `Last scan: ${new Date(last).toLocaleString()} • Found ${opps.length} opportunities` : 'Last scan: —';
+    const closingSoon = opps.filter(o => o.status === 'closing_soon').slice(0, 1);
+    if (closingSoon.length) {
+      this.showToast(`🚨 Deadline approaching: ${closingSoon[0].title} closes soon`, 'info');
+    }
   }
 
   async updateAlerts() {
@@ -237,13 +321,27 @@
   }
 
   async scanFunding() {
-    this.addChatMessage('system', 'Starting EU funding opportunity scan...');
+    if (this.state.scanning) return;
+    this.state.scanning = true;
+    this.addChatMessage('system', 'Scanning EU portals…');
+    this.showToast('Scanning EU portals for opportunities…', 'info');
+    const btns = [this.$scanBtn1, this.$scanBtn2];
+    btns.forEach(b => this.setLoadingBtn(b, true));
+    const progressHost = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+    this.setInlineProgress(progressHost, 5, 'Contacting sources…');
     try {
-      await this.api('/api/scan-funding', { method: 'POST' });
-      this.addChatMessage('system', 'Scan complete. Updating opportunities...');
+      const res = await this.api('/api/scan-funding', { method: 'POST' });
+      this.addChatMessage('system', '✅ Scan complete - updating opportunities…');
+      this.showToast(`✅ ${res?.message || 'Scan complete'}${res?.found ? ` • ${res.found} opportunities` : ''}`, 'success');
       await this.updateOpportunities();
     } catch (e) {
       this.addChatMessage('system', 'Funding scan failed. Check logs.');
+      this.showToast('Funding scan failed', 'error');
+    }
+    finally {
+      btns.forEach(b => this.setLoadingBtn(b, false));
+      this.state.scanning = false;
+      if (progressHost) progressHost.remove();
     }
   }
 
@@ -253,15 +351,24 @@
     const task = document.getElementById('task-input').value.trim();
     if (!task) return;
     this.addChatMessage('user', `${dryRun ? 'Dry Run' : 'Execute'}: ${task}`);
+    this.showToast(`${dryRun ? 'Analyzing' : 'Executing'} task…`, 'info');
+    const execBtn = document.getElementById('submit-task-btn');
+    const dryBtn = document.getElementById('submit-task-dry-btn');
+    [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, true));
     try {
       await this.api('/api/execute', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ task, dryRun }) });
       this.addChatMessage('system', dryRun ? 'Task analyzed successfully.' : 'Task completed successfully.');
+      this.showToast(dryRun ? '✅ Analysis complete' : '✅ Task completed', 'success');
       document.getElementById('task-modal').classList.remove('open');
       document.getElementById('task-input').value = '';
       await this.refresh();
     } catch (e) {
       this.addChatMessage('system', 'Task execution failed.');
+      this.showToast('Task execution failed', 'error');
     }
+    finally {
+      [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, false));
+    }
   }
 
   addChatMessage(type, message) {
@@ -292,15 +399,31 @@
   }
 
   async search(q) {
-    if (!q || q.trim().length < 2) { this.$searchPanel.hidden = true; return; }
+    if (!q || q.trim().length < 2) {
+      // Suggestions
+      this.$searchPanel.hidden = false;
+      this.$searchResults.innerHTML = `
+        <div class="search-item">
+          <div class="type">Suggestions</div>
+          <div class="title">Searching ${this.counts.opportunities} opportunities, ${this.counts.notes} notes, ${this.counts.tools} tools</div>
+          <div class="snippet">Try: <code>AI funding</code>, <code>Horizon Europe</code>, <code>EIC Accelerator</code></div>
+        </div>
+      `;
+      return;
+    }
     try {
       const results = await this.api(`/api/search?q=${encodeURIComponent(q)}`);
       this.$searchPanel.hidden = false;
+      const hi = (text) => {
+        if (!text) return '';
+        const re = new RegExp(`(${q.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&')})`, 'ig');
+        return String(text).replace(re, '<mark>$1</mark>');
+      };
       this.$searchResults.innerHTML = results.map(r => `
         <div class="search-item">
           <div class="type">${r.type}</div>
-          <div class="title">${r.title}</div>
-          <div class="snippet">${r.snippet || ''}</div>
+          <div class="title">${hi(r.title)}</div>
+          <div class="snippet">${hi(r.snippet || '')}</div>
         </div>
       `).join('');
     } catch {
@@ -327,6 +450,12 @@
           const msg = JSON.parse(evt.data);
           if (msg.type === 'status_update') { this.applyStatus(msg.data); }
           if (msg.type === 'funding_opportunities') { this.updateOpportunities(); }
+          if (msg.type === 'activity') { this.addChatMessage('system', msg.message); }
+          if (msg.type === 'progress' && this.state.scanning) {
+            const host = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+            if (msg.percent != null) this.setInlineProgress(host, msg.percent, msg.message || '');
+          }
+          if (msg.type === 'notify') { this.showToast(msg.message, msg.level || 'info'); }
         } catch {}
       };
     } catch {}
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..ee751a887da82d618e95d78dfa323c4364e599ef
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>
@@ -222,7 +223,7 @@
               <span class="material-symbols-rounded">work</span>
               <h3>Live Opportunities</h3>
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
@@ -279,10 +280,11 @@
             </label>
           </div>
           <div class="row">
-            <button class="btn" id="export-json-btn">
+            <button class="btn" id="export-json-btn" title="Download a JSON snapshot of system status">
               <span class="material-symbols-rounded">download</span>
               <span>Export status JSON</span>
             </button>
+            <small class="meta">Includes agents, costs, memory, alerts and project status</small>
           </div>
         </div>
       </section>
@@ -307,6 +309,9 @@
     <div class="search-results" id="search-results" role="listbox" aria-label="Search results"></div>
   </div>
 
+  <!-- Toasts -->
+  <div id="toast-container" class="toast-container" aria-live="polite"></div>
+
   <script src="dashboard.js"></script>
 </body>
 </html>


[2025-09-05T17:28:46] thinking

**Updating server features**

I need to update the DashboardServer so it subscribes to events and broadcasts them appropriately. Also, I'll modify the `/api/scan-funding` endpoint to return both a message and the count of found items. This sounds like a good patch! I want to make sure I'm thorough in making these changes to improve the user experience. It's all about keeping everything smooth and efficient. Let’s patch it up!
[2025-09-05T17:28:51] apply_patch auto_approved=true:
M /Users/panda/Desktop/EUFM/src/dashboard/dashboardServer.ts
@@ -51,3 +51,3 @@
         const opportunities = await this.missionControl.scanFundingOpportunities();
-        res.json(opportunities);
+        res.json({ message: 'Funding scan complete', found: opportunities.length });
       } catch (error) {
@@ -177,2 +177,16 @@
 
+    // Relay mission control events to all clients
+    this.missionControl.events.on('alert', (evt) => {
+      const payload = JSON.stringify({ type: 'activity', message: `[${evt.level.toUpperCase()}] ${evt.message}` });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('progress', (evt) => {
+      const payload = JSON.stringify({ type: 'progress', ...evt });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('notify', (evt) => {
+      const payload = JSON.stringify({ type: 'notify', level: evt.level, message: evt.message });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+
     // Broadcast status updates every 30 seconds
[2025-09-05T17:28:53] apply_patch(auto_approved=true) exited 0 in 2.01s:
Success. Updated the following files:
M src/dashboard/dashboardServer.ts
[2025-09-05T17:28:53] turn diff:
diff --git a/src/dashboard/dashboardServer.ts b/src/dashboard/dashboardServer.ts
index 848b8052607fea10292180ae5937190cada95a36..2f64c63a81231cee4042d957e425c63255be3ee9
--- a/src/dashboard/dashboardServer.ts
+++ b/src/dashboard/dashboardServer.ts
@@ -49,7 +49,7 @@
     this.app.post('/api/scan-funding', async (req, res) => {
       try {
         const opportunities = await this.missionControl.scanFundingOpportunities();
-        res.json(opportunities);
+        res.json({ message: 'Funding scan complete', found: opportunities.length });
       } catch (error) {
         res.status(500).json({ error: 'Funding scan failed' });
       }
@@ -175,6 +175,20 @@
       });
     });
 
+    // Relay mission control events to all clients
+    this.missionControl.events.on('alert', (evt) => {
+      const payload = JSON.stringify({ type: 'activity', message: `[${evt.level.toUpperCase()}] ${evt.message}` });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('progress', (evt) => {
+      const payload = JSON.stringify({ type: 'progress', ...evt });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('notify', (evt) => {
+      const payload = JSON.stringify({ type: 'notify', level: evt.level, message: evt.message });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+
     // Broadcast status updates every 30 seconds
     setInterval(() => {
       this.broadcastStatusUpdate();
diff --git a/src/dashboard/fundingOpportunityScanner.ts b/src/dashboard/fundingOpportunityScanner.ts
index ec1230aa52b2a4f6355a228632f4cbaed0a3799b..c24b9505f3661908fdcbfcbb0b517e8fb43719df
--- a/src/dashboard/fundingOpportunityScanner.ts
+++ b/src/dashboard/fundingOpportunityScanner.ts
@@ -28,7 +28,7 @@
     await fs.mkdir(this.baseDir, { recursive: true }).catch(() => {});
   }
 
-  async scanAll(): Promise<FundingOpportunity[]> {
+  async scanAll(progressCb?: (evt: { stage: string; message: string; percent?: number }) => void): Promise<FundingOpportunity[]> {
     const sources = [
       'Horizon Europe',
       'Digital Europe Programme', 
@@ -38,11 +38,15 @@
     ];
 
     const opportunities: FundingOpportunity[] = [];
-    
-    for (const source of sources) {
+    const total = sources.length;
+    progressCb?.({ stage: 'start', message: 'Starting funding scan…', percent: 2 });
+    for (let i = 0; i < sources.length; i++) {
+      const source = sources[i];
       try {
+        progressCb?.({ stage: 'source', message: `Scanning ${source}…`, percent: Math.round(((i) / total) * 100) });
         const sourceOpportunities = await this.scanSource(source);
         opportunities.push(...sourceOpportunities);
+        progressCb?.({ stage: 'parsed', message: `Analyzing ${source} results…`, percent: Math.round(((i + 0.6) / total) * 100) });
       } catch (error) {
         console.warn(`Failed to scan ${source}:`, error);
       }
@@ -50,8 +54,11 @@
 
     // Save results
     await this.saveOpportunities(opportunities);
+    progressCb?.({ stage: 'save', message: 'Saving results…', percent: 96 });
     
-    return opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    const sorted = opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    progressCb?.({ stage: 'done', message: `Scan complete — ${sorted.length} opportunities found`, percent: 100 });
+    return sorted;
   }
 
   private async scanSource(program: string): Promise<FundingOpportunity[]> {
diff --git a/src/dashboard/missionControl.ts b/src/dashboard/missionControl.ts
index b7cc2a083f748dc35dd013fe24edce703ae5e138..0b4b0a946d314e52604c7716e001fa4adbee3b6c
--- a/src/dashboard/missionControl.ts
+++ b/src/dashboard/missionControl.ts
@@ -1,4 +1,5 @@
 import { promises as fs } from 'fs';
+import { EventEmitter } from 'events';
 import { StrategicOrchestrator } from '../orchestrator/strategicOrchestrator.js';
 import { UsageAnalyticsAgent } from '../analytics/usageAnalytics.js';
 import { loadKnowledgeBase, toContext } from '../memory/memoryLoader.js';
@@ -28,6 +29,7 @@
   private monitor = new SystemMonitor();
   private fundingScanner = new FundingOpportunityScanner();
   private alerts: MissionControlStatus['alerts'] = [];
+  public events = new EventEmitter();
 
   async getStatus(): Promise<MissionControlStatus> {
     const timestamp = new Date().toISOString();
@@ -103,6 +105,7 @@
       message,
       timestamp: new Date().toISOString()
     });
+    this.events.emit('alert', { level, message });
     
     // Keep only last 50 alerts
     if (this.alerts.length > 50) {
@@ -112,13 +115,16 @@
 
   async executeTask(taskDescription: string, options: { dryRun?: boolean } = {}) {
     await this.addAlert('info', `Starting task: ${taskDescription}`);
+    this.events.emit('progress', { stage: 'task', message: 'Starting task…', percent: 5 });
     
     try {
       const result = await this.orchestrator.execute(taskDescription, options);
       await this.addAlert('info', `Task completed successfully: ${result.taskId}`);
+      this.events.emit('notify', { level: 'success', message: 'Task completed successfully' });
       return result;
     } catch (error) {
       await this.addAlert('error', `Task failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Task execution failed' });
       throw error;
     }
   }
@@ -126,11 +132,13 @@
   async scanFundingOpportunities() {
     await this.addAlert('info', 'Starting EU funding opportunity scan...');
     try {
-      const opportunities = await this.fundingScanner.scanAll();
+      const opportunities = await this.fundingScanner.scanAll((evt) => this.events.emit('progress', evt));
       await this.addAlert('info', `Found ${opportunities.length} funding opportunities`);
+      this.events.emit('notify', { level: 'success', message: `Scan complete — ${opportunities.length} found` });
       return opportunities;
     } catch (error) {
       await this.addAlert('error', `Funding scan failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Funding scan failed' });
       throw error;
     }
   }
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/dashboard.js b/src/dashboard/web/dashboard.js
index cd16d5697fb3c112440336e88cb1eb4ec5d3ffa1..b421d3d91ed7d5cdd241efb9579e90f4975060a4
--- a/src/dashboard/web/dashboard.js
+++ b/src/dashboard/web/dashboard.js
@@ -6,6 +6,8 @@
     this.initTime = new Date();
     this.theme = localStorage.getItem('eufm-theme') || 'light';
     this.sections = ['overview', 'funding', 'activity', 'analytics', 'settings'];
+    this.counts = { opportunities: 0, notes: 0, tools: 0 };
+    this.state = { scanning: false };
     this.init();
   }
 
@@ -21,6 +23,7 @@
     setInterval(() => this.updateTimestamp(), 1000);
     setInterval(() => this.updateUptime(), 1000);
     setInterval(() => this.refresh(), 30000);
+    this.onboardIfFirstRun();
   }
 
   cacheEls() {
@@ -31,6 +34,10 @@
     this.$globalSearch = document.getElementById('global-search');
     this.$searchPanel = document.getElementById('search-panel');
     this.$searchResults = document.getElementById('search-results');
+    this.$toast = document.getElementById('toast-container');
+    this.$scanBtn1 = document.getElementById('scan-funding-btn');
+    this.$scanBtn2 = document.getElementById('scan-funding-btn-2');
+    this.$scanHelp = document.getElementById('scan-help');
   }
 
   bindUI() {
@@ -142,6 +149,70 @@
     return res.text();
   }
 
+  // --- UI feedback helpers ---
+  showToast(message, type = 'info') {
+    if (!this.$toast) return;
+    const div = document.createElement('div');
+    div.className = `toast ${type}`;
+    div.innerHTML = `
+      <span class="material-symbols-rounded">${type === 'success' ? 'check_circle' : type === 'error' ? 'error' : 'info'}</span>
+      <div>${message}</div>
+    `;
+    this.$toast.appendChild(div);
+    setTimeout(() => div.remove(), 4000);
+  }
+
+  setLoadingBtn(btn, loading = true) {
+    if (!btn) return;
+    btn.classList.toggle('loading', !!loading);
+    btn.setAttribute('aria-busy', loading ? 'true' : 'false');
+    btn.disabled = !!loading;
+  }
+
+  insertInlineProgress(targetEl) {
+    if (!targetEl) return null;
+    let wrap = targetEl.parentElement?.querySelector('.progress-inline');
+    if (!wrap) {
+      wrap = document.createElement('div');
+      wrap.className = 'progress-inline';
+      wrap.innerHTML = `<div class="progress-bar"><div class="fill"></div></div><span class="label">Preparing…</span>`;
+      targetEl.parentElement?.appendChild(wrap);
+    }
+    return wrap;
+  }
+
+  setInlineProgress(wrap, percent, label) {
+    if (!wrap) return;
+    const fill = wrap.querySelector('.fill');
+    const lab = wrap.querySelector('.label');
+    if (fill) fill.style.width = `${Math.max(0, Math.min(100, percent))}%`;
+    if (lab && label) lab.textContent = label;
+  }
+
+  onboardIfFirstRun() {
+    const key = 'eufm-onboarded';
+    if (localStorage.getItem(key)) return;
+    const chip = document.getElementById('system-status-chip');
+    const scan = this.$scanBtn1 || this.$scanBtn2;
+    const hints = [];
+    const makeBubble = (target, title, hint) => {
+      if (!target) return;
+      const rect = target.getBoundingClientRect();
+      const b = document.createElement('div');
+      b.className = 'help-bubble';
+      b.style.top = `${window.scrollY + rect.top - 56}px`;
+      b.style.left = `${window.scrollX + rect.left}px`;
+      b.innerHTML = `<div class="title">${title}</div><div class="hint">${hint}</div><div class="help-arrow"></div>`;
+      document.body.appendChild(b);
+      hints.push(b);
+    };
+    makeBubble(chip, 'System Health', 'Live status of agents, uptime and time.');
+    makeBubble(scan, 'Scan for Funding', 'Click to scan EU portals for AI/tech calls.');
+    const dismiss = () => { hints.forEach(h => h.remove()); localStorage.setItem(key, '1'); };
+    setTimeout(dismiss, 6000);
+    document.addEventListener('click', dismiss, { once: true });
+  }
+
   async updateStatus() {
     const s = await this.api('/api/status');
     // Agents
@@ -162,6 +233,11 @@
     document.getElementById('progress-text').textContent = `${s.eufmProject.progress}% Complete`;
     document.getElementById('next-milestone').textContent = `Next: ${s.eufmProject.nextMilestone}`;
     document.getElementById('funding-count').textContent = s.eufmProject.fundingOpportunities;
+    // counts for search context
+    this.counts.opportunities = s.eufmProject.fundingOpportunities;
+    document.getElementById('global-search').placeholder = `Search ${this.counts.opportunities} opportunities, ${s.system.memory.notes} notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator`;
+    this.counts.notes = s.system.memory.notes;
+    this.counts.tools = 8;
     // Activity from alerts
     this.renderActivity(s.alerts, 'activity-list');
   }
@@ -184,6 +260,7 @@
         <div class="tool-status status-${t.status}">${t.status}</div>
       </div>
     `).join('');
+    this.counts.tools = Array.isArray(tools) ? tools.length : 0;
   }
 
   async updateSubscriptions() {
@@ -219,6 +296,13 @@
     renderOpps(document.getElementById('opportunity-list'));
     const el2 = document.getElementById('opportunity-list-2');
     if (el2) renderOpps(el2);
+    // Update last scan helper and smart notifications
+    const last = opps.reduce((acc, o) => Math.max(acc, new Date(o.scannedAt || 0).getTime()), 0);
+    if (this.$scanHelp) this.$scanHelp.textContent = last ? `Last scan: ${new Date(last).toLocaleString()} • Found ${opps.length} opportunities` : 'Last scan: —';
+    const closingSoon = opps.filter(o => o.status === 'closing_soon').slice(0, 1);
+    if (closingSoon.length) {
+      this.showToast(`🚨 Deadline approaching: ${closingSoon[0].title} closes soon`, 'info');
+    }
   }
 
   async updateAlerts() {
@@ -237,13 +321,27 @@
   }
 
   async scanFunding() {
-    this.addChatMessage('system', 'Starting EU funding opportunity scan...');
+    if (this.state.scanning) return;
+    this.state.scanning = true;
+    this.addChatMessage('system', 'Scanning EU portals…');
+    this.showToast('Scanning EU portals for opportunities…', 'info');
+    const btns = [this.$scanBtn1, this.$scanBtn2];
+    btns.forEach(b => this.setLoadingBtn(b, true));
+    const progressHost = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+    this.setInlineProgress(progressHost, 5, 'Contacting sources…');
     try {
-      await this.api('/api/scan-funding', { method: 'POST' });
-      this.addChatMessage('system', 'Scan complete. Updating opportunities...');
+      const res = await this.api('/api/scan-funding', { method: 'POST' });
+      this.addChatMessage('system', '✅ Scan complete - updating opportunities…');
+      this.showToast(`✅ ${res?.message || 'Scan complete'}${res?.found ? ` • ${res.found} opportunities` : ''}`, 'success');
       await this.updateOpportunities();
     } catch (e) {
       this.addChatMessage('system', 'Funding scan failed. Check logs.');
+      this.showToast('Funding scan failed', 'error');
+    }
+    finally {
+      btns.forEach(b => this.setLoadingBtn(b, false));
+      this.state.scanning = false;
+      if (progressHost) progressHost.remove();
     }
   }
 
@@ -253,15 +351,24 @@
     const task = document.getElementById('task-input').value.trim();
     if (!task) return;
     this.addChatMessage('user', `${dryRun ? 'Dry Run' : 'Execute'}: ${task}`);
+    this.showToast(`${dryRun ? 'Analyzing' : 'Executing'} task…`, 'info');
+    const execBtn = document.getElementById('submit-task-btn');
+    const dryBtn = document.getElementById('submit-task-dry-btn');
+    [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, true));
     try {
       await this.api('/api/execute', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ task, dryRun }) });
       this.addChatMessage('system', dryRun ? 'Task analyzed successfully.' : 'Task completed successfully.');
+      this.showToast(dryRun ? '✅ Analysis complete' : '✅ Task completed', 'success');
       document.getElementById('task-modal').classList.remove('open');
       document.getElementById('task-input').value = '';
       await this.refresh();
     } catch (e) {
       this.addChatMessage('system', 'Task execution failed.');
+      this.showToast('Task execution failed', 'error');
     }
+    finally {
+      [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, false));
+    }
   }
 
   addChatMessage(type, message) {
@@ -292,15 +399,31 @@
   }
 
   async search(q) {
-    if (!q || q.trim().length < 2) { this.$searchPanel.hidden = true; return; }
+    if (!q || q.trim().length < 2) {
+      // Suggestions
+      this.$searchPanel.hidden = false;
+      this.$searchResults.innerHTML = `
+        <div class="search-item">
+          <div class="type">Suggestions</div>
+          <div class="title">Searching ${this.counts.opportunities} opportunities, ${this.counts.notes} notes, ${this.counts.tools} tools</div>
+          <div class="snippet">Try: <code>AI funding</code>, <code>Horizon Europe</code>, <code>EIC Accelerator</code></div>
+        </div>
+      `;
+      return;
+    }
     try {
       const results = await this.api(`/api/search?q=${encodeURIComponent(q)}`);
       this.$searchPanel.hidden = false;
+      const hi = (text) => {
+        if (!text) return '';
+        const re = new RegExp(`(${q.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&')})`, 'ig');
+        return String(text).replace(re, '<mark>$1</mark>');
+      };
       this.$searchResults.innerHTML = results.map(r => `
         <div class="search-item">
           <div class="type">${r.type}</div>
-          <div class="title">${r.title}</div>
-          <div class="snippet">${r.snippet || ''}</div>
+          <div class="title">${hi(r.title)}</div>
+          <div class="snippet">${hi(r.snippet || '')}</div>
         </div>
       `).join('');
     } catch {
@@ -327,6 +450,12 @@
           const msg = JSON.parse(evt.data);
           if (msg.type === 'status_update') { this.applyStatus(msg.data); }
           if (msg.type === 'funding_opportunities') { this.updateOpportunities(); }
+          if (msg.type === 'activity') { this.addChatMessage('system', msg.message); }
+          if (msg.type === 'progress' && this.state.scanning) {
+            const host = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+            if (msg.percent != null) this.setInlineProgress(host, msg.percent, msg.message || '');
+          }
+          if (msg.type === 'notify') { this.showToast(msg.message, msg.level || 'info'); }
         } catch {}
       };
     } catch {}
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..ee751a887da82d618e95d78dfa323c4364e599ef
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>
@@ -222,7 +223,7 @@
               <span class="material-symbols-rounded">work</span>
               <h3>Live Opportunities</h3>
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
@@ -279,10 +280,11 @@
             </label>
           </div>
           <div class="row">
-            <button class="btn" id="export-json-btn">
+            <button class="btn" id="export-json-btn" title="Download a JSON snapshot of system status">
               <span class="material-symbols-rounded">download</span>
               <span>Export status JSON</span>
             </button>
+            <small class="meta">Includes agents, costs, memory, alerts and project status</small>
           </div>
         </div>
       </section>
@@ -307,6 +309,9 @@
     <div class="search-results" id="search-results" role="listbox" aria-label="Search results"></div>
   </div>
 
+  <!-- Toasts -->
+  <div id="toast-container" class="toast-container" aria-live="polite"></div>
+
   <script src="dashboard.js"></script>
 </body>
 </html>

[2025-09-05T17:28:53] tokens used: 1325
[2025-09-05T17:28:53] turn diff:
diff --git a/src/dashboard/dashboardServer.ts b/src/dashboard/dashboardServer.ts
index 848b8052607fea10292180ae5937190cada95a36..2f64c63a81231cee4042d957e425c63255be3ee9
--- a/src/dashboard/dashboardServer.ts
+++ b/src/dashboard/dashboardServer.ts
@@ -49,7 +49,7 @@
     this.app.post('/api/scan-funding', async (req, res) => {
       try {
         const opportunities = await this.missionControl.scanFundingOpportunities();
-        res.json(opportunities);
+        res.json({ message: 'Funding scan complete', found: opportunities.length });
       } catch (error) {
         res.status(500).json({ error: 'Funding scan failed' });
       }
@@ -175,6 +175,20 @@
       });
     });
 
+    // Relay mission control events to all clients
+    this.missionControl.events.on('alert', (evt) => {
+      const payload = JSON.stringify({ type: 'activity', message: `[${evt.level.toUpperCase()}] ${evt.message}` });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('progress', (evt) => {
+      const payload = JSON.stringify({ type: 'progress', ...evt });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('notify', (evt) => {
+      const payload = JSON.stringify({ type: 'notify', level: evt.level, message: evt.message });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+
     // Broadcast status updates every 30 seconds
     setInterval(() => {
       this.broadcastStatusUpdate();
diff --git a/src/dashboard/fundingOpportunityScanner.ts b/src/dashboard/fundingOpportunityScanner.ts
index ec1230aa52b2a4f6355a228632f4cbaed0a3799b..c24b9505f3661908fdcbfcbb0b517e8fb43719df
--- a/src/dashboard/fundingOpportunityScanner.ts
+++ b/src/dashboard/fundingOpportunityScanner.ts
@@ -28,7 +28,7 @@
     await fs.mkdir(this.baseDir, { recursive: true }).catch(() => {});
   }
 
-  async scanAll(): Promise<FundingOpportunity[]> {
+  async scanAll(progressCb?: (evt: { stage: string; message: string; percent?: number }) => void): Promise<FundingOpportunity[]> {
     const sources = [
       'Horizon Europe',
       'Digital Europe Programme', 
@@ -38,11 +38,15 @@
     ];
 
     const opportunities: FundingOpportunity[] = [];
-    
-    for (const source of sources) {
+    const total = sources.length;
+    progressCb?.({ stage: 'start', message: 'Starting funding scan…', percent: 2 });
+    for (let i = 0; i < sources.length; i++) {
+      const source = sources[i];
       try {
+        progressCb?.({ stage: 'source', message: `Scanning ${source}…`, percent: Math.round(((i) / total) * 100) });
         const sourceOpportunities = await this.scanSource(source);
         opportunities.push(...sourceOpportunities);
+        progressCb?.({ stage: 'parsed', message: `Analyzing ${source} results…`, percent: Math.round(((i + 0.6) / total) * 100) });
       } catch (error) {
         console.warn(`Failed to scan ${source}:`, error);
       }
@@ -50,8 +54,11 @@
 
     // Save results
     await this.saveOpportunities(opportunities);
+    progressCb?.({ stage: 'save', message: 'Saving results…', percent: 96 });
     
-    return opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    const sorted = opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    progressCb?.({ stage: 'done', message: `Scan complete — ${sorted.length} opportunities found`, percent: 100 });
+    return sorted;
   }
 
   private async scanSource(program: string): Promise<FundingOpportunity[]> {
diff --git a/src/dashboard/missionControl.ts b/src/dashboard/missionControl.ts
index b7cc2a083f748dc35dd013fe24edce703ae5e138..0b4b0a946d314e52604c7716e001fa4adbee3b6c
--- a/src/dashboard/missionControl.ts
+++ b/src/dashboard/missionControl.ts
@@ -1,4 +1,5 @@
 import { promises as fs } from 'fs';
+import { EventEmitter } from 'events';
 import { StrategicOrchestrator } from '../orchestrator/strategicOrchestrator.js';
 import { UsageAnalyticsAgent } from '../analytics/usageAnalytics.js';
 import { loadKnowledgeBase, toContext } from '../memory/memoryLoader.js';
@@ -28,6 +29,7 @@
   private monitor = new SystemMonitor();
   private fundingScanner = new FundingOpportunityScanner();
   private alerts: MissionControlStatus['alerts'] = [];
+  public events = new EventEmitter();
 
   async getStatus(): Promise<MissionControlStatus> {
     const timestamp = new Date().toISOString();
@@ -103,6 +105,7 @@
       message,
       timestamp: new Date().toISOString()
     });
+    this.events.emit('alert', { level, message });
     
     // Keep only last 50 alerts
     if (this.alerts.length > 50) {
@@ -112,13 +115,16 @@
 
   async executeTask(taskDescription: string, options: { dryRun?: boolean } = {}) {
     await this.addAlert('info', `Starting task: ${taskDescription}`);
+    this.events.emit('progress', { stage: 'task', message: 'Starting task…', percent: 5 });
     
     try {
       const result = await this.orchestrator.execute(taskDescription, options);
       await this.addAlert('info', `Task completed successfully: ${result.taskId}`);
+      this.events.emit('notify', { level: 'success', message: 'Task completed successfully' });
       return result;
     } catch (error) {
       await this.addAlert('error', `Task failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Task execution failed' });
       throw error;
     }
   }
@@ -126,11 +132,13 @@
   async scanFundingOpportunities() {
     await this.addAlert('info', 'Starting EU funding opportunity scan...');
     try {
-      const opportunities = await this.fundingScanner.scanAll();
+      const opportunities = await this.fundingScanner.scanAll((evt) => this.events.emit('progress', evt));
       await this.addAlert('info', `Found ${opportunities.length} funding opportunities`);
+      this.events.emit('notify', { level: 'success', message: `Scan complete — ${opportunities.length} found` });
       return opportunities;
     } catch (error) {
       await this.addAlert('error', `Funding scan failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Funding scan failed' });
       throw error;
     }
   }
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/dashboard.js b/src/dashboard/web/dashboard.js
index cd16d5697fb3c112440336e88cb1eb4ec5d3ffa1..b421d3d91ed7d5cdd241efb9579e90f4975060a4
--- a/src/dashboard/web/dashboard.js
+++ b/src/dashboard/web/dashboard.js
@@ -6,6 +6,8 @@
     this.initTime = new Date();
     this.theme = localStorage.getItem('eufm-theme') || 'light';
     this.sections = ['overview', 'funding', 'activity', 'analytics', 'settings'];
+    this.counts = { opportunities: 0, notes: 0, tools: 0 };
+    this.state = { scanning: false };
     this.init();
   }
 
@@ -21,6 +23,7 @@
     setInterval(() => this.updateTimestamp(), 1000);
     setInterval(() => this.updateUptime(), 1000);
     setInterval(() => this.refresh(), 30000);
+    this.onboardIfFirstRun();
   }
 
   cacheEls() {
@@ -31,6 +34,10 @@
     this.$globalSearch = document.getElementById('global-search');
     this.$searchPanel = document.getElementById('search-panel');
     this.$searchResults = document.getElementById('search-results');
+    this.$toast = document.getElementById('toast-container');
+    this.$scanBtn1 = document.getElementById('scan-funding-btn');
+    this.$scanBtn2 = document.getElementById('scan-funding-btn-2');
+    this.$scanHelp = document.getElementById('scan-help');
   }
 
   bindUI() {
@@ -142,6 +149,70 @@
     return res.text();
   }
 
+  // --- UI feedback helpers ---
+  showToast(message, type = 'info') {
+    if (!this.$toast) return;
+    const div = document.createElement('div');
+    div.className = `toast ${type}`;
+    div.innerHTML = `
+      <span class="material-symbols-rounded">${type === 'success' ? 'check_circle' : type === 'error' ? 'error' : 'info'}</span>
+      <div>${message}</div>
+    `;
+    this.$toast.appendChild(div);
+    setTimeout(() => div.remove(), 4000);
+  }
+
+  setLoadingBtn(btn, loading = true) {
+    if (!btn) return;
+    btn.classList.toggle('loading', !!loading);
+    btn.setAttribute('aria-busy', loading ? 'true' : 'false');
+    btn.disabled = !!loading;
+  }
+
+  insertInlineProgress(targetEl) {
+    if (!targetEl) return null;
+    let wrap = targetEl.parentElement?.querySelector('.progress-inline');
+    if (!wrap) {
+      wrap = document.createElement('div');
+      wrap.className = 'progress-inline';
+      wrap.innerHTML = `<div class="progress-bar"><div class="fill"></div></div><span class="label">Preparing…</span>`;
+      targetEl.parentElement?.appendChild(wrap);
+    }
+    return wrap;
+  }
+
+  setInlineProgress(wrap, percent, label) {
+    if (!wrap) return;
+    const fill = wrap.querySelector('.fill');
+    const lab = wrap.querySelector('.label');
+    if (fill) fill.style.width = `${Math.max(0, Math.min(100, percent))}%`;
+    if (lab && label) lab.textContent = label;
+  }
+
+  onboardIfFirstRun() {
+    const key = 'eufm-onboarded';
+    if (localStorage.getItem(key)) return;
+    const chip = document.getElementById('system-status-chip');
+    const scan = this.$scanBtn1 || this.$scanBtn2;
+    const hints = [];
+    const makeBubble = (target, title, hint) => {
+      if (!target) return;
+      const rect = target.getBoundingClientRect();
+      const b = document.createElement('div');
+      b.className = 'help-bubble';
+      b.style.top = `${window.scrollY + rect.top - 56}px`;
+      b.style.left = `${window.scrollX + rect.left}px`;
+      b.innerHTML = `<div class="title">${title}</div><div class="hint">${hint}</div><div class="help-arrow"></div>`;
+      document.body.appendChild(b);
+      hints.push(b);
+    };
+    makeBubble(chip, 'System Health', 'Live status of agents, uptime and time.');
+    makeBubble(scan, 'Scan for Funding', 'Click to scan EU portals for AI/tech calls.');
+    const dismiss = () => { hints.forEach(h => h.remove()); localStorage.setItem(key, '1'); };
+    setTimeout(dismiss, 6000);
+    document.addEventListener('click', dismiss, { once: true });
+  }
+
   async updateStatus() {
     const s = await this.api('/api/status');
     // Agents
@@ -162,6 +233,11 @@
     document.getElementById('progress-text').textContent = `${s.eufmProject.progress}% Complete`;
     document.getElementById('next-milestone').textContent = `Next: ${s.eufmProject.nextMilestone}`;
     document.getElementById('funding-count').textContent = s.eufmProject.fundingOpportunities;
+    // counts for search context
+    this.counts.opportunities = s.eufmProject.fundingOpportunities;
+    document.getElementById('global-search').placeholder = `Search ${this.counts.opportunities} opportunities, ${s.system.memory.notes} notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator`;
+    this.counts.notes = s.system.memory.notes;
+    this.counts.tools = 8;
     // Activity from alerts
     this.renderActivity(s.alerts, 'activity-list');
   }
@@ -184,6 +260,7 @@
         <div class="tool-status status-${t.status}">${t.status}</div>
       </div>
     `).join('');
+    this.counts.tools = Array.isArray(tools) ? tools.length : 0;
   }
 
   async updateSubscriptions() {
@@ -219,6 +296,13 @@
     renderOpps(document.getElementById('opportunity-list'));
     const el2 = document.getElementById('opportunity-list-2');
     if (el2) renderOpps(el2);
+    // Update last scan helper and smart notifications
+    const last = opps.reduce((acc, o) => Math.max(acc, new Date(o.scannedAt || 0).getTime()), 0);
+    if (this.$scanHelp) this.$scanHelp.textContent = last ? `Last scan: ${new Date(last).toLocaleString()} • Found ${opps.length} opportunities` : 'Last scan: —';
+    const closingSoon = opps.filter(o => o.status === 'closing_soon').slice(0, 1);
+    if (closingSoon.length) {
+      this.showToast(`🚨 Deadline approaching: ${closingSoon[0].title} closes soon`, 'info');
+    }
   }
 
   async updateAlerts() {
@@ -237,13 +321,27 @@
   }
 
   async scanFunding() {
-    this.addChatMessage('system', 'Starting EU funding opportunity scan...');
+    if (this.state.scanning) return;
+    this.state.scanning = true;
+    this.addChatMessage('system', 'Scanning EU portals…');
+    this.showToast('Scanning EU portals for opportunities…', 'info');
+    const btns = [this.$scanBtn1, this.$scanBtn2];
+    btns.forEach(b => this.setLoadingBtn(b, true));
+    const progressHost = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+    this.setInlineProgress(progressHost, 5, 'Contacting sources…');
     try {
-      await this.api('/api/scan-funding', { method: 'POST' });
-      this.addChatMessage('system', 'Scan complete. Updating opportunities...');
+      const res = await this.api('/api/scan-funding', { method: 'POST' });
+      this.addChatMessage('system', '✅ Scan complete - updating opportunities…');
+      this.showToast(`✅ ${res?.message || 'Scan complete'}${res?.found ? ` • ${res.found} opportunities` : ''}`, 'success');
       await this.updateOpportunities();
     } catch (e) {
       this.addChatMessage('system', 'Funding scan failed. Check logs.');
+      this.showToast('Funding scan failed', 'error');
+    }
+    finally {
+      btns.forEach(b => this.setLoadingBtn(b, false));
+      this.state.scanning = false;
+      if (progressHost) progressHost.remove();
     }
   }
 
@@ -253,15 +351,24 @@
     const task = document.getElementById('task-input').value.trim();
     if (!task) return;
     this.addChatMessage('user', `${dryRun ? 'Dry Run' : 'Execute'}: ${task}`);
+    this.showToast(`${dryRun ? 'Analyzing' : 'Executing'} task…`, 'info');
+    const execBtn = document.getElementById('submit-task-btn');
+    const dryBtn = document.getElementById('submit-task-dry-btn');
+    [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, true));
     try {
       await this.api('/api/execute', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ task, dryRun }) });
       this.addChatMessage('system', dryRun ? 'Task analyzed successfully.' : 'Task completed successfully.');
+      this.showToast(dryRun ? '✅ Analysis complete' : '✅ Task completed', 'success');
       document.getElementById('task-modal').classList.remove('open');
       document.getElementById('task-input').value = '';
       await this.refresh();
     } catch (e) {
       this.addChatMessage('system', 'Task execution failed.');
+      this.showToast('Task execution failed', 'error');
     }
+    finally {
+      [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, false));
+    }
   }
 
   addChatMessage(type, message) {
@@ -292,15 +399,31 @@
   }
 
   async search(q) {
-    if (!q || q.trim().length < 2) { this.$searchPanel.hidden = true; return; }
+    if (!q || q.trim().length < 2) {
+      // Suggestions
+      this.$searchPanel.hidden = false;
+      this.$searchResults.innerHTML = `
+        <div class="search-item">
+          <div class="type">Suggestions</div>
+          <div class="title">Searching ${this.counts.opportunities} opportunities, ${this.counts.notes} notes, ${this.counts.tools} tools</div>
+          <div class="snippet">Try: <code>AI funding</code>, <code>Horizon Europe</code>, <code>EIC Accelerator</code></div>
+        </div>
+      `;
+      return;
+    }
     try {
       const results = await this.api(`/api/search?q=${encodeURIComponent(q)}`);
       this.$searchPanel.hidden = false;
+      const hi = (text) => {
+        if (!text) return '';
+        const re = new RegExp(`(${q.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&')})`, 'ig');
+        return String(text).replace(re, '<mark>$1</mark>');
+      };
       this.$searchResults.innerHTML = results.map(r => `
         <div class="search-item">
           <div class="type">${r.type}</div>
-          <div class="title">${r.title}</div>
-          <div class="snippet">${r.snippet || ''}</div>
+          <div class="title">${hi(r.title)}</div>
+          <div class="snippet">${hi(r.snippet || '')}</div>
         </div>
       `).join('');
     } catch {
@@ -327,6 +450,12 @@
           const msg = JSON.parse(evt.data);
           if (msg.type === 'status_update') { this.applyStatus(msg.data); }
           if (msg.type === 'funding_opportunities') { this.updateOpportunities(); }
+          if (msg.type === 'activity') { this.addChatMessage('system', msg.message); }
+          if (msg.type === 'progress' && this.state.scanning) {
+            const host = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+            if (msg.percent != null) this.setInlineProgress(host, msg.percent, msg.message || '');
+          }
+          if (msg.type === 'notify') { this.showToast(msg.message, msg.level || 'info'); }
         } catch {}
       };
     } catch {}
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..ee751a887da82d618e95d78dfa323c4364e599ef
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>
@@ -222,7 +223,7 @@
               <span class="material-symbols-rounded">work</span>
               <h3>Live Opportunities</h3>
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
@@ -279,10 +280,11 @@
             </label>
           </div>
           <div class="row">
-            <button class="btn" id="export-json-btn">
+            <button class="btn" id="export-json-btn" title="Download a JSON snapshot of system status">
               <span class="material-symbols-rounded">download</span>
               <span>Export status JSON</span>
             </button>
+            <small class="meta">Includes agents, costs, memory, alerts and project status</small>
           </div>
         </div>
       </section>
@@ -307,6 +309,9 @@
     <div class="search-results" id="search-results" role="listbox" aria-label="Search results"></div>
   </div>
 
+  <!-- Toasts -->
+  <div id="toast-container" class="toast-container" aria-live="polite"></div>
+
   <script src="dashboard.js"></script>
 </body>
 </html>


[2025-09-05T17:28:58] thinking

**Improving API and UI Elements**

I see that we need to enhance API responses for `/api/status` by making the fields more descriptive, though it isn’t a strict requirement if the front-end uses toasts for notifications. We’ve already improved the `/api/scan-funding` response. Next, I’ll ensure our TypeScript files compile, but we won’t run them just yet. I’ll also add contextual help bubbles in HTML for more elements, along with an improved export JSON button. Finally, let’s enhance the task modal with sample tasks under the textarea!
[2025-09-05T17:29:01] apply_patch auto_approved=true:
M /Users/panda/Desktop/EUFM/src/dashboard/web/index.html
@@ -299,2 +299,3 @@
       <textarea id="task-input" placeholder="Describe the task you want to execute..." aria-label="Task description"></textarea>
+      <div class="meta">Examples: analyze funding opportunities; generate proposal outline; summarize system status</div>
       <div class="modal-actions">
[2025-09-05T17:29:02] apply_patch(auto_approved=true) exited 0 in 1.03s:
Success. Updated the following files:
M src/dashboard/web/index.html
[2025-09-05T17:29:02] turn diff:
diff --git a/src/dashboard/dashboardServer.ts b/src/dashboard/dashboardServer.ts
index 848b8052607fea10292180ae5937190cada95a36..2f64c63a81231cee4042d957e425c63255be3ee9
--- a/src/dashboard/dashboardServer.ts
+++ b/src/dashboard/dashboardServer.ts
@@ -49,7 +49,7 @@
     this.app.post('/api/scan-funding', async (req, res) => {
       try {
         const opportunities = await this.missionControl.scanFundingOpportunities();
-        res.json(opportunities);
+        res.json({ message: 'Funding scan complete', found: opportunities.length });
       } catch (error) {
         res.status(500).json({ error: 'Funding scan failed' });
       }
@@ -175,6 +175,20 @@
       });
     });
 
+    // Relay mission control events to all clients
+    this.missionControl.events.on('alert', (evt) => {
+      const payload = JSON.stringify({ type: 'activity', message: `[${evt.level.toUpperCase()}] ${evt.message}` });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('progress', (evt) => {
+      const payload = JSON.stringify({ type: 'progress', ...evt });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('notify', (evt) => {
+      const payload = JSON.stringify({ type: 'notify', level: evt.level, message: evt.message });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+
     // Broadcast status updates every 30 seconds
     setInterval(() => {
       this.broadcastStatusUpdate();
diff --git a/src/dashboard/fundingOpportunityScanner.ts b/src/dashboard/fundingOpportunityScanner.ts
index ec1230aa52b2a4f6355a228632f4cbaed0a3799b..c24b9505f3661908fdcbfcbb0b517e8fb43719df
--- a/src/dashboard/fundingOpportunityScanner.ts
+++ b/src/dashboard/fundingOpportunityScanner.ts
@@ -28,7 +28,7 @@
     await fs.mkdir(this.baseDir, { recursive: true }).catch(() => {});
   }
 
-  async scanAll(): Promise<FundingOpportunity[]> {
+  async scanAll(progressCb?: (evt: { stage: string; message: string; percent?: number }) => void): Promise<FundingOpportunity[]> {
     const sources = [
       'Horizon Europe',
       'Digital Europe Programme', 
@@ -38,11 +38,15 @@
     ];
 
     const opportunities: FundingOpportunity[] = [];
-    
-    for (const source of sources) {
+    const total = sources.length;
+    progressCb?.({ stage: 'start', message: 'Starting funding scan…', percent: 2 });
+    for (let i = 0; i < sources.length; i++) {
+      const source = sources[i];
       try {
+        progressCb?.({ stage: 'source', message: `Scanning ${source}…`, percent: Math.round(((i) / total) * 100) });
         const sourceOpportunities = await this.scanSource(source);
         opportunities.push(...sourceOpportunities);
+        progressCb?.({ stage: 'parsed', message: `Analyzing ${source} results…`, percent: Math.round(((i + 0.6) / total) * 100) });
       } catch (error) {
         console.warn(`Failed to scan ${source}:`, error);
       }
@@ -50,8 +54,11 @@
 
     // Save results
     await this.saveOpportunities(opportunities);
+    progressCb?.({ stage: 'save', message: 'Saving results…', percent: 96 });
     
-    return opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    const sorted = opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    progressCb?.({ stage: 'done', message: `Scan complete — ${sorted.length} opportunities found`, percent: 100 });
+    return sorted;
   }
 
   private async scanSource(program: string): Promise<FundingOpportunity[]> {
diff --git a/src/dashboard/missionControl.ts b/src/dashboard/missionControl.ts
index b7cc2a083f748dc35dd013fe24edce703ae5e138..0b4b0a946d314e52604c7716e001fa4adbee3b6c
--- a/src/dashboard/missionControl.ts
+++ b/src/dashboard/missionControl.ts
@@ -1,4 +1,5 @@
 import { promises as fs } from 'fs';
+import { EventEmitter } from 'events';
 import { StrategicOrchestrator } from '../orchestrator/strategicOrchestrator.js';
 import { UsageAnalyticsAgent } from '../analytics/usageAnalytics.js';
 import { loadKnowledgeBase, toContext } from '../memory/memoryLoader.js';
@@ -28,6 +29,7 @@
   private monitor = new SystemMonitor();
   private fundingScanner = new FundingOpportunityScanner();
   private alerts: MissionControlStatus['alerts'] = [];
+  public events = new EventEmitter();
 
   async getStatus(): Promise<MissionControlStatus> {
     const timestamp = new Date().toISOString();
@@ -103,6 +105,7 @@
       message,
       timestamp: new Date().toISOString()
     });
+    this.events.emit('alert', { level, message });
     
     // Keep only last 50 alerts
     if (this.alerts.length > 50) {
@@ -112,13 +115,16 @@
 
   async executeTask(taskDescription: string, options: { dryRun?: boolean } = {}) {
     await this.addAlert('info', `Starting task: ${taskDescription}`);
+    this.events.emit('progress', { stage: 'task', message: 'Starting task…', percent: 5 });
     
     try {
       const result = await this.orchestrator.execute(taskDescription, options);
       await this.addAlert('info', `Task completed successfully: ${result.taskId}`);
+      this.events.emit('notify', { level: 'success', message: 'Task completed successfully' });
       return result;
     } catch (error) {
       await this.addAlert('error', `Task failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Task execution failed' });
       throw error;
     }
   }
@@ -126,11 +132,13 @@
   async scanFundingOpportunities() {
     await this.addAlert('info', 'Starting EU funding opportunity scan...');
     try {
-      const opportunities = await this.fundingScanner.scanAll();
+      const opportunities = await this.fundingScanner.scanAll((evt) => this.events.emit('progress', evt));
       await this.addAlert('info', `Found ${opportunities.length} funding opportunities`);
+      this.events.emit('notify', { level: 'success', message: `Scan complete — ${opportunities.length} found` });
       return opportunities;
     } catch (error) {
       await this.addAlert('error', `Funding scan failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Funding scan failed' });
       throw error;
     }
   }
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/dashboard.js b/src/dashboard/web/dashboard.js
index cd16d5697fb3c112440336e88cb1eb4ec5d3ffa1..b421d3d91ed7d5cdd241efb9579e90f4975060a4
--- a/src/dashboard/web/dashboard.js
+++ b/src/dashboard/web/dashboard.js
@@ -6,6 +6,8 @@
     this.initTime = new Date();
     this.theme = localStorage.getItem('eufm-theme') || 'light';
     this.sections = ['overview', 'funding', 'activity', 'analytics', 'settings'];
+    this.counts = { opportunities: 0, notes: 0, tools: 0 };
+    this.state = { scanning: false };
     this.init();
   }
 
@@ -21,6 +23,7 @@
     setInterval(() => this.updateTimestamp(), 1000);
     setInterval(() => this.updateUptime(), 1000);
     setInterval(() => this.refresh(), 30000);
+    this.onboardIfFirstRun();
   }
 
   cacheEls() {
@@ -31,6 +34,10 @@
     this.$globalSearch = document.getElementById('global-search');
     this.$searchPanel = document.getElementById('search-panel');
     this.$searchResults = document.getElementById('search-results');
+    this.$toast = document.getElementById('toast-container');
+    this.$scanBtn1 = document.getElementById('scan-funding-btn');
+    this.$scanBtn2 = document.getElementById('scan-funding-btn-2');
+    this.$scanHelp = document.getElementById('scan-help');
   }
 
   bindUI() {
@@ -142,6 +149,70 @@
     return res.text();
   }
 
+  // --- UI feedback helpers ---
+  showToast(message, type = 'info') {
+    if (!this.$toast) return;
+    const div = document.createElement('div');
+    div.className = `toast ${type}`;
+    div.innerHTML = `
+      <span class="material-symbols-rounded">${type === 'success' ? 'check_circle' : type === 'error' ? 'error' : 'info'}</span>
+      <div>${message}</div>
+    `;
+    this.$toast.appendChild(div);
+    setTimeout(() => div.remove(), 4000);
+  }
+
+  setLoadingBtn(btn, loading = true) {
+    if (!btn) return;
+    btn.classList.toggle('loading', !!loading);
+    btn.setAttribute('aria-busy', loading ? 'true' : 'false');
+    btn.disabled = !!loading;
+  }
+
+  insertInlineProgress(targetEl) {
+    if (!targetEl) return null;
+    let wrap = targetEl.parentElement?.querySelector('.progress-inline');
+    if (!wrap) {
+      wrap = document.createElement('div');
+      wrap.className = 'progress-inline';
+      wrap.innerHTML = `<div class="progress-bar"><div class="fill"></div></div><span class="label">Preparing…</span>`;
+      targetEl.parentElement?.appendChild(wrap);
+    }
+    return wrap;
+  }
+
+  setInlineProgress(wrap, percent, label) {
+    if (!wrap) return;
+    const fill = wrap.querySelector('.fill');
+    const lab = wrap.querySelector('.label');
+    if (fill) fill.style.width = `${Math.max(0, Math.min(100, percent))}%`;
+    if (lab && label) lab.textContent = label;
+  }
+
+  onboardIfFirstRun() {
+    const key = 'eufm-onboarded';
+    if (localStorage.getItem(key)) return;
+    const chip = document.getElementById('system-status-chip');
+    const scan = this.$scanBtn1 || this.$scanBtn2;
+    const hints = [];
+    const makeBubble = (target, title, hint) => {
+      if (!target) return;
+      const rect = target.getBoundingClientRect();
+      const b = document.createElement('div');
+      b.className = 'help-bubble';
+      b.style.top = `${window.scrollY + rect.top - 56}px`;
+      b.style.left = `${window.scrollX + rect.left}px`;
+      b.innerHTML = `<div class="title">${title}</div><div class="hint">${hint}</div><div class="help-arrow"></div>`;
+      document.body.appendChild(b);
+      hints.push(b);
+    };
+    makeBubble(chip, 'System Health', 'Live status of agents, uptime and time.');
+    makeBubble(scan, 'Scan for Funding', 'Click to scan EU portals for AI/tech calls.');
+    const dismiss = () => { hints.forEach(h => h.remove()); localStorage.setItem(key, '1'); };
+    setTimeout(dismiss, 6000);
+    document.addEventListener('click', dismiss, { once: true });
+  }
+
   async updateStatus() {
     const s = await this.api('/api/status');
     // Agents
@@ -162,6 +233,11 @@
     document.getElementById('progress-text').textContent = `${s.eufmProject.progress}% Complete`;
     document.getElementById('next-milestone').textContent = `Next: ${s.eufmProject.nextMilestone}`;
     document.getElementById('funding-count').textContent = s.eufmProject.fundingOpportunities;
+    // counts for search context
+    this.counts.opportunities = s.eufmProject.fundingOpportunities;
+    document.getElementById('global-search').placeholder = `Search ${this.counts.opportunities} opportunities, ${s.system.memory.notes} notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator`;
+    this.counts.notes = s.system.memory.notes;
+    this.counts.tools = 8;
     // Activity from alerts
     this.renderActivity(s.alerts, 'activity-list');
   }
@@ -184,6 +260,7 @@
         <div class="tool-status status-${t.status}">${t.status}</div>
       </div>
     `).join('');
+    this.counts.tools = Array.isArray(tools) ? tools.length : 0;
   }
 
   async updateSubscriptions() {
@@ -219,6 +296,13 @@
     renderOpps(document.getElementById('opportunity-list'));
     const el2 = document.getElementById('opportunity-list-2');
     if (el2) renderOpps(el2);
+    // Update last scan helper and smart notifications
+    const last = opps.reduce((acc, o) => Math.max(acc, new Date(o.scannedAt || 0).getTime()), 0);
+    if (this.$scanHelp) this.$scanHelp.textContent = last ? `Last scan: ${new Date(last).toLocaleString()} • Found ${opps.length} opportunities` : 'Last scan: —';
+    const closingSoon = opps.filter(o => o.status === 'closing_soon').slice(0, 1);
+    if (closingSoon.length) {
+      this.showToast(`🚨 Deadline approaching: ${closingSoon[0].title} closes soon`, 'info');
+    }
   }
 
   async updateAlerts() {
@@ -237,13 +321,27 @@
   }
 
   async scanFunding() {
-    this.addChatMessage('system', 'Starting EU funding opportunity scan...');
+    if (this.state.scanning) return;
+    this.state.scanning = true;
+    this.addChatMessage('system', 'Scanning EU portals…');
+    this.showToast('Scanning EU portals for opportunities…', 'info');
+    const btns = [this.$scanBtn1, this.$scanBtn2];
+    btns.forEach(b => this.setLoadingBtn(b, true));
+    const progressHost = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+    this.setInlineProgress(progressHost, 5, 'Contacting sources…');
     try {
-      await this.api('/api/scan-funding', { method: 'POST' });
-      this.addChatMessage('system', 'Scan complete. Updating opportunities...');
+      const res = await this.api('/api/scan-funding', { method: 'POST' });
+      this.addChatMessage('system', '✅ Scan complete - updating opportunities…');
+      this.showToast(`✅ ${res?.message || 'Scan complete'}${res?.found ? ` • ${res.found} opportunities` : ''}`, 'success');
       await this.updateOpportunities();
     } catch (e) {
       this.addChatMessage('system', 'Funding scan failed. Check logs.');
+      this.showToast('Funding scan failed', 'error');
+    }
+    finally {
+      btns.forEach(b => this.setLoadingBtn(b, false));
+      this.state.scanning = false;
+      if (progressHost) progressHost.remove();
     }
   }
 
@@ -253,15 +351,24 @@
     const task = document.getElementById('task-input').value.trim();
     if (!task) return;
     this.addChatMessage('user', `${dryRun ? 'Dry Run' : 'Execute'}: ${task}`);
+    this.showToast(`${dryRun ? 'Analyzing' : 'Executing'} task…`, 'info');
+    const execBtn = document.getElementById('submit-task-btn');
+    const dryBtn = document.getElementById('submit-task-dry-btn');
+    [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, true));
     try {
       await this.api('/api/execute', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ task, dryRun }) });
       this.addChatMessage('system', dryRun ? 'Task analyzed successfully.' : 'Task completed successfully.');
+      this.showToast(dryRun ? '✅ Analysis complete' : '✅ Task completed', 'success');
       document.getElementById('task-modal').classList.remove('open');
       document.getElementById('task-input').value = '';
       await this.refresh();
     } catch (e) {
       this.addChatMessage('system', 'Task execution failed.');
+      this.showToast('Task execution failed', 'error');
     }
+    finally {
+      [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, false));
+    }
   }
 
   addChatMessage(type, message) {
@@ -292,15 +399,31 @@
   }
 
   async search(q) {
-    if (!q || q.trim().length < 2) { this.$searchPanel.hidden = true; return; }
+    if (!q || q.trim().length < 2) {
+      // Suggestions
+      this.$searchPanel.hidden = false;
+      this.$searchResults.innerHTML = `
+        <div class="search-item">
+          <div class="type">Suggestions</div>
+          <div class="title">Searching ${this.counts.opportunities} opportunities, ${this.counts.notes} notes, ${this.counts.tools} tools</div>
+          <div class="snippet">Try: <code>AI funding</code>, <code>Horizon Europe</code>, <code>EIC Accelerator</code></div>
+        </div>
+      `;
+      return;
+    }
     try {
       const results = await this.api(`/api/search?q=${encodeURIComponent(q)}`);
       this.$searchPanel.hidden = false;
+      const hi = (text) => {
+        if (!text) return '';
+        const re = new RegExp(`(${q.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&')})`, 'ig');
+        return String(text).replace(re, '<mark>$1</mark>');
+      };
       this.$searchResults.innerHTML = results.map(r => `
         <div class="search-item">
           <div class="type">${r.type}</div>
-          <div class="title">${r.title}</div>
-          <div class="snippet">${r.snippet || ''}</div>
+          <div class="title">${hi(r.title)}</div>
+          <div class="snippet">${hi(r.snippet || '')}</div>
         </div>
       `).join('');
     } catch {
@@ -327,6 +450,12 @@
           const msg = JSON.parse(evt.data);
           if (msg.type === 'status_update') { this.applyStatus(msg.data); }
           if (msg.type === 'funding_opportunities') { this.updateOpportunities(); }
+          if (msg.type === 'activity') { this.addChatMessage('system', msg.message); }
+          if (msg.type === 'progress' && this.state.scanning) {
+            const host = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+            if (msg.percent != null) this.setInlineProgress(host, msg.percent, msg.message || '');
+          }
+          if (msg.type === 'notify') { this.showToast(msg.message, msg.level || 'info'); }
         } catch {}
       };
     } catch {}
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..a198345f17ddc65bfab84345163aef7be07c8efc
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>
@@ -222,7 +223,7 @@
               <span class="material-symbols-rounded">work</span>
               <h3>Live Opportunities</h3>
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
@@ -279,10 +280,11 @@
             </label>
           </div>
           <div class="row">
-            <button class="btn" id="export-json-btn">
+            <button class="btn" id="export-json-btn" title="Download a JSON snapshot of system status">
               <span class="material-symbols-rounded">download</span>
               <span>Export status JSON</span>
             </button>
+            <small class="meta">Includes agents, costs, memory, alerts and project status</small>
           </div>
         </div>
       </section>
@@ -295,6 +297,7 @@
       <button class="close" aria-label="Close" tabindex="0">×</button>
       <h3 id="task-title">Execute Task</h3>
       <textarea id="task-input" placeholder="Describe the task you want to execute..." aria-label="Task description"></textarea>
+      <div class="meta">Examples: analyze funding opportunities; generate proposal outline; summarize system status</div>
       <div class="modal-actions">
         <button class="btn primary" id="submit-task-btn">Execute</button>
         <button class="btn" id="submit-task-dry-btn">Dry Run</button>
@@ -307,6 +310,9 @@
     <div class="search-results" id="search-results" role="listbox" aria-label="Search results"></div>
   </div>
 
+  <!-- Toasts -->
+  <div id="toast-container" class="toast-container" aria-live="polite"></div>
+
   <script src="dashboard.js"></script>
 </body>
 </html>

[2025-09-05T17:29:02] tokens used: 956
[2025-09-05T17:29:02] turn diff:
diff --git a/src/dashboard/dashboardServer.ts b/src/dashboard/dashboardServer.ts
index 848b8052607fea10292180ae5937190cada95a36..2f64c63a81231cee4042d957e425c63255be3ee9
--- a/src/dashboard/dashboardServer.ts
+++ b/src/dashboard/dashboardServer.ts
@@ -49,7 +49,7 @@
     this.app.post('/api/scan-funding', async (req, res) => {
       try {
         const opportunities = await this.missionControl.scanFundingOpportunities();
-        res.json(opportunities);
+        res.json({ message: 'Funding scan complete', found: opportunities.length });
       } catch (error) {
         res.status(500).json({ error: 'Funding scan failed' });
       }
@@ -175,6 +175,20 @@
       });
     });
 
+    // Relay mission control events to all clients
+    this.missionControl.events.on('alert', (evt) => {
+      const payload = JSON.stringify({ type: 'activity', message: `[${evt.level.toUpperCase()}] ${evt.message}` });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('progress', (evt) => {
+      const payload = JSON.stringify({ type: 'progress', ...evt });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('notify', (evt) => {
+      const payload = JSON.stringify({ type: 'notify', level: evt.level, message: evt.message });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+
     // Broadcast status updates every 30 seconds
     setInterval(() => {
       this.broadcastStatusUpdate();
diff --git a/src/dashboard/fundingOpportunityScanner.ts b/src/dashboard/fundingOpportunityScanner.ts
index ec1230aa52b2a4f6355a228632f4cbaed0a3799b..c24b9505f3661908fdcbfcbb0b517e8fb43719df
--- a/src/dashboard/fundingOpportunityScanner.ts
+++ b/src/dashboard/fundingOpportunityScanner.ts
@@ -28,7 +28,7 @@
     await fs.mkdir(this.baseDir, { recursive: true }).catch(() => {});
   }
 
-  async scanAll(): Promise<FundingOpportunity[]> {
+  async scanAll(progressCb?: (evt: { stage: string; message: string; percent?: number }) => void): Promise<FundingOpportunity[]> {
     const sources = [
       'Horizon Europe',
       'Digital Europe Programme', 
@@ -38,11 +38,15 @@
     ];
 
     const opportunities: FundingOpportunity[] = [];
-    
-    for (const source of sources) {
+    const total = sources.length;
+    progressCb?.({ stage: 'start', message: 'Starting funding scan…', percent: 2 });
+    for (let i = 0; i < sources.length; i++) {
+      const source = sources[i];
       try {
+        progressCb?.({ stage: 'source', message: `Scanning ${source}…`, percent: Math.round(((i) / total) * 100) });
         const sourceOpportunities = await this.scanSource(source);
         opportunities.push(...sourceOpportunities);
+        progressCb?.({ stage: 'parsed', message: `Analyzing ${source} results…`, percent: Math.round(((i + 0.6) / total) * 100) });
       } catch (error) {
         console.warn(`Failed to scan ${source}:`, error);
       }
@@ -50,8 +54,11 @@
 
     // Save results
     await this.saveOpportunities(opportunities);
+    progressCb?.({ stage: 'save', message: 'Saving results…', percent: 96 });
     
-    return opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    const sorted = opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    progressCb?.({ stage: 'done', message: `Scan complete — ${sorted.length} opportunities found`, percent: 100 });
+    return sorted;
   }
 
   private async scanSource(program: string): Promise<FundingOpportunity[]> {
diff --git a/src/dashboard/missionControl.ts b/src/dashboard/missionControl.ts
index b7cc2a083f748dc35dd013fe24edce703ae5e138..0b4b0a946d314e52604c7716e001fa4adbee3b6c
--- a/src/dashboard/missionControl.ts
+++ b/src/dashboard/missionControl.ts
@@ -1,4 +1,5 @@
 import { promises as fs } from 'fs';
+import { EventEmitter } from 'events';
 import { StrategicOrchestrator } from '../orchestrator/strategicOrchestrator.js';
 import { UsageAnalyticsAgent } from '../analytics/usageAnalytics.js';
 import { loadKnowledgeBase, toContext } from '../memory/memoryLoader.js';
@@ -28,6 +29,7 @@
   private monitor = new SystemMonitor();
   private fundingScanner = new FundingOpportunityScanner();
   private alerts: MissionControlStatus['alerts'] = [];
+  public events = new EventEmitter();
 
   async getStatus(): Promise<MissionControlStatus> {
     const timestamp = new Date().toISOString();
@@ -103,6 +105,7 @@
       message,
       timestamp: new Date().toISOString()
     });
+    this.events.emit('alert', { level, message });
     
     // Keep only last 50 alerts
     if (this.alerts.length > 50) {
@@ -112,13 +115,16 @@
 
   async executeTask(taskDescription: string, options: { dryRun?: boolean } = {}) {
     await this.addAlert('info', `Starting task: ${taskDescription}`);
+    this.events.emit('progress', { stage: 'task', message: 'Starting task…', percent: 5 });
     
     try {
       const result = await this.orchestrator.execute(taskDescription, options);
       await this.addAlert('info', `Task completed successfully: ${result.taskId}`);
+      this.events.emit('notify', { level: 'success', message: 'Task completed successfully' });
       return result;
     } catch (error) {
       await this.addAlert('error', `Task failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Task execution failed' });
       throw error;
     }
   }
@@ -126,11 +132,13 @@
   async scanFundingOpportunities() {
     await this.addAlert('info', 'Starting EU funding opportunity scan...');
     try {
-      const opportunities = await this.fundingScanner.scanAll();
+      const opportunities = await this.fundingScanner.scanAll((evt) => this.events.emit('progress', evt));
       await this.addAlert('info', `Found ${opportunities.length} funding opportunities`);
+      this.events.emit('notify', { level: 'success', message: `Scan complete — ${opportunities.length} found` });
       return opportunities;
     } catch (error) {
       await this.addAlert('error', `Funding scan failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Funding scan failed' });
       throw error;
     }
   }
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/dashboard.js b/src/dashboard/web/dashboard.js
index cd16d5697fb3c112440336e88cb1eb4ec5d3ffa1..b421d3d91ed7d5cdd241efb9579e90f4975060a4
--- a/src/dashboard/web/dashboard.js
+++ b/src/dashboard/web/dashboard.js
@@ -6,6 +6,8 @@
     this.initTime = new Date();
     this.theme = localStorage.getItem('eufm-theme') || 'light';
     this.sections = ['overview', 'funding', 'activity', 'analytics', 'settings'];
+    this.counts = { opportunities: 0, notes: 0, tools: 0 };
+    this.state = { scanning: false };
     this.init();
   }
 
@@ -21,6 +23,7 @@
     setInterval(() => this.updateTimestamp(), 1000);
     setInterval(() => this.updateUptime(), 1000);
     setInterval(() => this.refresh(), 30000);
+    this.onboardIfFirstRun();
   }
 
   cacheEls() {
@@ -31,6 +34,10 @@
     this.$globalSearch = document.getElementById('global-search');
     this.$searchPanel = document.getElementById('search-panel');
     this.$searchResults = document.getElementById('search-results');
+    this.$toast = document.getElementById('toast-container');
+    this.$scanBtn1 = document.getElementById('scan-funding-btn');
+    this.$scanBtn2 = document.getElementById('scan-funding-btn-2');
+    this.$scanHelp = document.getElementById('scan-help');
   }
 
   bindUI() {
@@ -142,6 +149,70 @@
     return res.text();
   }
 
+  // --- UI feedback helpers ---
+  showToast(message, type = 'info') {
+    if (!this.$toast) return;
+    const div = document.createElement('div');
+    div.className = `toast ${type}`;
+    div.innerHTML = `
+      <span class="material-symbols-rounded">${type === 'success' ? 'check_circle' : type === 'error' ? 'error' : 'info'}</span>
+      <div>${message}</div>
+    `;
+    this.$toast.appendChild(div);
+    setTimeout(() => div.remove(), 4000);
+  }
+
+  setLoadingBtn(btn, loading = true) {
+    if (!btn) return;
+    btn.classList.toggle('loading', !!loading);
+    btn.setAttribute('aria-busy', loading ? 'true' : 'false');
+    btn.disabled = !!loading;
+  }
+
+  insertInlineProgress(targetEl) {
+    if (!targetEl) return null;
+    let wrap = targetEl.parentElement?.querySelector('.progress-inline');
+    if (!wrap) {
+      wrap = document.createElement('div');
+      wrap.className = 'progress-inline';
+      wrap.innerHTML = `<div class="progress-bar"><div class="fill"></div></div><span class="label">Preparing…</span>`;
+      targetEl.parentElement?.appendChild(wrap);
+    }
+    return wrap;
+  }
+
+  setInlineProgress(wrap, percent, label) {
+    if (!wrap) return;
+    const fill = wrap.querySelector('.fill');
+    const lab = wrap.querySelector('.label');
+    if (fill) fill.style.width = `${Math.max(0, Math.min(100, percent))}%`;
+    if (lab && label) lab.textContent = label;
+  }
+
+  onboardIfFirstRun() {
+    const key = 'eufm-onboarded';
+    if (localStorage.getItem(key)) return;
+    const chip = document.getElementById('system-status-chip');
+    const scan = this.$scanBtn1 || this.$scanBtn2;
+    const hints = [];
+    const makeBubble = (target, title, hint) => {
+      if (!target) return;
+      const rect = target.getBoundingClientRect();
+      const b = document.createElement('div');
+      b.className = 'help-bubble';
+      b.style.top = `${window.scrollY + rect.top - 56}px`;
+      b.style.left = `${window.scrollX + rect.left}px`;
+      b.innerHTML = `<div class="title">${title}</div><div class="hint">${hint}</div><div class="help-arrow"></div>`;
+      document.body.appendChild(b);
+      hints.push(b);
+    };
+    makeBubble(chip, 'System Health', 'Live status of agents, uptime and time.');
+    makeBubble(scan, 'Scan for Funding', 'Click to scan EU portals for AI/tech calls.');
+    const dismiss = () => { hints.forEach(h => h.remove()); localStorage.setItem(key, '1'); };
+    setTimeout(dismiss, 6000);
+    document.addEventListener('click', dismiss, { once: true });
+  }
+
   async updateStatus() {
     const s = await this.api('/api/status');
     // Agents
@@ -162,6 +233,11 @@
     document.getElementById('progress-text').textContent = `${s.eufmProject.progress}% Complete`;
     document.getElementById('next-milestone').textContent = `Next: ${s.eufmProject.nextMilestone}`;
     document.getElementById('funding-count').textContent = s.eufmProject.fundingOpportunities;
+    // counts for search context
+    this.counts.opportunities = s.eufmProject.fundingOpportunities;
+    document.getElementById('global-search').placeholder = `Search ${this.counts.opportunities} opportunities, ${s.system.memory.notes} notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator`;
+    this.counts.notes = s.system.memory.notes;
+    this.counts.tools = 8;
     // Activity from alerts
     this.renderActivity(s.alerts, 'activity-list');
   }
@@ -184,6 +260,7 @@
         <div class="tool-status status-${t.status}">${t.status}</div>
       </div>
     `).join('');
+    this.counts.tools = Array.isArray(tools) ? tools.length : 0;
   }
 
   async updateSubscriptions() {
@@ -219,6 +296,13 @@
     renderOpps(document.getElementById('opportunity-list'));
     const el2 = document.getElementById('opportunity-list-2');
     if (el2) renderOpps(el2);
+    // Update last scan helper and smart notifications
+    const last = opps.reduce((acc, o) => Math.max(acc, new Date(o.scannedAt || 0).getTime()), 0);
+    if (this.$scanHelp) this.$scanHelp.textContent = last ? `Last scan: ${new Date(last).toLocaleString()} • Found ${opps.length} opportunities` : 'Last scan: —';
+    const closingSoon = opps.filter(o => o.status === 'closing_soon').slice(0, 1);
+    if (closingSoon.length) {
+      this.showToast(`🚨 Deadline approaching: ${closingSoon[0].title} closes soon`, 'info');
+    }
   }
 
   async updateAlerts() {
@@ -237,13 +321,27 @@
   }
 
   async scanFunding() {
-    this.addChatMessage('system', 'Starting EU funding opportunity scan...');
+    if (this.state.scanning) return;
+    this.state.scanning = true;
+    this.addChatMessage('system', 'Scanning EU portals…');
+    this.showToast('Scanning EU portals for opportunities…', 'info');
+    const btns = [this.$scanBtn1, this.$scanBtn2];
+    btns.forEach(b => this.setLoadingBtn(b, true));
+    const progressHost = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+    this.setInlineProgress(progressHost, 5, 'Contacting sources…');
     try {
-      await this.api('/api/scan-funding', { method: 'POST' });
-      this.addChatMessage('system', 'Scan complete. Updating opportunities...');
+      const res = await this.api('/api/scan-funding', { method: 'POST' });
+      this.addChatMessage('system', '✅ Scan complete - updating opportunities…');
+      this.showToast(`✅ ${res?.message || 'Scan complete'}${res?.found ? ` • ${res.found} opportunities` : ''}`, 'success');
       await this.updateOpportunities();
     } catch (e) {
       this.addChatMessage('system', 'Funding scan failed. Check logs.');
+      this.showToast('Funding scan failed', 'error');
+    }
+    finally {
+      btns.forEach(b => this.setLoadingBtn(b, false));
+      this.state.scanning = false;
+      if (progressHost) progressHost.remove();
     }
   }
 
@@ -253,15 +351,24 @@
     const task = document.getElementById('task-input').value.trim();
     if (!task) return;
     this.addChatMessage('user', `${dryRun ? 'Dry Run' : 'Execute'}: ${task}`);
+    this.showToast(`${dryRun ? 'Analyzing' : 'Executing'} task…`, 'info');
+    const execBtn = document.getElementById('submit-task-btn');
+    const dryBtn = document.getElementById('submit-task-dry-btn');
+    [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, true));
     try {
       await this.api('/api/execute', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ task, dryRun }) });
       this.addChatMessage('system', dryRun ? 'Task analyzed successfully.' : 'Task completed successfully.');
+      this.showToast(dryRun ? '✅ Analysis complete' : '✅ Task completed', 'success');
       document.getElementById('task-modal').classList.remove('open');
       document.getElementById('task-input').value = '';
       await this.refresh();
     } catch (e) {
       this.addChatMessage('system', 'Task execution failed.');
+      this.showToast('Task execution failed', 'error');
     }
+    finally {
+      [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, false));
+    }
   }
 
   addChatMessage(type, message) {
@@ -292,15 +399,31 @@
   }
 
   async search(q) {
-    if (!q || q.trim().length < 2) { this.$searchPanel.hidden = true; return; }
+    if (!q || q.trim().length < 2) {
+      // Suggestions
+      this.$searchPanel.hidden = false;
+      this.$searchResults.innerHTML = `
+        <div class="search-item">
+          <div class="type">Suggestions</div>
+          <div class="title">Searching ${this.counts.opportunities} opportunities, ${this.counts.notes} notes, ${this.counts.tools} tools</div>
+          <div class="snippet">Try: <code>AI funding</code>, <code>Horizon Europe</code>, <code>EIC Accelerator</code></div>
+        </div>
+      `;
+      return;
+    }
     try {
       const results = await this.api(`/api/search?q=${encodeURIComponent(q)}`);
       this.$searchPanel.hidden = false;
+      const hi = (text) => {
+        if (!text) return '';
+        const re = new RegExp(`(${q.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&')})`, 'ig');
+        return String(text).replace(re, '<mark>$1</mark>');
+      };
       this.$searchResults.innerHTML = results.map(r => `
         <div class="search-item">
           <div class="type">${r.type}</div>
-          <div class="title">${r.title}</div>
-          <div class="snippet">${r.snippet || ''}</div>
+          <div class="title">${hi(r.title)}</div>
+          <div class="snippet">${hi(r.snippet || '')}</div>
         </div>
       `).join('');
     } catch {
@@ -327,6 +450,12 @@
           const msg = JSON.parse(evt.data);
           if (msg.type === 'status_update') { this.applyStatus(msg.data); }
           if (msg.type === 'funding_opportunities') { this.updateOpportunities(); }
+          if (msg.type === 'activity') { this.addChatMessage('system', msg.message); }
+          if (msg.type === 'progress' && this.state.scanning) {
+            const host = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+            if (msg.percent != null) this.setInlineProgress(host, msg.percent, msg.message || '');
+          }
+          if (msg.type === 'notify') { this.showToast(msg.message, msg.level || 'info'); }
         } catch {}
       };
     } catch {}
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..a198345f17ddc65bfab84345163aef7be07c8efc
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>
@@ -222,7 +223,7 @@
               <span class="material-symbols-rounded">work</span>
               <h3>Live Opportunities</h3>
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
@@ -279,10 +280,11 @@
             </label>
           </div>
           <div class="row">
-            <button class="btn" id="export-json-btn">
+            <button class="btn" id="export-json-btn" title="Download a JSON snapshot of system status">
               <span class="material-symbols-rounded">download</span>
               <span>Export status JSON</span>
             </button>
+            <small class="meta">Includes agents, costs, memory, alerts and project status</small>
           </div>
         </div>
       </section>
@@ -295,6 +297,7 @@
       <button class="close" aria-label="Close" tabindex="0">×</button>
       <h3 id="task-title">Execute Task</h3>
       <textarea id="task-input" placeholder="Describe the task you want to execute..." aria-label="Task description"></textarea>
+      <div class="meta">Examples: analyze funding opportunities; generate proposal outline; summarize system status</div>
       <div class="modal-actions">
         <button class="btn primary" id="submit-task-btn">Execute</button>
         <button class="btn" id="submit-task-dry-btn">Dry Run</button>
@@ -307,6 +310,9 @@
     <div class="search-results" id="search-results" role="listbox" aria-label="Search results"></div>
   </div>
 
+  <!-- Toasts -->
+  <div id="toast-container" class="toast-container" aria-live="polite"></div>
+
   <script src="dashboard.js"></script>
 </body>
 </html>


[2025-09-05T17:29:17] thinking

**Updating system features**

I'm considering adding status indicators to show what's active or working, like a loading state for buttons and improving the activity feed with WebSocket. There's also the idea of incorporating Smart Defaults by pre-filling searches with useful queries, like "AI funding." I think we should set a placeholder but avoid forcing a pre-filled value. Maybe on the first run, we could set the input value to ensure a helpful user experience. I'll also update the onboarding chat messages in dashboard.js.
[2025-09-05T17:29:34] apply_patch auto_approved=true:
M /Users/panda/Desktop/EUFM/src/dashboard/web/dashboard.js
@@ -210,2 +210,5 @@
     makeBubble(scan, 'Scan for Funding', 'Click to scan EU portals for AI/tech calls.');
+    // Seed helpful chat and search suggestion
+    this.addChatMessage('system', 'Tip: Use the search bar to quickly find opportunities, notes, or alerts.');
+    if (this.$globalSearch && !this.$globalSearch.value) this.$globalSearch.value = 'AI funding';
     const dismiss = () => { hints.forEach(h => h.remove()); localStorage.setItem(key, '1'); };
[2025-09-05T17:29:34] apply_patch(auto_approved=true) exited 0 in 551ms:
Success. Updated the following files:
M src/dashboard/web/dashboard.js
[2025-09-05T17:29:34] turn diff:
diff --git a/src/dashboard/dashboardServer.ts b/src/dashboard/dashboardServer.ts
index 848b8052607fea10292180ae5937190cada95a36..2f64c63a81231cee4042d957e425c63255be3ee9
--- a/src/dashboard/dashboardServer.ts
+++ b/src/dashboard/dashboardServer.ts
@@ -49,7 +49,7 @@
     this.app.post('/api/scan-funding', async (req, res) => {
       try {
         const opportunities = await this.missionControl.scanFundingOpportunities();
-        res.json(opportunities);
+        res.json({ message: 'Funding scan complete', found: opportunities.length });
       } catch (error) {
         res.status(500).json({ error: 'Funding scan failed' });
       }
@@ -175,6 +175,20 @@
       });
     });
 
+    // Relay mission control events to all clients
+    this.missionControl.events.on('alert', (evt) => {
+      const payload = JSON.stringify({ type: 'activity', message: `[${evt.level.toUpperCase()}] ${evt.message}` });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('progress', (evt) => {
+      const payload = JSON.stringify({ type: 'progress', ...evt });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('notify', (evt) => {
+      const payload = JSON.stringify({ type: 'notify', level: evt.level, message: evt.message });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+
     // Broadcast status updates every 30 seconds
     setInterval(() => {
       this.broadcastStatusUpdate();
diff --git a/src/dashboard/fundingOpportunityScanner.ts b/src/dashboard/fundingOpportunityScanner.ts
index ec1230aa52b2a4f6355a228632f4cbaed0a3799b..c24b9505f3661908fdcbfcbb0b517e8fb43719df
--- a/src/dashboard/fundingOpportunityScanner.ts
+++ b/src/dashboard/fundingOpportunityScanner.ts
@@ -28,7 +28,7 @@
     await fs.mkdir(this.baseDir, { recursive: true }).catch(() => {});
   }
 
-  async scanAll(): Promise<FundingOpportunity[]> {
+  async scanAll(progressCb?: (evt: { stage: string; message: string; percent?: number }) => void): Promise<FundingOpportunity[]> {
     const sources = [
       'Horizon Europe',
       'Digital Europe Programme', 
@@ -38,11 +38,15 @@
     ];
 
     const opportunities: FundingOpportunity[] = [];
-    
-    for (const source of sources) {
+    const total = sources.length;
+    progressCb?.({ stage: 'start', message: 'Starting funding scan…', percent: 2 });
+    for (let i = 0; i < sources.length; i++) {
+      const source = sources[i];
       try {
+        progressCb?.({ stage: 'source', message: `Scanning ${source}…`, percent: Math.round(((i) / total) * 100) });
         const sourceOpportunities = await this.scanSource(source);
         opportunities.push(...sourceOpportunities);
+        progressCb?.({ stage: 'parsed', message: `Analyzing ${source} results…`, percent: Math.round(((i + 0.6) / total) * 100) });
       } catch (error) {
         console.warn(`Failed to scan ${source}:`, error);
       }
@@ -50,8 +54,11 @@
 
     // Save results
     await this.saveOpportunities(opportunities);
+    progressCb?.({ stage: 'save', message: 'Saving results…', percent: 96 });
     
-    return opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    const sorted = opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    progressCb?.({ stage: 'done', message: `Scan complete — ${sorted.length} opportunities found`, percent: 100 });
+    return sorted;
   }
 
   private async scanSource(program: string): Promise<FundingOpportunity[]> {
diff --git a/src/dashboard/missionControl.ts b/src/dashboard/missionControl.ts
index b7cc2a083f748dc35dd013fe24edce703ae5e138..0b4b0a946d314e52604c7716e001fa4adbee3b6c
--- a/src/dashboard/missionControl.ts
+++ b/src/dashboard/missionControl.ts
@@ -1,4 +1,5 @@
 import { promises as fs } from 'fs';
+import { EventEmitter } from 'events';
 import { StrategicOrchestrator } from '../orchestrator/strategicOrchestrator.js';
 import { UsageAnalyticsAgent } from '../analytics/usageAnalytics.js';
 import { loadKnowledgeBase, toContext } from '../memory/memoryLoader.js';
@@ -28,6 +29,7 @@
   private monitor = new SystemMonitor();
   private fundingScanner = new FundingOpportunityScanner();
   private alerts: MissionControlStatus['alerts'] = [];
+  public events = new EventEmitter();
 
   async getStatus(): Promise<MissionControlStatus> {
     const timestamp = new Date().toISOString();
@@ -103,6 +105,7 @@
       message,
       timestamp: new Date().toISOString()
     });
+    this.events.emit('alert', { level, message });
     
     // Keep only last 50 alerts
     if (this.alerts.length > 50) {
@@ -112,13 +115,16 @@
 
   async executeTask(taskDescription: string, options: { dryRun?: boolean } = {}) {
     await this.addAlert('info', `Starting task: ${taskDescription}`);
+    this.events.emit('progress', { stage: 'task', message: 'Starting task…', percent: 5 });
     
     try {
       const result = await this.orchestrator.execute(taskDescription, options);
       await this.addAlert('info', `Task completed successfully: ${result.taskId}`);
+      this.events.emit('notify', { level: 'success', message: 'Task completed successfully' });
       return result;
     } catch (error) {
       await this.addAlert('error', `Task failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Task execution failed' });
       throw error;
     }
   }
@@ -126,11 +132,13 @@
   async scanFundingOpportunities() {
     await this.addAlert('info', 'Starting EU funding opportunity scan...');
     try {
-      const opportunities = await this.fundingScanner.scanAll();
+      const opportunities = await this.fundingScanner.scanAll((evt) => this.events.emit('progress', evt));
       await this.addAlert('info', `Found ${opportunities.length} funding opportunities`);
+      this.events.emit('notify', { level: 'success', message: `Scan complete — ${opportunities.length} found` });
       return opportunities;
     } catch (error) {
       await this.addAlert('error', `Funding scan failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Funding scan failed' });
       throw error;
     }
   }
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/dashboard.js b/src/dashboard/web/dashboard.js
index cd16d5697fb3c112440336e88cb1eb4ec5d3ffa1..63def23da4804c329eca52369d7725bb41e6d267
--- a/src/dashboard/web/dashboard.js
+++ b/src/dashboard/web/dashboard.js
@@ -6,6 +6,8 @@
     this.initTime = new Date();
     this.theme = localStorage.getItem('eufm-theme') || 'light';
     this.sections = ['overview', 'funding', 'activity', 'analytics', 'settings'];
+    this.counts = { opportunities: 0, notes: 0, tools: 0 };
+    this.state = { scanning: false };
     this.init();
   }
 
@@ -21,6 +23,7 @@
     setInterval(() => this.updateTimestamp(), 1000);
     setInterval(() => this.updateUptime(), 1000);
     setInterval(() => this.refresh(), 30000);
+    this.onboardIfFirstRun();
   }
 
   cacheEls() {
@@ -31,6 +34,10 @@
     this.$globalSearch = document.getElementById('global-search');
     this.$searchPanel = document.getElementById('search-panel');
     this.$searchResults = document.getElementById('search-results');
+    this.$toast = document.getElementById('toast-container');
+    this.$scanBtn1 = document.getElementById('scan-funding-btn');
+    this.$scanBtn2 = document.getElementById('scan-funding-btn-2');
+    this.$scanHelp = document.getElementById('scan-help');
   }
 
   bindUI() {
@@ -142,6 +149,73 @@
     return res.text();
   }
 
+  // --- UI feedback helpers ---
+  showToast(message, type = 'info') {
+    if (!this.$toast) return;
+    const div = document.createElement('div');
+    div.className = `toast ${type}`;
+    div.innerHTML = `
+      <span class="material-symbols-rounded">${type === 'success' ? 'check_circle' : type === 'error' ? 'error' : 'info'}</span>
+      <div>${message}</div>
+    `;
+    this.$toast.appendChild(div);
+    setTimeout(() => div.remove(), 4000);
+  }
+
+  setLoadingBtn(btn, loading = true) {
+    if (!btn) return;
+    btn.classList.toggle('loading', !!loading);
+    btn.setAttribute('aria-busy', loading ? 'true' : 'false');
+    btn.disabled = !!loading;
+  }
+
+  insertInlineProgress(targetEl) {
+    if (!targetEl) return null;
+    let wrap = targetEl.parentElement?.querySelector('.progress-inline');
+    if (!wrap) {
+      wrap = document.createElement('div');
+      wrap.className = 'progress-inline';
+      wrap.innerHTML = `<div class="progress-bar"><div class="fill"></div></div><span class="label">Preparing…</span>`;
+      targetEl.parentElement?.appendChild(wrap);
+    }
+    return wrap;
+  }
+
+  setInlineProgress(wrap, percent, label) {
+    if (!wrap) return;
+    const fill = wrap.querySelector('.fill');
+    const lab = wrap.querySelector('.label');
+    if (fill) fill.style.width = `${Math.max(0, Math.min(100, percent))}%`;
+    if (lab && label) lab.textContent = label;
+  }
+
+  onboardIfFirstRun() {
+    const key = 'eufm-onboarded';
+    if (localStorage.getItem(key)) return;
+    const chip = document.getElementById('system-status-chip');
+    const scan = this.$scanBtn1 || this.$scanBtn2;
+    const hints = [];
+    const makeBubble = (target, title, hint) => {
+      if (!target) return;
+      const rect = target.getBoundingClientRect();
+      const b = document.createElement('div');
+      b.className = 'help-bubble';
+      b.style.top = `${window.scrollY + rect.top - 56}px`;
+      b.style.left = `${window.scrollX + rect.left}px`;
+      b.innerHTML = `<div class="title">${title}</div><div class="hint">${hint}</div><div class="help-arrow"></div>`;
+      document.body.appendChild(b);
+      hints.push(b);
+    };
+    makeBubble(chip, 'System Health', 'Live status of agents, uptime and time.');
+    makeBubble(scan, 'Scan for Funding', 'Click to scan EU portals for AI/tech calls.');
+    // Seed helpful chat and search suggestion
+    this.addChatMessage('system', 'Tip: Use the search bar to quickly find opportunities, notes, or alerts.');
+    if (this.$globalSearch && !this.$globalSearch.value) this.$globalSearch.value = 'AI funding';
+    const dismiss = () => { hints.forEach(h => h.remove()); localStorage.setItem(key, '1'); };
+    setTimeout(dismiss, 6000);
+    document.addEventListener('click', dismiss, { once: true });
+  }
+
   async updateStatus() {
     const s = await this.api('/api/status');
     // Agents
@@ -162,6 +236,11 @@
     document.getElementById('progress-text').textContent = `${s.eufmProject.progress}% Complete`;
     document.getElementById('next-milestone').textContent = `Next: ${s.eufmProject.nextMilestone}`;
     document.getElementById('funding-count').textContent = s.eufmProject.fundingOpportunities;
+    // counts for search context
+    this.counts.opportunities = s.eufmProject.fundingOpportunities;
+    document.getElementById('global-search').placeholder = `Search ${this.counts.opportunities} opportunities, ${s.system.memory.notes} notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator`;
+    this.counts.notes = s.system.memory.notes;
+    this.counts.tools = 8;
     // Activity from alerts
     this.renderActivity(s.alerts, 'activity-list');
   }
@@ -184,6 +263,7 @@
         <div class="tool-status status-${t.status}">${t.status}</div>
       </div>
     `).join('');
+    this.counts.tools = Array.isArray(tools) ? tools.length : 0;
   }
 
   async updateSubscriptions() {
@@ -219,6 +299,13 @@
     renderOpps(document.getElementById('opportunity-list'));
     const el2 = document.getElementById('opportunity-list-2');
     if (el2) renderOpps(el2);
+    // Update last scan helper and smart notifications
+    const last = opps.reduce((acc, o) => Math.max(acc, new Date(o.scannedAt || 0).getTime()), 0);
+    if (this.$scanHelp) this.$scanHelp.textContent = last ? `Last scan: ${new Date(last).toLocaleString()} • Found ${opps.length} opportunities` : 'Last scan: —';
+    const closingSoon = opps.filter(o => o.status === 'closing_soon').slice(0, 1);
+    if (closingSoon.length) {
+      this.showToast(`🚨 Deadline approaching: ${closingSoon[0].title} closes soon`, 'info');
+    }
   }
 
   async updateAlerts() {
@@ -237,14 +324,28 @@
   }
 
   async scanFunding() {
-    this.addChatMessage('system', 'Starting EU funding opportunity scan...');
+    if (this.state.scanning) return;
+    this.state.scanning = true;
+    this.addChatMessage('system', 'Scanning EU portals…');
+    this.showToast('Scanning EU portals for opportunities…', 'info');
+    const btns = [this.$scanBtn1, this.$scanBtn2];
+    btns.forEach(b => this.setLoadingBtn(b, true));
+    const progressHost = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+    this.setInlineProgress(progressHost, 5, 'Contacting sources…');
     try {
-      await this.api('/api/scan-funding', { method: 'POST' });
-      this.addChatMessage('system', 'Scan complete. Updating opportunities...');
+      const res = await this.api('/api/scan-funding', { method: 'POST' });
+      this.addChatMessage('system', '✅ Scan complete - updating opportunities…');
+      this.showToast(`✅ ${res?.message || 'Scan complete'}${res?.found ? ` • ${res.found} opportunities` : ''}`, 'success');
       await this.updateOpportunities();
     } catch (e) {
       this.addChatMessage('system', 'Funding scan failed. Check logs.');
+      this.showToast('Funding scan failed', 'error');
     }
+    finally {
+      btns.forEach(b => this.setLoadingBtn(b, false));
+      this.state.scanning = false;
+      if (progressHost) progressHost.remove();
+    }
   }
 
   openTaskModal() { document.getElementById('task-modal').classList.add('open'); }
@@ -253,15 +354,24 @@
     const task = document.getElementById('task-input').value.trim();
     if (!task) return;
     this.addChatMessage('user', `${dryRun ? 'Dry Run' : 'Execute'}: ${task}`);
+    this.showToast(`${dryRun ? 'Analyzing' : 'Executing'} task…`, 'info');
+    const execBtn = document.getElementById('submit-task-btn');
+    const dryBtn = document.getElementById('submit-task-dry-btn');
+    [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, true));
     try {
       await this.api('/api/execute', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ task, dryRun }) });
       this.addChatMessage('system', dryRun ? 'Task analyzed successfully.' : 'Task completed successfully.');
+      this.showToast(dryRun ? '✅ Analysis complete' : '✅ Task completed', 'success');
       document.getElementById('task-modal').classList.remove('open');
       document.getElementById('task-input').value = '';
       await this.refresh();
     } catch (e) {
       this.addChatMessage('system', 'Task execution failed.');
+      this.showToast('Task execution failed', 'error');
     }
+    finally {
+      [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, false));
+    }
   }
 
   addChatMessage(type, message) {
@@ -292,15 +402,31 @@
   }
 
   async search(q) {
-    if (!q || q.trim().length < 2) { this.$searchPanel.hidden = true; return; }
+    if (!q || q.trim().length < 2) {
+      // Suggestions
+      this.$searchPanel.hidden = false;
+      this.$searchResults.innerHTML = `
+        <div class="search-item">
+          <div class="type">Suggestions</div>
+          <div class="title">Searching ${this.counts.opportunities} opportunities, ${this.counts.notes} notes, ${this.counts.tools} tools</div>
+          <div class="snippet">Try: <code>AI funding</code>, <code>Horizon Europe</code>, <code>EIC Accelerator</code></div>
+        </div>
+      `;
+      return;
+    }
     try {
       const results = await this.api(`/api/search?q=${encodeURIComponent(q)}`);
       this.$searchPanel.hidden = false;
+      const hi = (text) => {
+        if (!text) return '';
+        const re = new RegExp(`(${q.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&')})`, 'ig');
+        return String(text).replace(re, '<mark>$1</mark>');
+      };
       this.$searchResults.innerHTML = results.map(r => `
         <div class="search-item">
           <div class="type">${r.type}</div>
-          <div class="title">${r.title}</div>
-          <div class="snippet">${r.snippet || ''}</div>
+          <div class="title">${hi(r.title)}</div>
+          <div class="snippet">${hi(r.snippet || '')}</div>
         </div>
       `).join('');
     } catch {
@@ -327,6 +453,12 @@
           const msg = JSON.parse(evt.data);
           if (msg.type === 'status_update') { this.applyStatus(msg.data); }
           if (msg.type === 'funding_opportunities') { this.updateOpportunities(); }
+          if (msg.type === 'activity') { this.addChatMessage('system', msg.message); }
+          if (msg.type === 'progress' && this.state.scanning) {
+            const host = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+            if (msg.percent != null) this.setInlineProgress(host, msg.percent, msg.message || '');
+          }
+          if (msg.type === 'notify') { this.showToast(msg.message, msg.level || 'info'); }
         } catch {}
       };
     } catch {}
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..a198345f17ddc65bfab84345163aef7be07c8efc
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>
@@ -222,7 +223,7 @@
               <span class="material-symbols-rounded">work</span>
               <h3>Live Opportunities</h3>
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
@@ -279,10 +280,11 @@
             </label>
           </div>
           <div class="row">
-            <button class="btn" id="export-json-btn">
+            <button class="btn" id="export-json-btn" title="Download a JSON snapshot of system status">
               <span class="material-symbols-rounded">download</span>
               <span>Export status JSON</span>
             </button>
+            <small class="meta">Includes agents, costs, memory, alerts and project status</small>
           </div>
         </div>
       </section>
@@ -295,6 +297,7 @@
       <button class="close" aria-label="Close" tabindex="0">×</button>
       <h3 id="task-title">Execute Task</h3>
       <textarea id="task-input" placeholder="Describe the task you want to execute..." aria-label="Task description"></textarea>
+      <div class="meta">Examples: analyze funding opportunities; generate proposal outline; summarize system status</div>
       <div class="modal-actions">
         <button class="btn primary" id="submit-task-btn">Execute</button>
         <button class="btn" id="submit-task-dry-btn">Dry Run</button>
@@ -307,6 +310,9 @@
     <div class="search-results" id="search-results" role="listbox" aria-label="Search results"></div>
   </div>
 
+  <!-- Toasts -->
+  <div id="toast-container" class="toast-container" aria-live="polite"></div>
+
   <script src="dashboard.js"></script>
 </body>
 </html>

[2025-09-05T17:29:35] tokens used: 657
[2025-09-05T17:29:35] turn diff:
diff --git a/src/dashboard/dashboardServer.ts b/src/dashboard/dashboardServer.ts
index 848b8052607fea10292180ae5937190cada95a36..2f64c63a81231cee4042d957e425c63255be3ee9
--- a/src/dashboard/dashboardServer.ts
+++ b/src/dashboard/dashboardServer.ts
@@ -49,7 +49,7 @@
     this.app.post('/api/scan-funding', async (req, res) => {
       try {
         const opportunities = await this.missionControl.scanFundingOpportunities();
-        res.json(opportunities);
+        res.json({ message: 'Funding scan complete', found: opportunities.length });
       } catch (error) {
         res.status(500).json({ error: 'Funding scan failed' });
       }
@@ -175,6 +175,20 @@
       });
     });
 
+    // Relay mission control events to all clients
+    this.missionControl.events.on('alert', (evt) => {
+      const payload = JSON.stringify({ type: 'activity', message: `[${evt.level.toUpperCase()}] ${evt.message}` });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('progress', (evt) => {
+      const payload = JSON.stringify({ type: 'progress', ...evt });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('notify', (evt) => {
+      const payload = JSON.stringify({ type: 'notify', level: evt.level, message: evt.message });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+
     // Broadcast status updates every 30 seconds
     setInterval(() => {
       this.broadcastStatusUpdate();
diff --git a/src/dashboard/fundingOpportunityScanner.ts b/src/dashboard/fundingOpportunityScanner.ts
index ec1230aa52b2a4f6355a228632f4cbaed0a3799b..c24b9505f3661908fdcbfcbb0b517e8fb43719df
--- a/src/dashboard/fundingOpportunityScanner.ts
+++ b/src/dashboard/fundingOpportunityScanner.ts
@@ -28,7 +28,7 @@
     await fs.mkdir(this.baseDir, { recursive: true }).catch(() => {});
   }
 
-  async scanAll(): Promise<FundingOpportunity[]> {
+  async scanAll(progressCb?: (evt: { stage: string; message: string; percent?: number }) => void): Promise<FundingOpportunity[]> {
     const sources = [
       'Horizon Europe',
       'Digital Europe Programme', 
@@ -38,11 +38,15 @@
     ];
 
     const opportunities: FundingOpportunity[] = [];
-    
-    for (const source of sources) {
+    const total = sources.length;
+    progressCb?.({ stage: 'start', message: 'Starting funding scan…', percent: 2 });
+    for (let i = 0; i < sources.length; i++) {
+      const source = sources[i];
       try {
+        progressCb?.({ stage: 'source', message: `Scanning ${source}…`, percent: Math.round(((i) / total) * 100) });
         const sourceOpportunities = await this.scanSource(source);
         opportunities.push(...sourceOpportunities);
+        progressCb?.({ stage: 'parsed', message: `Analyzing ${source} results…`, percent: Math.round(((i + 0.6) / total) * 100) });
       } catch (error) {
         console.warn(`Failed to scan ${source}:`, error);
       }
@@ -50,8 +54,11 @@
 
     // Save results
     await this.saveOpportunities(opportunities);
+    progressCb?.({ stage: 'save', message: 'Saving results…', percent: 96 });
     
-    return opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    const sorted = opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    progressCb?.({ stage: 'done', message: `Scan complete — ${sorted.length} opportunities found`, percent: 100 });
+    return sorted;
   }
 
   private async scanSource(program: string): Promise<FundingOpportunity[]> {
diff --git a/src/dashboard/missionControl.ts b/src/dashboard/missionControl.ts
index b7cc2a083f748dc35dd013fe24edce703ae5e138..0b4b0a946d314e52604c7716e001fa4adbee3b6c
--- a/src/dashboard/missionControl.ts
+++ b/src/dashboard/missionControl.ts
@@ -1,4 +1,5 @@
 import { promises as fs } from 'fs';
+import { EventEmitter } from 'events';
 import { StrategicOrchestrator } from '../orchestrator/strategicOrchestrator.js';
 import { UsageAnalyticsAgent } from '../analytics/usageAnalytics.js';
 import { loadKnowledgeBase, toContext } from '../memory/memoryLoader.js';
@@ -28,6 +29,7 @@
   private monitor = new SystemMonitor();
   private fundingScanner = new FundingOpportunityScanner();
   private alerts: MissionControlStatus['alerts'] = [];
+  public events = new EventEmitter();
 
   async getStatus(): Promise<MissionControlStatus> {
     const timestamp = new Date().toISOString();
@@ -103,6 +105,7 @@
       message,
       timestamp: new Date().toISOString()
     });
+    this.events.emit('alert', { level, message });
     
     // Keep only last 50 alerts
     if (this.alerts.length > 50) {
@@ -112,13 +115,16 @@
 
   async executeTask(taskDescription: string, options: { dryRun?: boolean } = {}) {
     await this.addAlert('info', `Starting task: ${taskDescription}`);
+    this.events.emit('progress', { stage: 'task', message: 'Starting task…', percent: 5 });
     
     try {
       const result = await this.orchestrator.execute(taskDescription, options);
       await this.addAlert('info', `Task completed successfully: ${result.taskId}`);
+      this.events.emit('notify', { level: 'success', message: 'Task completed successfully' });
       return result;
     } catch (error) {
       await this.addAlert('error', `Task failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Task execution failed' });
       throw error;
     }
   }
@@ -126,11 +132,13 @@
   async scanFundingOpportunities() {
     await this.addAlert('info', 'Starting EU funding opportunity scan...');
     try {
-      const opportunities = await this.fundingScanner.scanAll();
+      const opportunities = await this.fundingScanner.scanAll((evt) => this.events.emit('progress', evt));
       await this.addAlert('info', `Found ${opportunities.length} funding opportunities`);
+      this.events.emit('notify', { level: 'success', message: `Scan complete — ${opportunities.length} found` });
       return opportunities;
     } catch (error) {
       await this.addAlert('error', `Funding scan failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Funding scan failed' });
       throw error;
     }
   }
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/dashboard.js b/src/dashboard/web/dashboard.js
index cd16d5697fb3c112440336e88cb1eb4ec5d3ffa1..63def23da4804c329eca52369d7725bb41e6d267
--- a/src/dashboard/web/dashboard.js
+++ b/src/dashboard/web/dashboard.js
@@ -6,6 +6,8 @@
     this.initTime = new Date();
     this.theme = localStorage.getItem('eufm-theme') || 'light';
     this.sections = ['overview', 'funding', 'activity', 'analytics', 'settings'];
+    this.counts = { opportunities: 0, notes: 0, tools: 0 };
+    this.state = { scanning: false };
     this.init();
   }
 
@@ -21,6 +23,7 @@
     setInterval(() => this.updateTimestamp(), 1000);
     setInterval(() => this.updateUptime(), 1000);
     setInterval(() => this.refresh(), 30000);
+    this.onboardIfFirstRun();
   }
 
   cacheEls() {
@@ -31,6 +34,10 @@
     this.$globalSearch = document.getElementById('global-search');
     this.$searchPanel = document.getElementById('search-panel');
     this.$searchResults = document.getElementById('search-results');
+    this.$toast = document.getElementById('toast-container');
+    this.$scanBtn1 = document.getElementById('scan-funding-btn');
+    this.$scanBtn2 = document.getElementById('scan-funding-btn-2');
+    this.$scanHelp = document.getElementById('scan-help');
   }
 
   bindUI() {
@@ -142,6 +149,73 @@
     return res.text();
   }
 
+  // --- UI feedback helpers ---
+  showToast(message, type = 'info') {
+    if (!this.$toast) return;
+    const div = document.createElement('div');
+    div.className = `toast ${type}`;
+    div.innerHTML = `
+      <span class="material-symbols-rounded">${type === 'success' ? 'check_circle' : type === 'error' ? 'error' : 'info'}</span>
+      <div>${message}</div>
+    `;
+    this.$toast.appendChild(div);
+    setTimeout(() => div.remove(), 4000);
+  }
+
+  setLoadingBtn(btn, loading = true) {
+    if (!btn) return;
+    btn.classList.toggle('loading', !!loading);
+    btn.setAttribute('aria-busy', loading ? 'true' : 'false');
+    btn.disabled = !!loading;
+  }
+
+  insertInlineProgress(targetEl) {
+    if (!targetEl) return null;
+    let wrap = targetEl.parentElement?.querySelector('.progress-inline');
+    if (!wrap) {
+      wrap = document.createElement('div');
+      wrap.className = 'progress-inline';
+      wrap.innerHTML = `<div class="progress-bar"><div class="fill"></div></div><span class="label">Preparing…</span>`;
+      targetEl.parentElement?.appendChild(wrap);
+    }
+    return wrap;
+  }
+
+  setInlineProgress(wrap, percent, label) {
+    if (!wrap) return;
+    const fill = wrap.querySelector('.fill');
+    const lab = wrap.querySelector('.label');
+    if (fill) fill.style.width = `${Math.max(0, Math.min(100, percent))}%`;
+    if (lab && label) lab.textContent = label;
+  }
+
+  onboardIfFirstRun() {
+    const key = 'eufm-onboarded';
+    if (localStorage.getItem(key)) return;
+    const chip = document.getElementById('system-status-chip');
+    const scan = this.$scanBtn1 || this.$scanBtn2;
+    const hints = [];
+    const makeBubble = (target, title, hint) => {
+      if (!target) return;
+      const rect = target.getBoundingClientRect();
+      const b = document.createElement('div');
+      b.className = 'help-bubble';
+      b.style.top = `${window.scrollY + rect.top - 56}px`;
+      b.style.left = `${window.scrollX + rect.left}px`;
+      b.innerHTML = `<div class="title">${title}</div><div class="hint">${hint}</div><div class="help-arrow"></div>`;
+      document.body.appendChild(b);
+      hints.push(b);
+    };
+    makeBubble(chip, 'System Health', 'Live status of agents, uptime and time.');
+    makeBubble(scan, 'Scan for Funding', 'Click to scan EU portals for AI/tech calls.');
+    // Seed helpful chat and search suggestion
+    this.addChatMessage('system', 'Tip: Use the search bar to quickly find opportunities, notes, or alerts.');
+    if (this.$globalSearch && !this.$globalSearch.value) this.$globalSearch.value = 'AI funding';
+    const dismiss = () => { hints.forEach(h => h.remove()); localStorage.setItem(key, '1'); };
+    setTimeout(dismiss, 6000);
+    document.addEventListener('click', dismiss, { once: true });
+  }
+
   async updateStatus() {
     const s = await this.api('/api/status');
     // Agents
@@ -162,6 +236,11 @@
     document.getElementById('progress-text').textContent = `${s.eufmProject.progress}% Complete`;
     document.getElementById('next-milestone').textContent = `Next: ${s.eufmProject.nextMilestone}`;
     document.getElementById('funding-count').textContent = s.eufmProject.fundingOpportunities;
+    // counts for search context
+    this.counts.opportunities = s.eufmProject.fundingOpportunities;
+    document.getElementById('global-search').placeholder = `Search ${this.counts.opportunities} opportunities, ${s.system.memory.notes} notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator`;
+    this.counts.notes = s.system.memory.notes;
+    this.counts.tools = 8;
     // Activity from alerts
     this.renderActivity(s.alerts, 'activity-list');
   }
@@ -184,6 +263,7 @@
         <div class="tool-status status-${t.status}">${t.status}</div>
       </div>
     `).join('');
+    this.counts.tools = Array.isArray(tools) ? tools.length : 0;
   }
 
   async updateSubscriptions() {
@@ -219,6 +299,13 @@
     renderOpps(document.getElementById('opportunity-list'));
     const el2 = document.getElementById('opportunity-list-2');
     if (el2) renderOpps(el2);
+    // Update last scan helper and smart notifications
+    const last = opps.reduce((acc, o) => Math.max(acc, new Date(o.scannedAt || 0).getTime()), 0);
+    if (this.$scanHelp) this.$scanHelp.textContent = last ? `Last scan: ${new Date(last).toLocaleString()} • Found ${opps.length} opportunities` : 'Last scan: —';
+    const closingSoon = opps.filter(o => o.status === 'closing_soon').slice(0, 1);
+    if (closingSoon.length) {
+      this.showToast(`🚨 Deadline approaching: ${closingSoon[0].title} closes soon`, 'info');
+    }
   }
 
   async updateAlerts() {
@@ -237,14 +324,28 @@
   }
 
   async scanFunding() {
-    this.addChatMessage('system', 'Starting EU funding opportunity scan...');
+    if (this.state.scanning) return;
+    this.state.scanning = true;
+    this.addChatMessage('system', 'Scanning EU portals…');
+    this.showToast('Scanning EU portals for opportunities…', 'info');
+    const btns = [this.$scanBtn1, this.$scanBtn2];
+    btns.forEach(b => this.setLoadingBtn(b, true));
+    const progressHost = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+    this.setInlineProgress(progressHost, 5, 'Contacting sources…');
     try {
-      await this.api('/api/scan-funding', { method: 'POST' });
-      this.addChatMessage('system', 'Scan complete. Updating opportunities...');
+      const res = await this.api('/api/scan-funding', { method: 'POST' });
+      this.addChatMessage('system', '✅ Scan complete - updating opportunities…');
+      this.showToast(`✅ ${res?.message || 'Scan complete'}${res?.found ? ` • ${res.found} opportunities` : ''}`, 'success');
       await this.updateOpportunities();
     } catch (e) {
       this.addChatMessage('system', 'Funding scan failed. Check logs.');
+      this.showToast('Funding scan failed', 'error');
     }
+    finally {
+      btns.forEach(b => this.setLoadingBtn(b, false));
+      this.state.scanning = false;
+      if (progressHost) progressHost.remove();
+    }
   }
 
   openTaskModal() { document.getElementById('task-modal').classList.add('open'); }
@@ -253,15 +354,24 @@
     const task = document.getElementById('task-input').value.trim();
     if (!task) return;
     this.addChatMessage('user', `${dryRun ? 'Dry Run' : 'Execute'}: ${task}`);
+    this.showToast(`${dryRun ? 'Analyzing' : 'Executing'} task…`, 'info');
+    const execBtn = document.getElementById('submit-task-btn');
+    const dryBtn = document.getElementById('submit-task-dry-btn');
+    [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, true));
     try {
       await this.api('/api/execute', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ task, dryRun }) });
       this.addChatMessage('system', dryRun ? 'Task analyzed successfully.' : 'Task completed successfully.');
+      this.showToast(dryRun ? '✅ Analysis complete' : '✅ Task completed', 'success');
       document.getElementById('task-modal').classList.remove('open');
       document.getElementById('task-input').value = '';
       await this.refresh();
     } catch (e) {
       this.addChatMessage('system', 'Task execution failed.');
+      this.showToast('Task execution failed', 'error');
     }
+    finally {
+      [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, false));
+    }
   }
 
   addChatMessage(type, message) {
@@ -292,15 +402,31 @@
   }
 
   async search(q) {
-    if (!q || q.trim().length < 2) { this.$searchPanel.hidden = true; return; }
+    if (!q || q.trim().length < 2) {
+      // Suggestions
+      this.$searchPanel.hidden = false;
+      this.$searchResults.innerHTML = `
+        <div class="search-item">
+          <div class="type">Suggestions</div>
+          <div class="title">Searching ${this.counts.opportunities} opportunities, ${this.counts.notes} notes, ${this.counts.tools} tools</div>
+          <div class="snippet">Try: <code>AI funding</code>, <code>Horizon Europe</code>, <code>EIC Accelerator</code></div>
+        </div>
+      `;
+      return;
+    }
     try {
       const results = await this.api(`/api/search?q=${encodeURIComponent(q)}`);
       this.$searchPanel.hidden = false;
+      const hi = (text) => {
+        if (!text) return '';
+        const re = new RegExp(`(${q.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&')})`, 'ig');
+        return String(text).replace(re, '<mark>$1</mark>');
+      };
       this.$searchResults.innerHTML = results.map(r => `
         <div class="search-item">
           <div class="type">${r.type}</div>
-          <div class="title">${r.title}</div>
-          <div class="snippet">${r.snippet || ''}</div>
+          <div class="title">${hi(r.title)}</div>
+          <div class="snippet">${hi(r.snippet || '')}</div>
         </div>
       `).join('');
     } catch {
@@ -327,6 +453,12 @@
           const msg = JSON.parse(evt.data);
           if (msg.type === 'status_update') { this.applyStatus(msg.data); }
           if (msg.type === 'funding_opportunities') { this.updateOpportunities(); }
+          if (msg.type === 'activity') { this.addChatMessage('system', msg.message); }
+          if (msg.type === 'progress' && this.state.scanning) {
+            const host = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+            if (msg.percent != null) this.setInlineProgress(host, msg.percent, msg.message || '');
+          }
+          if (msg.type === 'notify') { this.showToast(msg.message, msg.level || 'info'); }
         } catch {}
       };
     } catch {}
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..a198345f17ddc65bfab84345163aef7be07c8efc
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>
@@ -222,7 +223,7 @@
               <span class="material-symbols-rounded">work</span>
               <h3>Live Opportunities</h3>
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
@@ -279,10 +280,11 @@
             </label>
           </div>
           <div class="row">
-            <button class="btn" id="export-json-btn">
+            <button class="btn" id="export-json-btn" title="Download a JSON snapshot of system status">
               <span class="material-symbols-rounded">download</span>
               <span>Export status JSON</span>
             </button>
+            <small class="meta">Includes agents, costs, memory, alerts and project status</small>
           </div>
         </div>
       </section>
@@ -295,6 +297,7 @@
       <button class="close" aria-label="Close" tabindex="0">×</button>
       <h3 id="task-title">Execute Task</h3>
       <textarea id="task-input" placeholder="Describe the task you want to execute..." aria-label="Task description"></textarea>
+      <div class="meta">Examples: analyze funding opportunities; generate proposal outline; summarize system status</div>
       <div class="modal-actions">
         <button class="btn primary" id="submit-task-btn">Execute</button>
         <button class="btn" id="submit-task-dry-btn">Dry Run</button>
@@ -307,6 +310,9 @@
     <div class="search-results" id="search-results" role="listbox" aria-label="Search results"></div>
   </div>
 
+  <!-- Toasts -->
+  <div id="toast-container" class="toast-container" aria-live="polite"></div>
+
   <script src="dashboard.js"></script>
 </body>
 </html>


[2025-09-05T17:29:39] thinking

**Considering UI improvements**

I think we need to enhance the user experience by adding contextual help bubbles or tooltips to various elements. For instance, we should add a data-help attribute to the settings export button and confirm that the theme toggle is fine as is. Most tooltips and titles are in place already. Long operations could use progress indicators, and I’ll include toast notifications for success and error states. Lastly, I want to patch the dashboard.js exportStatus to reflect these updates.
[2025-09-05T17:29:41] apply_patch auto_approved=true:
M /Users/panda/Desktop/EUFM/src/dashboard/web/dashboard.js
@@ -442,2 +442,3 @@
     a.click();
+    this.showToast('📦 Exported system status JSON', 'success');
   }
[2025-09-05T17:29:42] apply_patch(auto_approved=true) exited 0 in 313ms:
Success. Updated the following files:
M src/dashboard/web/dashboard.js
[2025-09-05T17:29:42] turn diff:
diff --git a/src/dashboard/dashboardServer.ts b/src/dashboard/dashboardServer.ts
index 848b8052607fea10292180ae5937190cada95a36..2f64c63a81231cee4042d957e425c63255be3ee9
--- a/src/dashboard/dashboardServer.ts
+++ b/src/dashboard/dashboardServer.ts
@@ -49,7 +49,7 @@
     this.app.post('/api/scan-funding', async (req, res) => {
       try {
         const opportunities = await this.missionControl.scanFundingOpportunities();
-        res.json(opportunities);
+        res.json({ message: 'Funding scan complete', found: opportunities.length });
       } catch (error) {
         res.status(500).json({ error: 'Funding scan failed' });
       }
@@ -175,6 +175,20 @@
       });
     });
 
+    // Relay mission control events to all clients
+    this.missionControl.events.on('alert', (evt) => {
+      const payload = JSON.stringify({ type: 'activity', message: `[${evt.level.toUpperCase()}] ${evt.message}` });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('progress', (evt) => {
+      const payload = JSON.stringify({ type: 'progress', ...evt });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('notify', (evt) => {
+      const payload = JSON.stringify({ type: 'notify', level: evt.level, message: evt.message });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+
     // Broadcast status updates every 30 seconds
     setInterval(() => {
       this.broadcastStatusUpdate();
diff --git a/src/dashboard/fundingOpportunityScanner.ts b/src/dashboard/fundingOpportunityScanner.ts
index ec1230aa52b2a4f6355a228632f4cbaed0a3799b..c24b9505f3661908fdcbfcbb0b517e8fb43719df
--- a/src/dashboard/fundingOpportunityScanner.ts
+++ b/src/dashboard/fundingOpportunityScanner.ts
@@ -28,7 +28,7 @@
     await fs.mkdir(this.baseDir, { recursive: true }).catch(() => {});
   }
 
-  async scanAll(): Promise<FundingOpportunity[]> {
+  async scanAll(progressCb?: (evt: { stage: string; message: string; percent?: number }) => void): Promise<FundingOpportunity[]> {
     const sources = [
       'Horizon Europe',
       'Digital Europe Programme', 
@@ -38,11 +38,15 @@
     ];
 
     const opportunities: FundingOpportunity[] = [];
-    
-    for (const source of sources) {
+    const total = sources.length;
+    progressCb?.({ stage: 'start', message: 'Starting funding scan…', percent: 2 });
+    for (let i = 0; i < sources.length; i++) {
+      const source = sources[i];
       try {
+        progressCb?.({ stage: 'source', message: `Scanning ${source}…`, percent: Math.round(((i) / total) * 100) });
         const sourceOpportunities = await this.scanSource(source);
         opportunities.push(...sourceOpportunities);
+        progressCb?.({ stage: 'parsed', message: `Analyzing ${source} results…`, percent: Math.round(((i + 0.6) / total) * 100) });
       } catch (error) {
         console.warn(`Failed to scan ${source}:`, error);
       }
@@ -50,8 +54,11 @@
 
     // Save results
     await this.saveOpportunities(opportunities);
+    progressCb?.({ stage: 'save', message: 'Saving results…', percent: 96 });
     
-    return opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    const sorted = opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    progressCb?.({ stage: 'done', message: `Scan complete — ${sorted.length} opportunities found`, percent: 100 });
+    return sorted;
   }
 
   private async scanSource(program: string): Promise<FundingOpportunity[]> {
diff --git a/src/dashboard/missionControl.ts b/src/dashboard/missionControl.ts
index b7cc2a083f748dc35dd013fe24edce703ae5e138..0b4b0a946d314e52604c7716e001fa4adbee3b6c
--- a/src/dashboard/missionControl.ts
+++ b/src/dashboard/missionControl.ts
@@ -1,4 +1,5 @@
 import { promises as fs } from 'fs';
+import { EventEmitter } from 'events';
 import { StrategicOrchestrator } from '../orchestrator/strategicOrchestrator.js';
 import { UsageAnalyticsAgent } from '../analytics/usageAnalytics.js';
 import { loadKnowledgeBase, toContext } from '../memory/memoryLoader.js';
@@ -28,6 +29,7 @@
   private monitor = new SystemMonitor();
   private fundingScanner = new FundingOpportunityScanner();
   private alerts: MissionControlStatus['alerts'] = [];
+  public events = new EventEmitter();
 
   async getStatus(): Promise<MissionControlStatus> {
     const timestamp = new Date().toISOString();
@@ -103,6 +105,7 @@
       message,
       timestamp: new Date().toISOString()
     });
+    this.events.emit('alert', { level, message });
     
     // Keep only last 50 alerts
     if (this.alerts.length > 50) {
@@ -112,13 +115,16 @@
 
   async executeTask(taskDescription: string, options: { dryRun?: boolean } = {}) {
     await this.addAlert('info', `Starting task: ${taskDescription}`);
+    this.events.emit('progress', { stage: 'task', message: 'Starting task…', percent: 5 });
     
     try {
       const result = await this.orchestrator.execute(taskDescription, options);
       await this.addAlert('info', `Task completed successfully: ${result.taskId}`);
+      this.events.emit('notify', { level: 'success', message: 'Task completed successfully' });
       return result;
     } catch (error) {
       await this.addAlert('error', `Task failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Task execution failed' });
       throw error;
     }
   }
@@ -126,11 +132,13 @@
   async scanFundingOpportunities() {
     await this.addAlert('info', 'Starting EU funding opportunity scan...');
     try {
-      const opportunities = await this.fundingScanner.scanAll();
+      const opportunities = await this.fundingScanner.scanAll((evt) => this.events.emit('progress', evt));
       await this.addAlert('info', `Found ${opportunities.length} funding opportunities`);
+      this.events.emit('notify', { level: 'success', message: `Scan complete — ${opportunities.length} found` });
       return opportunities;
     } catch (error) {
       await this.addAlert('error', `Funding scan failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Funding scan failed' });
       throw error;
     }
   }
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/dashboard.js b/src/dashboard/web/dashboard.js
index cd16d5697fb3c112440336e88cb1eb4ec5d3ffa1..410fc377916e79570ee109c1731f7de80b114b4f
--- a/src/dashboard/web/dashboard.js
+++ b/src/dashboard/web/dashboard.js
@@ -6,6 +6,8 @@
     this.initTime = new Date();
     this.theme = localStorage.getItem('eufm-theme') || 'light';
     this.sections = ['overview', 'funding', 'activity', 'analytics', 'settings'];
+    this.counts = { opportunities: 0, notes: 0, tools: 0 };
+    this.state = { scanning: false };
     this.init();
   }
 
@@ -21,6 +23,7 @@
     setInterval(() => this.updateTimestamp(), 1000);
     setInterval(() => this.updateUptime(), 1000);
     setInterval(() => this.refresh(), 30000);
+    this.onboardIfFirstRun();
   }
 
   cacheEls() {
@@ -31,6 +34,10 @@
     this.$globalSearch = document.getElementById('global-search');
     this.$searchPanel = document.getElementById('search-panel');
     this.$searchResults = document.getElementById('search-results');
+    this.$toast = document.getElementById('toast-container');
+    this.$scanBtn1 = document.getElementById('scan-funding-btn');
+    this.$scanBtn2 = document.getElementById('scan-funding-btn-2');
+    this.$scanHelp = document.getElementById('scan-help');
   }
 
   bindUI() {
@@ -142,6 +149,73 @@
     return res.text();
   }
 
+  // --- UI feedback helpers ---
+  showToast(message, type = 'info') {
+    if (!this.$toast) return;
+    const div = document.createElement('div');
+    div.className = `toast ${type}`;
+    div.innerHTML = `
+      <span class="material-symbols-rounded">${type === 'success' ? 'check_circle' : type === 'error' ? 'error' : 'info'}</span>
+      <div>${message}</div>
+    `;
+    this.$toast.appendChild(div);
+    setTimeout(() => div.remove(), 4000);
+  }
+
+  setLoadingBtn(btn, loading = true) {
+    if (!btn) return;
+    btn.classList.toggle('loading', !!loading);
+    btn.setAttribute('aria-busy', loading ? 'true' : 'false');
+    btn.disabled = !!loading;
+  }
+
+  insertInlineProgress(targetEl) {
+    if (!targetEl) return null;
+    let wrap = targetEl.parentElement?.querySelector('.progress-inline');
+    if (!wrap) {
+      wrap = document.createElement('div');
+      wrap.className = 'progress-inline';
+      wrap.innerHTML = `<div class="progress-bar"><div class="fill"></div></div><span class="label">Preparing…</span>`;
+      targetEl.parentElement?.appendChild(wrap);
+    }
+    return wrap;
+  }
+
+  setInlineProgress(wrap, percent, label) {
+    if (!wrap) return;
+    const fill = wrap.querySelector('.fill');
+    const lab = wrap.querySelector('.label');
+    if (fill) fill.style.width = `${Math.max(0, Math.min(100, percent))}%`;
+    if (lab && label) lab.textContent = label;
+  }
+
+  onboardIfFirstRun() {
+    const key = 'eufm-onboarded';
+    if (localStorage.getItem(key)) return;
+    const chip = document.getElementById('system-status-chip');
+    const scan = this.$scanBtn1 || this.$scanBtn2;
+    const hints = [];
+    const makeBubble = (target, title, hint) => {
+      if (!target) return;
+      const rect = target.getBoundingClientRect();
+      const b = document.createElement('div');
+      b.className = 'help-bubble';
+      b.style.top = `${window.scrollY + rect.top - 56}px`;
+      b.style.left = `${window.scrollX + rect.left}px`;
+      b.innerHTML = `<div class="title">${title}</div><div class="hint">${hint}</div><div class="help-arrow"></div>`;
+      document.body.appendChild(b);
+      hints.push(b);
+    };
+    makeBubble(chip, 'System Health', 'Live status of agents, uptime and time.');
+    makeBubble(scan, 'Scan for Funding', 'Click to scan EU portals for AI/tech calls.');
+    // Seed helpful chat and search suggestion
+    this.addChatMessage('system', 'Tip: Use the search bar to quickly find opportunities, notes, or alerts.');
+    if (this.$globalSearch && !this.$globalSearch.value) this.$globalSearch.value = 'AI funding';
+    const dismiss = () => { hints.forEach(h => h.remove()); localStorage.setItem(key, '1'); };
+    setTimeout(dismiss, 6000);
+    document.addEventListener('click', dismiss, { once: true });
+  }
+
   async updateStatus() {
     const s = await this.api('/api/status');
     // Agents
@@ -162,6 +236,11 @@
     document.getElementById('progress-text').textContent = `${s.eufmProject.progress}% Complete`;
     document.getElementById('next-milestone').textContent = `Next: ${s.eufmProject.nextMilestone}`;
     document.getElementById('funding-count').textContent = s.eufmProject.fundingOpportunities;
+    // counts for search context
+    this.counts.opportunities = s.eufmProject.fundingOpportunities;
+    document.getElementById('global-search').placeholder = `Search ${this.counts.opportunities} opportunities, ${s.system.memory.notes} notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator`;
+    this.counts.notes = s.system.memory.notes;
+    this.counts.tools = 8;
     // Activity from alerts
     this.renderActivity(s.alerts, 'activity-list');
   }
@@ -184,6 +263,7 @@
         <div class="tool-status status-${t.status}">${t.status}</div>
       </div>
     `).join('');
+    this.counts.tools = Array.isArray(tools) ? tools.length : 0;
   }
 
   async updateSubscriptions() {
@@ -219,6 +299,13 @@
     renderOpps(document.getElementById('opportunity-list'));
     const el2 = document.getElementById('opportunity-list-2');
     if (el2) renderOpps(el2);
+    // Update last scan helper and smart notifications
+    const last = opps.reduce((acc, o) => Math.max(acc, new Date(o.scannedAt || 0).getTime()), 0);
+    if (this.$scanHelp) this.$scanHelp.textContent = last ? `Last scan: ${new Date(last).toLocaleString()} • Found ${opps.length} opportunities` : 'Last scan: —';
+    const closingSoon = opps.filter(o => o.status === 'closing_soon').slice(0, 1);
+    if (closingSoon.length) {
+      this.showToast(`🚨 Deadline approaching: ${closingSoon[0].title} closes soon`, 'info');
+    }
   }
 
   async updateAlerts() {
@@ -237,14 +324,28 @@
   }
 
   async scanFunding() {
-    this.addChatMessage('system', 'Starting EU funding opportunity scan...');
+    if (this.state.scanning) return;
+    this.state.scanning = true;
+    this.addChatMessage('system', 'Scanning EU portals…');
+    this.showToast('Scanning EU portals for opportunities…', 'info');
+    const btns = [this.$scanBtn1, this.$scanBtn2];
+    btns.forEach(b => this.setLoadingBtn(b, true));
+    const progressHost = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+    this.setInlineProgress(progressHost, 5, 'Contacting sources…');
     try {
-      await this.api('/api/scan-funding', { method: 'POST' });
-      this.addChatMessage('system', 'Scan complete. Updating opportunities...');
+      const res = await this.api('/api/scan-funding', { method: 'POST' });
+      this.addChatMessage('system', '✅ Scan complete - updating opportunities…');
+      this.showToast(`✅ ${res?.message || 'Scan complete'}${res?.found ? ` • ${res.found} opportunities` : ''}`, 'success');
       await this.updateOpportunities();
     } catch (e) {
       this.addChatMessage('system', 'Funding scan failed. Check logs.');
+      this.showToast('Funding scan failed', 'error');
     }
+    finally {
+      btns.forEach(b => this.setLoadingBtn(b, false));
+      this.state.scanning = false;
+      if (progressHost) progressHost.remove();
+    }
   }
 
   openTaskModal() { document.getElementById('task-modal').classList.add('open'); }
@@ -253,15 +354,24 @@
     const task = document.getElementById('task-input').value.trim();
     if (!task) return;
     this.addChatMessage('user', `${dryRun ? 'Dry Run' : 'Execute'}: ${task}`);
+    this.showToast(`${dryRun ? 'Analyzing' : 'Executing'} task…`, 'info');
+    const execBtn = document.getElementById('submit-task-btn');
+    const dryBtn = document.getElementById('submit-task-dry-btn');
+    [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, true));
     try {
       await this.api('/api/execute', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ task, dryRun }) });
       this.addChatMessage('system', dryRun ? 'Task analyzed successfully.' : 'Task completed successfully.');
+      this.showToast(dryRun ? '✅ Analysis complete' : '✅ Task completed', 'success');
       document.getElementById('task-modal').classList.remove('open');
       document.getElementById('task-input').value = '';
       await this.refresh();
     } catch (e) {
       this.addChatMessage('system', 'Task execution failed.');
+      this.showToast('Task execution failed', 'error');
     }
+    finally {
+      [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, false));
+    }
   }
 
   addChatMessage(type, message) {
@@ -292,15 +402,31 @@
   }
 
   async search(q) {
-    if (!q || q.trim().length < 2) { this.$searchPanel.hidden = true; return; }
+    if (!q || q.trim().length < 2) {
+      // Suggestions
+      this.$searchPanel.hidden = false;
+      this.$searchResults.innerHTML = `
+        <div class="search-item">
+          <div class="type">Suggestions</div>
+          <div class="title">Searching ${this.counts.opportunities} opportunities, ${this.counts.notes} notes, ${this.counts.tools} tools</div>
+          <div class="snippet">Try: <code>AI funding</code>, <code>Horizon Europe</code>, <code>EIC Accelerator</code></div>
+        </div>
+      `;
+      return;
+    }
     try {
       const results = await this.api(`/api/search?q=${encodeURIComponent(q)}`);
       this.$searchPanel.hidden = false;
+      const hi = (text) => {
+        if (!text) return '';
+        const re = new RegExp(`(${q.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&')})`, 'ig');
+        return String(text).replace(re, '<mark>$1</mark>');
+      };
       this.$searchResults.innerHTML = results.map(r => `
         <div class="search-item">
           <div class="type">${r.type}</div>
-          <div class="title">${r.title}</div>
-          <div class="snippet">${r.snippet || ''}</div>
+          <div class="title">${hi(r.title)}</div>
+          <div class="snippet">${hi(r.snippet || '')}</div>
         </div>
       `).join('');
     } catch {
@@ -314,6 +440,7 @@
     a.href = URL.createObjectURL(blob);
     a.download = `eufm_status_${Date.now()}.json`;
     a.click();
+    this.showToast('📦 Exported system status JSON', 'success');
   }
 
   connectWS() {
@@ -327,6 +454,12 @@
           const msg = JSON.parse(evt.data);
           if (msg.type === 'status_update') { this.applyStatus(msg.data); }
           if (msg.type === 'funding_opportunities') { this.updateOpportunities(); }
+          if (msg.type === 'activity') { this.addChatMessage('system', msg.message); }
+          if (msg.type === 'progress' && this.state.scanning) {
+            const host = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+            if (msg.percent != null) this.setInlineProgress(host, msg.percent, msg.message || '');
+          }
+          if (msg.type === 'notify') { this.showToast(msg.message, msg.level || 'info'); }
         } catch {}
       };
     } catch {}
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..a198345f17ddc65bfab84345163aef7be07c8efc
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>
@@ -222,7 +223,7 @@
               <span class="material-symbols-rounded">work</span>
               <h3>Live Opportunities</h3>
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
@@ -279,10 +280,11 @@
             </label>
           </div>
           <div class="row">
-            <button class="btn" id="export-json-btn">
+            <button class="btn" id="export-json-btn" title="Download a JSON snapshot of system status">
               <span class="material-symbols-rounded">download</span>
               <span>Export status JSON</span>
             </button>
+            <small class="meta">Includes agents, costs, memory, alerts and project status</small>
           </div>
         </div>
       </section>
@@ -295,6 +297,7 @@
       <button class="close" aria-label="Close" tabindex="0">×</button>
       <h3 id="task-title">Execute Task</h3>
       <textarea id="task-input" placeholder="Describe the task you want to execute..." aria-label="Task description"></textarea>
+      <div class="meta">Examples: analyze funding opportunities; generate proposal outline; summarize system status</div>
       <div class="modal-actions">
         <button class="btn primary" id="submit-task-btn">Execute</button>
         <button class="btn" id="submit-task-dry-btn">Dry Run</button>
@@ -307,6 +310,9 @@
     <div class="search-results" id="search-results" role="listbox" aria-label="Search results"></div>
   </div>
 
+  <!-- Toasts -->
+  <div id="toast-container" class="toast-container" aria-live="polite"></div>
+
   <script src="dashboard.js"></script>
 </body>
 </html>

[2025-09-05T17:29:42] tokens used: 431
[2025-09-05T17:29:42] turn diff:
diff --git a/src/dashboard/dashboardServer.ts b/src/dashboard/dashboardServer.ts
index 848b8052607fea10292180ae5937190cada95a36..2f64c63a81231cee4042d957e425c63255be3ee9
--- a/src/dashboard/dashboardServer.ts
+++ b/src/dashboard/dashboardServer.ts
@@ -49,7 +49,7 @@
     this.app.post('/api/scan-funding', async (req, res) => {
       try {
         const opportunities = await this.missionControl.scanFundingOpportunities();
-        res.json(opportunities);
+        res.json({ message: 'Funding scan complete', found: opportunities.length });
       } catch (error) {
         res.status(500).json({ error: 'Funding scan failed' });
       }
@@ -175,6 +175,20 @@
       });
     });
 
+    // Relay mission control events to all clients
+    this.missionControl.events.on('alert', (evt) => {
+      const payload = JSON.stringify({ type: 'activity', message: `[${evt.level.toUpperCase()}] ${evt.message}` });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('progress', (evt) => {
+      const payload = JSON.stringify({ type: 'progress', ...evt });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('notify', (evt) => {
+      const payload = JSON.stringify({ type: 'notify', level: evt.level, message: evt.message });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+
     // Broadcast status updates every 30 seconds
     setInterval(() => {
       this.broadcastStatusUpdate();
diff --git a/src/dashboard/fundingOpportunityScanner.ts b/src/dashboard/fundingOpportunityScanner.ts
index ec1230aa52b2a4f6355a228632f4cbaed0a3799b..c24b9505f3661908fdcbfcbb0b517e8fb43719df
--- a/src/dashboard/fundingOpportunityScanner.ts
+++ b/src/dashboard/fundingOpportunityScanner.ts
@@ -28,7 +28,7 @@
     await fs.mkdir(this.baseDir, { recursive: true }).catch(() => {});
   }
 
-  async scanAll(): Promise<FundingOpportunity[]> {
+  async scanAll(progressCb?: (evt: { stage: string; message: string; percent?: number }) => void): Promise<FundingOpportunity[]> {
     const sources = [
       'Horizon Europe',
       'Digital Europe Programme', 
@@ -38,11 +38,15 @@
     ];
 
     const opportunities: FundingOpportunity[] = [];
-    
-    for (const source of sources) {
+    const total = sources.length;
+    progressCb?.({ stage: 'start', message: 'Starting funding scan…', percent: 2 });
+    for (let i = 0; i < sources.length; i++) {
+      const source = sources[i];
       try {
+        progressCb?.({ stage: 'source', message: `Scanning ${source}…`, percent: Math.round(((i) / total) * 100) });
         const sourceOpportunities = await this.scanSource(source);
         opportunities.push(...sourceOpportunities);
+        progressCb?.({ stage: 'parsed', message: `Analyzing ${source} results…`, percent: Math.round(((i + 0.6) / total) * 100) });
       } catch (error) {
         console.warn(`Failed to scan ${source}:`, error);
       }
@@ -50,8 +54,11 @@
 
     // Save results
     await this.saveOpportunities(opportunities);
+    progressCb?.({ stage: 'save', message: 'Saving results…', percent: 96 });
     
-    return opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    const sorted = opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    progressCb?.({ stage: 'done', message: `Scan complete — ${sorted.length} opportunities found`, percent: 100 });
+    return sorted;
   }
 
   private async scanSource(program: string): Promise<FundingOpportunity[]> {
diff --git a/src/dashboard/missionControl.ts b/src/dashboard/missionControl.ts
index b7cc2a083f748dc35dd013fe24edce703ae5e138..0b4b0a946d314e52604c7716e001fa4adbee3b6c
--- a/src/dashboard/missionControl.ts
+++ b/src/dashboard/missionControl.ts
@@ -1,4 +1,5 @@
 import { promises as fs } from 'fs';
+import { EventEmitter } from 'events';
 import { StrategicOrchestrator } from '../orchestrator/strategicOrchestrator.js';
 import { UsageAnalyticsAgent } from '../analytics/usageAnalytics.js';
 import { loadKnowledgeBase, toContext } from '../memory/memoryLoader.js';
@@ -28,6 +29,7 @@
   private monitor = new SystemMonitor();
   private fundingScanner = new FundingOpportunityScanner();
   private alerts: MissionControlStatus['alerts'] = [];
+  public events = new EventEmitter();
 
   async getStatus(): Promise<MissionControlStatus> {
     const timestamp = new Date().toISOString();
@@ -103,6 +105,7 @@
       message,
       timestamp: new Date().toISOString()
     });
+    this.events.emit('alert', { level, message });
     
     // Keep only last 50 alerts
     if (this.alerts.length > 50) {
@@ -112,13 +115,16 @@
 
   async executeTask(taskDescription: string, options: { dryRun?: boolean } = {}) {
     await this.addAlert('info', `Starting task: ${taskDescription}`);
+    this.events.emit('progress', { stage: 'task', message: 'Starting task…', percent: 5 });
     
     try {
       const result = await this.orchestrator.execute(taskDescription, options);
       await this.addAlert('info', `Task completed successfully: ${result.taskId}`);
+      this.events.emit('notify', { level: 'success', message: 'Task completed successfully' });
       return result;
     } catch (error) {
       await this.addAlert('error', `Task failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Task execution failed' });
       throw error;
     }
   }
@@ -126,11 +132,13 @@
   async scanFundingOpportunities() {
     await this.addAlert('info', 'Starting EU funding opportunity scan...');
     try {
-      const opportunities = await this.fundingScanner.scanAll();
+      const opportunities = await this.fundingScanner.scanAll((evt) => this.events.emit('progress', evt));
       await this.addAlert('info', `Found ${opportunities.length} funding opportunities`);
+      this.events.emit('notify', { level: 'success', message: `Scan complete — ${opportunities.length} found` });
       return opportunities;
     } catch (error) {
       await this.addAlert('error', `Funding scan failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Funding scan failed' });
       throw error;
     }
   }
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/dashboard.js b/src/dashboard/web/dashboard.js
index cd16d5697fb3c112440336e88cb1eb4ec5d3ffa1..410fc377916e79570ee109c1731f7de80b114b4f
--- a/src/dashboard/web/dashboard.js
+++ b/src/dashboard/web/dashboard.js
@@ -6,6 +6,8 @@
     this.initTime = new Date();
     this.theme = localStorage.getItem('eufm-theme') || 'light';
     this.sections = ['overview', 'funding', 'activity', 'analytics', 'settings'];
+    this.counts = { opportunities: 0, notes: 0, tools: 0 };
+    this.state = { scanning: false };
     this.init();
   }
 
@@ -21,6 +23,7 @@
     setInterval(() => this.updateTimestamp(), 1000);
     setInterval(() => this.updateUptime(), 1000);
     setInterval(() => this.refresh(), 30000);
+    this.onboardIfFirstRun();
   }
 
   cacheEls() {
@@ -31,6 +34,10 @@
     this.$globalSearch = document.getElementById('global-search');
     this.$searchPanel = document.getElementById('search-panel');
     this.$searchResults = document.getElementById('search-results');
+    this.$toast = document.getElementById('toast-container');
+    this.$scanBtn1 = document.getElementById('scan-funding-btn');
+    this.$scanBtn2 = document.getElementById('scan-funding-btn-2');
+    this.$scanHelp = document.getElementById('scan-help');
   }
 
   bindUI() {
@@ -142,6 +149,73 @@
     return res.text();
   }
 
+  // --- UI feedback helpers ---
+  showToast(message, type = 'info') {
+    if (!this.$toast) return;
+    const div = document.createElement('div');
+    div.className = `toast ${type}`;
+    div.innerHTML = `
+      <span class="material-symbols-rounded">${type === 'success' ? 'check_circle' : type === 'error' ? 'error' : 'info'}</span>
+      <div>${message}</div>
+    `;
+    this.$toast.appendChild(div);
+    setTimeout(() => div.remove(), 4000);
+  }
+
+  setLoadingBtn(btn, loading = true) {
+    if (!btn) return;
+    btn.classList.toggle('loading', !!loading);
+    btn.setAttribute('aria-busy', loading ? 'true' : 'false');
+    btn.disabled = !!loading;
+  }
+
+  insertInlineProgress(targetEl) {
+    if (!targetEl) return null;
+    let wrap = targetEl.parentElement?.querySelector('.progress-inline');
+    if (!wrap) {
+      wrap = document.createElement('div');
+      wrap.className = 'progress-inline';
+      wrap.innerHTML = `<div class="progress-bar"><div class="fill"></div></div><span class="label">Preparing…</span>`;
+      targetEl.parentElement?.appendChild(wrap);
+    }
+    return wrap;
+  }
+
+  setInlineProgress(wrap, percent, label) {
+    if (!wrap) return;
+    const fill = wrap.querySelector('.fill');
+    const lab = wrap.querySelector('.label');
+    if (fill) fill.style.width = `${Math.max(0, Math.min(100, percent))}%`;
+    if (lab && label) lab.textContent = label;
+  }
+
+  onboardIfFirstRun() {
+    const key = 'eufm-onboarded';
+    if (localStorage.getItem(key)) return;
+    const chip = document.getElementById('system-status-chip');
+    const scan = this.$scanBtn1 || this.$scanBtn2;
+    const hints = [];
+    const makeBubble = (target, title, hint) => {
+      if (!target) return;
+      const rect = target.getBoundingClientRect();
+      const b = document.createElement('div');
+      b.className = 'help-bubble';
+      b.style.top = `${window.scrollY + rect.top - 56}px`;
+      b.style.left = `${window.scrollX + rect.left}px`;
+      b.innerHTML = `<div class="title">${title}</div><div class="hint">${hint}</div><div class="help-arrow"></div>`;
+      document.body.appendChild(b);
+      hints.push(b);
+    };
+    makeBubble(chip, 'System Health', 'Live status of agents, uptime and time.');
+    makeBubble(scan, 'Scan for Funding', 'Click to scan EU portals for AI/tech calls.');
+    // Seed helpful chat and search suggestion
+    this.addChatMessage('system', 'Tip: Use the search bar to quickly find opportunities, notes, or alerts.');
+    if (this.$globalSearch && !this.$globalSearch.value) this.$globalSearch.value = 'AI funding';
+    const dismiss = () => { hints.forEach(h => h.remove()); localStorage.setItem(key, '1'); };
+    setTimeout(dismiss, 6000);
+    document.addEventListener('click', dismiss, { once: true });
+  }
+
   async updateStatus() {
     const s = await this.api('/api/status');
     // Agents
@@ -162,6 +236,11 @@
     document.getElementById('progress-text').textContent = `${s.eufmProject.progress}% Complete`;
     document.getElementById('next-milestone').textContent = `Next: ${s.eufmProject.nextMilestone}`;
     document.getElementById('funding-count').textContent = s.eufmProject.fundingOpportunities;
+    // counts for search context
+    this.counts.opportunities = s.eufmProject.fundingOpportunities;
+    document.getElementById('global-search').placeholder = `Search ${this.counts.opportunities} opportunities, ${s.system.memory.notes} notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator`;
+    this.counts.notes = s.system.memory.notes;
+    this.counts.tools = 8;
     // Activity from alerts
     this.renderActivity(s.alerts, 'activity-list');
   }
@@ -184,6 +263,7 @@
         <div class="tool-status status-${t.status}">${t.status}</div>
       </div>
     `).join('');
+    this.counts.tools = Array.isArray(tools) ? tools.length : 0;
   }
 
   async updateSubscriptions() {
@@ -219,6 +299,13 @@
     renderOpps(document.getElementById('opportunity-list'));
     const el2 = document.getElementById('opportunity-list-2');
     if (el2) renderOpps(el2);
+    // Update last scan helper and smart notifications
+    const last = opps.reduce((acc, o) => Math.max(acc, new Date(o.scannedAt || 0).getTime()), 0);
+    if (this.$scanHelp) this.$scanHelp.textContent = last ? `Last scan: ${new Date(last).toLocaleString()} • Found ${opps.length} opportunities` : 'Last scan: —';
+    const closingSoon = opps.filter(o => o.status === 'closing_soon').slice(0, 1);
+    if (closingSoon.length) {
+      this.showToast(`🚨 Deadline approaching: ${closingSoon[0].title} closes soon`, 'info');
+    }
   }
 
   async updateAlerts() {
@@ -237,14 +324,28 @@
   }
 
   async scanFunding() {
-    this.addChatMessage('system', 'Starting EU funding opportunity scan...');
+    if (this.state.scanning) return;
+    this.state.scanning = true;
+    this.addChatMessage('system', 'Scanning EU portals…');
+    this.showToast('Scanning EU portals for opportunities…', 'info');
+    const btns = [this.$scanBtn1, this.$scanBtn2];
+    btns.forEach(b => this.setLoadingBtn(b, true));
+    const progressHost = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+    this.setInlineProgress(progressHost, 5, 'Contacting sources…');
     try {
-      await this.api('/api/scan-funding', { method: 'POST' });
-      this.addChatMessage('system', 'Scan complete. Updating opportunities...');
+      const res = await this.api('/api/scan-funding', { method: 'POST' });
+      this.addChatMessage('system', '✅ Scan complete - updating opportunities…');
+      this.showToast(`✅ ${res?.message || 'Scan complete'}${res?.found ? ` • ${res.found} opportunities` : ''}`, 'success');
       await this.updateOpportunities();
     } catch (e) {
       this.addChatMessage('system', 'Funding scan failed. Check logs.');
+      this.showToast('Funding scan failed', 'error');
     }
+    finally {
+      btns.forEach(b => this.setLoadingBtn(b, false));
+      this.state.scanning = false;
+      if (progressHost) progressHost.remove();
+    }
   }
 
   openTaskModal() { document.getElementById('task-modal').classList.add('open'); }
@@ -253,15 +354,24 @@
     const task = document.getElementById('task-input').value.trim();
     if (!task) return;
     this.addChatMessage('user', `${dryRun ? 'Dry Run' : 'Execute'}: ${task}`);
+    this.showToast(`${dryRun ? 'Analyzing' : 'Executing'} task…`, 'info');
+    const execBtn = document.getElementById('submit-task-btn');
+    const dryBtn = document.getElementById('submit-task-dry-btn');
+    [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, true));
     try {
       await this.api('/api/execute', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ task, dryRun }) });
       this.addChatMessage('system', dryRun ? 'Task analyzed successfully.' : 'Task completed successfully.');
+      this.showToast(dryRun ? '✅ Analysis complete' : '✅ Task completed', 'success');
       document.getElementById('task-modal').classList.remove('open');
       document.getElementById('task-input').value = '';
       await this.refresh();
     } catch (e) {
       this.addChatMessage('system', 'Task execution failed.');
+      this.showToast('Task execution failed', 'error');
     }
+    finally {
+      [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, false));
+    }
   }
 
   addChatMessage(type, message) {
@@ -292,15 +402,31 @@
   }
 
   async search(q) {
-    if (!q || q.trim().length < 2) { this.$searchPanel.hidden = true; return; }
+    if (!q || q.trim().length < 2) {
+      // Suggestions
+      this.$searchPanel.hidden = false;
+      this.$searchResults.innerHTML = `
+        <div class="search-item">
+          <div class="type">Suggestions</div>
+          <div class="title">Searching ${this.counts.opportunities} opportunities, ${this.counts.notes} notes, ${this.counts.tools} tools</div>
+          <div class="snippet">Try: <code>AI funding</code>, <code>Horizon Europe</code>, <code>EIC Accelerator</code></div>
+        </div>
+      `;
+      return;
+    }
     try {
       const results = await this.api(`/api/search?q=${encodeURIComponent(q)}`);
       this.$searchPanel.hidden = false;
+      const hi = (text) => {
+        if (!text) return '';
+        const re = new RegExp(`(${q.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&')})`, 'ig');
+        return String(text).replace(re, '<mark>$1</mark>');
+      };
       this.$searchResults.innerHTML = results.map(r => `
         <div class="search-item">
           <div class="type">${r.type}</div>
-          <div class="title">${r.title}</div>
-          <div class="snippet">${r.snippet || ''}</div>
+          <div class="title">${hi(r.title)}</div>
+          <div class="snippet">${hi(r.snippet || '')}</div>
         </div>
       `).join('');
     } catch {
@@ -314,6 +440,7 @@
     a.href = URL.createObjectURL(blob);
     a.download = `eufm_status_${Date.now()}.json`;
     a.click();
+    this.showToast('📦 Exported system status JSON', 'success');
   }
 
   connectWS() {
@@ -327,6 +454,12 @@
           const msg = JSON.parse(evt.data);
           if (msg.type === 'status_update') { this.applyStatus(msg.data); }
           if (msg.type === 'funding_opportunities') { this.updateOpportunities(); }
+          if (msg.type === 'activity') { this.addChatMessage('system', msg.message); }
+          if (msg.type === 'progress' && this.state.scanning) {
+            const host = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+            if (msg.percent != null) this.setInlineProgress(host, msg.percent, msg.message || '');
+          }
+          if (msg.type === 'notify') { this.showToast(msg.message, msg.level || 'info'); }
         } catch {}
       };
     } catch {}
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..a198345f17ddc65bfab84345163aef7be07c8efc
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>
@@ -222,7 +223,7 @@
               <span class="material-symbols-rounded">work</span>
               <h3>Live Opportunities</h3>
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
@@ -279,10 +280,11 @@
             </label>
           </div>
           <div class="row">
-            <button class="btn" id="export-json-btn">
+            <button class="btn" id="export-json-btn" title="Download a JSON snapshot of system status">
               <span class="material-symbols-rounded">download</span>
               <span>Export status JSON</span>
             </button>
+            <small class="meta">Includes agents, costs, memory, alerts and project status</small>
           </div>
         </div>
       </section>
@@ -295,6 +297,7 @@
       <button class="close" aria-label="Close" tabindex="0">×</button>
       <h3 id="task-title">Execute Task</h3>
       <textarea id="task-input" placeholder="Describe the task you want to execute..." aria-label="Task description"></textarea>
+      <div class="meta">Examples: analyze funding opportunities; generate proposal outline; summarize system status</div>
       <div class="modal-actions">
         <button class="btn primary" id="submit-task-btn">Execute</button>
         <button class="btn" id="submit-task-dry-btn">Dry Run</button>
@@ -307,6 +310,9 @@
     <div class="search-results" id="search-results" role="listbox" aria-label="Search results"></div>
   </div>
 
+  <!-- Toasts -->
+  <div id="toast-container" class="toast-container" aria-live="polite"></div>
+
   <script src="dashboard.js"></script>
 </body>
 </html>


[2025-09-05T17:29:49] thinking

**Updating tooltip attributes**

I’m reminding myself to add tooltip attributes everywhere, and it seems we've already included many, even for the theme toggle. Now, I might want to add aria-live for search results, which I remember is already set up. 

For the recent activity feed, I need to ensure that WS events labeled 'alert' will appear through the 'activity' message. I’ll also make sure that streamed events get appended to the '#activity-list' as they happen, not just on status refresh, and update the connectWS method accordingly.
[2025-09-05T17:29:55] apply_patch auto_approved=true:
M /Users/panda/Desktop/EUFM/src/dashboard/web/dashboard.js
@@ -325,2 +325,13 @@
 
+  appendActivity(message, level = 'info') {
+    const list = document.getElementById('activity-list');
+    if (!list) return;
+    const item = document.createElement('div');
+    item.className = 'activity-item';
+    item.innerHTML = `
+      <div class="activity-content">[${String(level).toUpperCase()}] ${message}</div>
+      <div class="activity-time">${new Date().toLocaleTimeString()}</div>`;
+    list.prepend(item);
+  }
+
   async scanFunding() {
@@ -456,3 +467,3 @@
           if (msg.type === 'funding_opportunities') { this.updateOpportunities(); }
-          if (msg.type === 'activity') { this.addChatMessage('system', msg.message); }
+          if (msg.type === 'activity') { this.addChatMessage('system', msg.message); this.appendActivity(msg.message); }
           if (msg.type === 'progress' && this.state.scanning) {
[2025-09-05T17:29:57] apply_patch(auto_approved=true) exited 0 in 2.01s:
Success. Updated the following files:
M src/dashboard/web/dashboard.js
[2025-09-05T17:29:57] turn diff:
diff --git a/src/dashboard/dashboardServer.ts b/src/dashboard/dashboardServer.ts
index 848b8052607fea10292180ae5937190cada95a36..2f64c63a81231cee4042d957e425c63255be3ee9
--- a/src/dashboard/dashboardServer.ts
+++ b/src/dashboard/dashboardServer.ts
@@ -49,7 +49,7 @@
     this.app.post('/api/scan-funding', async (req, res) => {
       try {
         const opportunities = await this.missionControl.scanFundingOpportunities();
-        res.json(opportunities);
+        res.json({ message: 'Funding scan complete', found: opportunities.length });
       } catch (error) {
         res.status(500).json({ error: 'Funding scan failed' });
       }
@@ -175,6 +175,20 @@
       });
     });
 
+    // Relay mission control events to all clients
+    this.missionControl.events.on('alert', (evt) => {
+      const payload = JSON.stringify({ type: 'activity', message: `[${evt.level.toUpperCase()}] ${evt.message}` });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('progress', (evt) => {
+      const payload = JSON.stringify({ type: 'progress', ...evt });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('notify', (evt) => {
+      const payload = JSON.stringify({ type: 'notify', level: evt.level, message: evt.message });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+
     // Broadcast status updates every 30 seconds
     setInterval(() => {
       this.broadcastStatusUpdate();
diff --git a/src/dashboard/fundingOpportunityScanner.ts b/src/dashboard/fundingOpportunityScanner.ts
index ec1230aa52b2a4f6355a228632f4cbaed0a3799b..c24b9505f3661908fdcbfcbb0b517e8fb43719df
--- a/src/dashboard/fundingOpportunityScanner.ts
+++ b/src/dashboard/fundingOpportunityScanner.ts
@@ -28,7 +28,7 @@
     await fs.mkdir(this.baseDir, { recursive: true }).catch(() => {});
   }
 
-  async scanAll(): Promise<FundingOpportunity[]> {
+  async scanAll(progressCb?: (evt: { stage: string; message: string; percent?: number }) => void): Promise<FundingOpportunity[]> {
     const sources = [
       'Horizon Europe',
       'Digital Europe Programme', 
@@ -38,11 +38,15 @@
     ];
 
     const opportunities: FundingOpportunity[] = [];
-    
-    for (const source of sources) {
+    const total = sources.length;
+    progressCb?.({ stage: 'start', message: 'Starting funding scan…', percent: 2 });
+    for (let i = 0; i < sources.length; i++) {
+      const source = sources[i];
       try {
+        progressCb?.({ stage: 'source', message: `Scanning ${source}…`, percent: Math.round(((i) / total) * 100) });
         const sourceOpportunities = await this.scanSource(source);
         opportunities.push(...sourceOpportunities);
+        progressCb?.({ stage: 'parsed', message: `Analyzing ${source} results…`, percent: Math.round(((i + 0.6) / total) * 100) });
       } catch (error) {
         console.warn(`Failed to scan ${source}:`, error);
       }
@@ -50,8 +54,11 @@
 
     // Save results
     await this.saveOpportunities(opportunities);
+    progressCb?.({ stage: 'save', message: 'Saving results…', percent: 96 });
     
-    return opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    const sorted = opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    progressCb?.({ stage: 'done', message: `Scan complete — ${sorted.length} opportunities found`, percent: 100 });
+    return sorted;
   }
 
   private async scanSource(program: string): Promise<FundingOpportunity[]> {
diff --git a/src/dashboard/missionControl.ts b/src/dashboard/missionControl.ts
index b7cc2a083f748dc35dd013fe24edce703ae5e138..0b4b0a946d314e52604c7716e001fa4adbee3b6c
--- a/src/dashboard/missionControl.ts
+++ b/src/dashboard/missionControl.ts
@@ -1,4 +1,5 @@
 import { promises as fs } from 'fs';
+import { EventEmitter } from 'events';
 import { StrategicOrchestrator } from '../orchestrator/strategicOrchestrator.js';
 import { UsageAnalyticsAgent } from '../analytics/usageAnalytics.js';
 import { loadKnowledgeBase, toContext } from '../memory/memoryLoader.js';
@@ -28,6 +29,7 @@
   private monitor = new SystemMonitor();
   private fundingScanner = new FundingOpportunityScanner();
   private alerts: MissionControlStatus['alerts'] = [];
+  public events = new EventEmitter();
 
   async getStatus(): Promise<MissionControlStatus> {
     const timestamp = new Date().toISOString();
@@ -103,6 +105,7 @@
       message,
       timestamp: new Date().toISOString()
     });
+    this.events.emit('alert', { level, message });
     
     // Keep only last 50 alerts
     if (this.alerts.length > 50) {
@@ -112,13 +115,16 @@
 
   async executeTask(taskDescription: string, options: { dryRun?: boolean } = {}) {
     await this.addAlert('info', `Starting task: ${taskDescription}`);
+    this.events.emit('progress', { stage: 'task', message: 'Starting task…', percent: 5 });
     
     try {
       const result = await this.orchestrator.execute(taskDescription, options);
       await this.addAlert('info', `Task completed successfully: ${result.taskId}`);
+      this.events.emit('notify', { level: 'success', message: 'Task completed successfully' });
       return result;
     } catch (error) {
       await this.addAlert('error', `Task failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Task execution failed' });
       throw error;
     }
   }
@@ -126,11 +132,13 @@
   async scanFundingOpportunities() {
     await this.addAlert('info', 'Starting EU funding opportunity scan...');
     try {
-      const opportunities = await this.fundingScanner.scanAll();
+      const opportunities = await this.fundingScanner.scanAll((evt) => this.events.emit('progress', evt));
       await this.addAlert('info', `Found ${opportunities.length} funding opportunities`);
+      this.events.emit('notify', { level: 'success', message: `Scan complete — ${opportunities.length} found` });
       return opportunities;
     } catch (error) {
       await this.addAlert('error', `Funding scan failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Funding scan failed' });
       throw error;
     }
   }
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/dashboard.js b/src/dashboard/web/dashboard.js
index cd16d5697fb3c112440336e88cb1eb4ec5d3ffa1..c0e2f1928a577459fff9ac2e2bfe30384bc9933e
--- a/src/dashboard/web/dashboard.js
+++ b/src/dashboard/web/dashboard.js
@@ -6,6 +6,8 @@
     this.initTime = new Date();
     this.theme = localStorage.getItem('eufm-theme') || 'light';
     this.sections = ['overview', 'funding', 'activity', 'analytics', 'settings'];
+    this.counts = { opportunities: 0, notes: 0, tools: 0 };
+    this.state = { scanning: false };
     this.init();
   }
 
@@ -21,6 +23,7 @@
     setInterval(() => this.updateTimestamp(), 1000);
     setInterval(() => this.updateUptime(), 1000);
     setInterval(() => this.refresh(), 30000);
+    this.onboardIfFirstRun();
   }
 
   cacheEls() {
@@ -31,6 +34,10 @@
     this.$globalSearch = document.getElementById('global-search');
     this.$searchPanel = document.getElementById('search-panel');
     this.$searchResults = document.getElementById('search-results');
+    this.$toast = document.getElementById('toast-container');
+    this.$scanBtn1 = document.getElementById('scan-funding-btn');
+    this.$scanBtn2 = document.getElementById('scan-funding-btn-2');
+    this.$scanHelp = document.getElementById('scan-help');
   }
 
   bindUI() {
@@ -142,6 +149,73 @@
     return res.text();
   }
 
+  // --- UI feedback helpers ---
+  showToast(message, type = 'info') {
+    if (!this.$toast) return;
+    const div = document.createElement('div');
+    div.className = `toast ${type}`;
+    div.innerHTML = `
+      <span class="material-symbols-rounded">${type === 'success' ? 'check_circle' : type === 'error' ? 'error' : 'info'}</span>
+      <div>${message}</div>
+    `;
+    this.$toast.appendChild(div);
+    setTimeout(() => div.remove(), 4000);
+  }
+
+  setLoadingBtn(btn, loading = true) {
+    if (!btn) return;
+    btn.classList.toggle('loading', !!loading);
+    btn.setAttribute('aria-busy', loading ? 'true' : 'false');
+    btn.disabled = !!loading;
+  }
+
+  insertInlineProgress(targetEl) {
+    if (!targetEl) return null;
+    let wrap = targetEl.parentElement?.querySelector('.progress-inline');
+    if (!wrap) {
+      wrap = document.createElement('div');
+      wrap.className = 'progress-inline';
+      wrap.innerHTML = `<div class="progress-bar"><div class="fill"></div></div><span class="label">Preparing…</span>`;
+      targetEl.parentElement?.appendChild(wrap);
+    }
+    return wrap;
+  }
+
+  setInlineProgress(wrap, percent, label) {
+    if (!wrap) return;
+    const fill = wrap.querySelector('.fill');
+    const lab = wrap.querySelector('.label');
+    if (fill) fill.style.width = `${Math.max(0, Math.min(100, percent))}%`;
+    if (lab && label) lab.textContent = label;
+  }
+
+  onboardIfFirstRun() {
+    const key = 'eufm-onboarded';
+    if (localStorage.getItem(key)) return;
+    const chip = document.getElementById('system-status-chip');
+    const scan = this.$scanBtn1 || this.$scanBtn2;
+    const hints = [];
+    const makeBubble = (target, title, hint) => {
+      if (!target) return;
+      const rect = target.getBoundingClientRect();
+      const b = document.createElement('div');
+      b.className = 'help-bubble';
+      b.style.top = `${window.scrollY + rect.top - 56}px`;
+      b.style.left = `${window.scrollX + rect.left}px`;
+      b.innerHTML = `<div class="title">${title}</div><div class="hint">${hint}</div><div class="help-arrow"></div>`;
+      document.body.appendChild(b);
+      hints.push(b);
+    };
+    makeBubble(chip, 'System Health', 'Live status of agents, uptime and time.');
+    makeBubble(scan, 'Scan for Funding', 'Click to scan EU portals for AI/tech calls.');
+    // Seed helpful chat and search suggestion
+    this.addChatMessage('system', 'Tip: Use the search bar to quickly find opportunities, notes, or alerts.');
+    if (this.$globalSearch && !this.$globalSearch.value) this.$globalSearch.value = 'AI funding';
+    const dismiss = () => { hints.forEach(h => h.remove()); localStorage.setItem(key, '1'); };
+    setTimeout(dismiss, 6000);
+    document.addEventListener('click', dismiss, { once: true });
+  }
+
   async updateStatus() {
     const s = await this.api('/api/status');
     // Agents
@@ -162,6 +236,11 @@
     document.getElementById('progress-text').textContent = `${s.eufmProject.progress}% Complete`;
     document.getElementById('next-milestone').textContent = `Next: ${s.eufmProject.nextMilestone}`;
     document.getElementById('funding-count').textContent = s.eufmProject.fundingOpportunities;
+    // counts for search context
+    this.counts.opportunities = s.eufmProject.fundingOpportunities;
+    document.getElementById('global-search').placeholder = `Search ${this.counts.opportunities} opportunities, ${s.system.memory.notes} notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator`;
+    this.counts.notes = s.system.memory.notes;
+    this.counts.tools = 8;
     // Activity from alerts
     this.renderActivity(s.alerts, 'activity-list');
   }
@@ -184,6 +263,7 @@
         <div class="tool-status status-${t.status}">${t.status}</div>
       </div>
     `).join('');
+    this.counts.tools = Array.isArray(tools) ? tools.length : 0;
   }
 
   async updateSubscriptions() {
@@ -219,6 +299,13 @@
     renderOpps(document.getElementById('opportunity-list'));
     const el2 = document.getElementById('opportunity-list-2');
     if (el2) renderOpps(el2);
+    // Update last scan helper and smart notifications
+    const last = opps.reduce((acc, o) => Math.max(acc, new Date(o.scannedAt || 0).getTime()), 0);
+    if (this.$scanHelp) this.$scanHelp.textContent = last ? `Last scan: ${new Date(last).toLocaleString()} • Found ${opps.length} opportunities` : 'Last scan: —';
+    const closingSoon = opps.filter(o => o.status === 'closing_soon').slice(0, 1);
+    if (closingSoon.length) {
+      this.showToast(`🚨 Deadline approaching: ${closingSoon[0].title} closes soon`, 'info');
+    }
   }
 
   async updateAlerts() {
@@ -236,14 +323,39 @@
     `).join('');
   }
 
+  appendActivity(message, level = 'info') {
+    const list = document.getElementById('activity-list');
+    if (!list) return;
+    const item = document.createElement('div');
+    item.className = 'activity-item';
+    item.innerHTML = `
+      <div class="activity-content">[${String(level).toUpperCase()}] ${message}</div>
+      <div class="activity-time">${new Date().toLocaleTimeString()}</div>`;
+    list.prepend(item);
+  }
+
   async scanFunding() {
-    this.addChatMessage('system', 'Starting EU funding opportunity scan...');
+    if (this.state.scanning) return;
+    this.state.scanning = true;
+    this.addChatMessage('system', 'Scanning EU portals…');
+    this.showToast('Scanning EU portals for opportunities…', 'info');
+    const btns = [this.$scanBtn1, this.$scanBtn2];
+    btns.forEach(b => this.setLoadingBtn(b, true));
+    const progressHost = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+    this.setInlineProgress(progressHost, 5, 'Contacting sources…');
     try {
-      await this.api('/api/scan-funding', { method: 'POST' });
-      this.addChatMessage('system', 'Scan complete. Updating opportunities...');
+      const res = await this.api('/api/scan-funding', { method: 'POST' });
+      this.addChatMessage('system', '✅ Scan complete - updating opportunities…');
+      this.showToast(`✅ ${res?.message || 'Scan complete'}${res?.found ? ` • ${res.found} opportunities` : ''}`, 'success');
       await this.updateOpportunities();
     } catch (e) {
       this.addChatMessage('system', 'Funding scan failed. Check logs.');
+      this.showToast('Funding scan failed', 'error');
+    }
+    finally {
+      btns.forEach(b => this.setLoadingBtn(b, false));
+      this.state.scanning = false;
+      if (progressHost) progressHost.remove();
     }
   }
 
@@ -253,14 +365,23 @@
     const task = document.getElementById('task-input').value.trim();
     if (!task) return;
     this.addChatMessage('user', `${dryRun ? 'Dry Run' : 'Execute'}: ${task}`);
+    this.showToast(`${dryRun ? 'Analyzing' : 'Executing'} task…`, 'info');
+    const execBtn = document.getElementById('submit-task-btn');
+    const dryBtn = document.getElementById('submit-task-dry-btn');
+    [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, true));
     try {
       await this.api('/api/execute', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ task, dryRun }) });
       this.addChatMessage('system', dryRun ? 'Task analyzed successfully.' : 'Task completed successfully.');
+      this.showToast(dryRun ? '✅ Analysis complete' : '✅ Task completed', 'success');
       document.getElementById('task-modal').classList.remove('open');
       document.getElementById('task-input').value = '';
       await this.refresh();
     } catch (e) {
       this.addChatMessage('system', 'Task execution failed.');
+      this.showToast('Task execution failed', 'error');
+    }
+    finally {
+      [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, false));
     }
   }
 
@@ -292,15 +413,31 @@
   }
 
   async search(q) {
-    if (!q || q.trim().length < 2) { this.$searchPanel.hidden = true; return; }
+    if (!q || q.trim().length < 2) {
+      // Suggestions
+      this.$searchPanel.hidden = false;
+      this.$searchResults.innerHTML = `
+        <div class="search-item">
+          <div class="type">Suggestions</div>
+          <div class="title">Searching ${this.counts.opportunities} opportunities, ${this.counts.notes} notes, ${this.counts.tools} tools</div>
+          <div class="snippet">Try: <code>AI funding</code>, <code>Horizon Europe</code>, <code>EIC Accelerator</code></div>
+        </div>
+      `;
+      return;
+    }
     try {
       const results = await this.api(`/api/search?q=${encodeURIComponent(q)}`);
       this.$searchPanel.hidden = false;
+      const hi = (text) => {
+        if (!text) return '';
+        const re = new RegExp(`(${q.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&')})`, 'ig');
+        return String(text).replace(re, '<mark>$1</mark>');
+      };
       this.$searchResults.innerHTML = results.map(r => `
         <div class="search-item">
           <div class="type">${r.type}</div>
-          <div class="title">${r.title}</div>
-          <div class="snippet">${r.snippet || ''}</div>
+          <div class="title">${hi(r.title)}</div>
+          <div class="snippet">${hi(r.snippet || '')}</div>
         </div>
       `).join('');
     } catch {
@@ -314,6 +451,7 @@
     a.href = URL.createObjectURL(blob);
     a.download = `eufm_status_${Date.now()}.json`;
     a.click();
+    this.showToast('📦 Exported system status JSON', 'success');
   }
 
   connectWS() {
@@ -327,6 +465,12 @@
           const msg = JSON.parse(evt.data);
           if (msg.type === 'status_update') { this.applyStatus(msg.data); }
           if (msg.type === 'funding_opportunities') { this.updateOpportunities(); }
+          if (msg.type === 'activity') { this.addChatMessage('system', msg.message); this.appendActivity(msg.message); }
+          if (msg.type === 'progress' && this.state.scanning) {
+            const host = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+            if (msg.percent != null) this.setInlineProgress(host, msg.percent, msg.message || '');
+          }
+          if (msg.type === 'notify') { this.showToast(msg.message, msg.level || 'info'); }
         } catch {}
       };
     } catch {}
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..a198345f17ddc65bfab84345163aef7be07c8efc
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>
@@ -222,7 +223,7 @@
               <span class="material-symbols-rounded">work</span>
               <h3>Live Opportunities</h3>
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
@@ -279,10 +280,11 @@
             </label>
           </div>
           <div class="row">
-            <button class="btn" id="export-json-btn">
+            <button class="btn" id="export-json-btn" title="Download a JSON snapshot of system status">
               <span class="material-symbols-rounded">download</span>
               <span>Export status JSON</span>
             </button>
+            <small class="meta">Includes agents, costs, memory, alerts and project status</small>
           </div>
         </div>
       </section>
@@ -295,6 +297,7 @@
       <button class="close" aria-label="Close" tabindex="0">×</button>
       <h3 id="task-title">Execute Task</h3>
       <textarea id="task-input" placeholder="Describe the task you want to execute..." aria-label="Task description"></textarea>
+      <div class="meta">Examples: analyze funding opportunities; generate proposal outline; summarize system status</div>
       <div class="modal-actions">
         <button class="btn primary" id="submit-task-btn">Execute</button>
         <button class="btn" id="submit-task-dry-btn">Dry Run</button>
@@ -307,6 +310,9 @@
     <div class="search-results" id="search-results" role="listbox" aria-label="Search results"></div>
   </div>
 
+  <!-- Toasts -->
+  <div id="toast-container" class="toast-container" aria-live="polite"></div>
+
   <script src="dashboard.js"></script>
 </body>
 </html>

[2025-09-05T17:29:57] tokens used: 736
[2025-09-05T17:29:57] turn diff:
diff --git a/src/dashboard/dashboardServer.ts b/src/dashboard/dashboardServer.ts
index 848b8052607fea10292180ae5937190cada95a36..2f64c63a81231cee4042d957e425c63255be3ee9
--- a/src/dashboard/dashboardServer.ts
+++ b/src/dashboard/dashboardServer.ts
@@ -49,7 +49,7 @@
     this.app.post('/api/scan-funding', async (req, res) => {
       try {
         const opportunities = await this.missionControl.scanFundingOpportunities();
-        res.json(opportunities);
+        res.json({ message: 'Funding scan complete', found: opportunities.length });
       } catch (error) {
         res.status(500).json({ error: 'Funding scan failed' });
       }
@@ -175,6 +175,20 @@
       });
     });
 
+    // Relay mission control events to all clients
+    this.missionControl.events.on('alert', (evt) => {
+      const payload = JSON.stringify({ type: 'activity', message: `[${evt.level.toUpperCase()}] ${evt.message}` });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('progress', (evt) => {
+      const payload = JSON.stringify({ type: 'progress', ...evt });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('notify', (evt) => {
+      const payload = JSON.stringify({ type: 'notify', level: evt.level, message: evt.message });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+
     // Broadcast status updates every 30 seconds
     setInterval(() => {
       this.broadcastStatusUpdate();
diff --git a/src/dashboard/fundingOpportunityScanner.ts b/src/dashboard/fundingOpportunityScanner.ts
index ec1230aa52b2a4f6355a228632f4cbaed0a3799b..c24b9505f3661908fdcbfcbb0b517e8fb43719df
--- a/src/dashboard/fundingOpportunityScanner.ts
+++ b/src/dashboard/fundingOpportunityScanner.ts
@@ -28,7 +28,7 @@
     await fs.mkdir(this.baseDir, { recursive: true }).catch(() => {});
   }
 
-  async scanAll(): Promise<FundingOpportunity[]> {
+  async scanAll(progressCb?: (evt: { stage: string; message: string; percent?: number }) => void): Promise<FundingOpportunity[]> {
     const sources = [
       'Horizon Europe',
       'Digital Europe Programme', 
@@ -38,11 +38,15 @@
     ];
 
     const opportunities: FundingOpportunity[] = [];
-    
-    for (const source of sources) {
+    const total = sources.length;
+    progressCb?.({ stage: 'start', message: 'Starting funding scan…', percent: 2 });
+    for (let i = 0; i < sources.length; i++) {
+      const source = sources[i];
       try {
+        progressCb?.({ stage: 'source', message: `Scanning ${source}…`, percent: Math.round(((i) / total) * 100) });
         const sourceOpportunities = await this.scanSource(source);
         opportunities.push(...sourceOpportunities);
+        progressCb?.({ stage: 'parsed', message: `Analyzing ${source} results…`, percent: Math.round(((i + 0.6) / total) * 100) });
       } catch (error) {
         console.warn(`Failed to scan ${source}:`, error);
       }
@@ -50,8 +54,11 @@
 
     // Save results
     await this.saveOpportunities(opportunities);
+    progressCb?.({ stage: 'save', message: 'Saving results…', percent: 96 });
     
-    return opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    const sorted = opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    progressCb?.({ stage: 'done', message: `Scan complete — ${sorted.length} opportunities found`, percent: 100 });
+    return sorted;
   }
 
   private async scanSource(program: string): Promise<FundingOpportunity[]> {
diff --git a/src/dashboard/missionControl.ts b/src/dashboard/missionControl.ts
index b7cc2a083f748dc35dd013fe24edce703ae5e138..0b4b0a946d314e52604c7716e001fa4adbee3b6c
--- a/src/dashboard/missionControl.ts
+++ b/src/dashboard/missionControl.ts
@@ -1,4 +1,5 @@
 import { promises as fs } from 'fs';
+import { EventEmitter } from 'events';
 import { StrategicOrchestrator } from '../orchestrator/strategicOrchestrator.js';
 import { UsageAnalyticsAgent } from '../analytics/usageAnalytics.js';
 import { loadKnowledgeBase, toContext } from '../memory/memoryLoader.js';
@@ -28,6 +29,7 @@
   private monitor = new SystemMonitor();
   private fundingScanner = new FundingOpportunityScanner();
   private alerts: MissionControlStatus['alerts'] = [];
+  public events = new EventEmitter();
 
   async getStatus(): Promise<MissionControlStatus> {
     const timestamp = new Date().toISOString();
@@ -103,6 +105,7 @@
       message,
       timestamp: new Date().toISOString()
     });
+    this.events.emit('alert', { level, message });
     
     // Keep only last 50 alerts
     if (this.alerts.length > 50) {
@@ -112,13 +115,16 @@
 
   async executeTask(taskDescription: string, options: { dryRun?: boolean } = {}) {
     await this.addAlert('info', `Starting task: ${taskDescription}`);
+    this.events.emit('progress', { stage: 'task', message: 'Starting task…', percent: 5 });
     
     try {
       const result = await this.orchestrator.execute(taskDescription, options);
       await this.addAlert('info', `Task completed successfully: ${result.taskId}`);
+      this.events.emit('notify', { level: 'success', message: 'Task completed successfully' });
       return result;
     } catch (error) {
       await this.addAlert('error', `Task failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Task execution failed' });
       throw error;
     }
   }
@@ -126,11 +132,13 @@
   async scanFundingOpportunities() {
     await this.addAlert('info', 'Starting EU funding opportunity scan...');
     try {
-      const opportunities = await this.fundingScanner.scanAll();
+      const opportunities = await this.fundingScanner.scanAll((evt) => this.events.emit('progress', evt));
       await this.addAlert('info', `Found ${opportunities.length} funding opportunities`);
+      this.events.emit('notify', { level: 'success', message: `Scan complete — ${opportunities.length} found` });
       return opportunities;
     } catch (error) {
       await this.addAlert('error', `Funding scan failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Funding scan failed' });
       throw error;
     }
   }
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/dashboard.js b/src/dashboard/web/dashboard.js
index cd16d5697fb3c112440336e88cb1eb4ec5d3ffa1..c0e2f1928a577459fff9ac2e2bfe30384bc9933e
--- a/src/dashboard/web/dashboard.js
+++ b/src/dashboard/web/dashboard.js
@@ -6,6 +6,8 @@
     this.initTime = new Date();
     this.theme = localStorage.getItem('eufm-theme') || 'light';
     this.sections = ['overview', 'funding', 'activity', 'analytics', 'settings'];
+    this.counts = { opportunities: 0, notes: 0, tools: 0 };
+    this.state = { scanning: false };
     this.init();
   }
 
@@ -21,6 +23,7 @@
     setInterval(() => this.updateTimestamp(), 1000);
     setInterval(() => this.updateUptime(), 1000);
     setInterval(() => this.refresh(), 30000);
+    this.onboardIfFirstRun();
   }
 
   cacheEls() {
@@ -31,6 +34,10 @@
     this.$globalSearch = document.getElementById('global-search');
     this.$searchPanel = document.getElementById('search-panel');
     this.$searchResults = document.getElementById('search-results');
+    this.$toast = document.getElementById('toast-container');
+    this.$scanBtn1 = document.getElementById('scan-funding-btn');
+    this.$scanBtn2 = document.getElementById('scan-funding-btn-2');
+    this.$scanHelp = document.getElementById('scan-help');
   }
 
   bindUI() {
@@ -142,6 +149,73 @@
     return res.text();
   }
 
+  // --- UI feedback helpers ---
+  showToast(message, type = 'info') {
+    if (!this.$toast) return;
+    const div = document.createElement('div');
+    div.className = `toast ${type}`;
+    div.innerHTML = `
+      <span class="material-symbols-rounded">${type === 'success' ? 'check_circle' : type === 'error' ? 'error' : 'info'}</span>
+      <div>${message}</div>
+    `;
+    this.$toast.appendChild(div);
+    setTimeout(() => div.remove(), 4000);
+  }
+
+  setLoadingBtn(btn, loading = true) {
+    if (!btn) return;
+    btn.classList.toggle('loading', !!loading);
+    btn.setAttribute('aria-busy', loading ? 'true' : 'false');
+    btn.disabled = !!loading;
+  }
+
+  insertInlineProgress(targetEl) {
+    if (!targetEl) return null;
+    let wrap = targetEl.parentElement?.querySelector('.progress-inline');
+    if (!wrap) {
+      wrap = document.createElement('div');
+      wrap.className = 'progress-inline';
+      wrap.innerHTML = `<div class="progress-bar"><div class="fill"></div></div><span class="label">Preparing…</span>`;
+      targetEl.parentElement?.appendChild(wrap);
+    }
+    return wrap;
+  }
+
+  setInlineProgress(wrap, percent, label) {
+    if (!wrap) return;
+    const fill = wrap.querySelector('.fill');
+    const lab = wrap.querySelector('.label');
+    if (fill) fill.style.width = `${Math.max(0, Math.min(100, percent))}%`;
+    if (lab && label) lab.textContent = label;
+  }
+
+  onboardIfFirstRun() {
+    const key = 'eufm-onboarded';
+    if (localStorage.getItem(key)) return;
+    const chip = document.getElementById('system-status-chip');
+    const scan = this.$scanBtn1 || this.$scanBtn2;
+    const hints = [];
+    const makeBubble = (target, title, hint) => {
+      if (!target) return;
+      const rect = target.getBoundingClientRect();
+      const b = document.createElement('div');
+      b.className = 'help-bubble';
+      b.style.top = `${window.scrollY + rect.top - 56}px`;
+      b.style.left = `${window.scrollX + rect.left}px`;
+      b.innerHTML = `<div class="title">${title}</div><div class="hint">${hint}</div><div class="help-arrow"></div>`;
+      document.body.appendChild(b);
+      hints.push(b);
+    };
+    makeBubble(chip, 'System Health', 'Live status of agents, uptime and time.');
+    makeBubble(scan, 'Scan for Funding', 'Click to scan EU portals for AI/tech calls.');
+    // Seed helpful chat and search suggestion
+    this.addChatMessage('system', 'Tip: Use the search bar to quickly find opportunities, notes, or alerts.');
+    if (this.$globalSearch && !this.$globalSearch.value) this.$globalSearch.value = 'AI funding';
+    const dismiss = () => { hints.forEach(h => h.remove()); localStorage.setItem(key, '1'); };
+    setTimeout(dismiss, 6000);
+    document.addEventListener('click', dismiss, { once: true });
+  }
+
   async updateStatus() {
     const s = await this.api('/api/status');
     // Agents
@@ -162,6 +236,11 @@
     document.getElementById('progress-text').textContent = `${s.eufmProject.progress}% Complete`;
     document.getElementById('next-milestone').textContent = `Next: ${s.eufmProject.nextMilestone}`;
     document.getElementById('funding-count').textContent = s.eufmProject.fundingOpportunities;
+    // counts for search context
+    this.counts.opportunities = s.eufmProject.fundingOpportunities;
+    document.getElementById('global-search').placeholder = `Search ${this.counts.opportunities} opportunities, ${s.system.memory.notes} notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator`;
+    this.counts.notes = s.system.memory.notes;
+    this.counts.tools = 8;
     // Activity from alerts
     this.renderActivity(s.alerts, 'activity-list');
   }
@@ -184,6 +263,7 @@
         <div class="tool-status status-${t.status}">${t.status}</div>
       </div>
     `).join('');
+    this.counts.tools = Array.isArray(tools) ? tools.length : 0;
   }
 
   async updateSubscriptions() {
@@ -219,6 +299,13 @@
     renderOpps(document.getElementById('opportunity-list'));
     const el2 = document.getElementById('opportunity-list-2');
     if (el2) renderOpps(el2);
+    // Update last scan helper and smart notifications
+    const last = opps.reduce((acc, o) => Math.max(acc, new Date(o.scannedAt || 0).getTime()), 0);
+    if (this.$scanHelp) this.$scanHelp.textContent = last ? `Last scan: ${new Date(last).toLocaleString()} • Found ${opps.length} opportunities` : 'Last scan: —';
+    const closingSoon = opps.filter(o => o.status === 'closing_soon').slice(0, 1);
+    if (closingSoon.length) {
+      this.showToast(`🚨 Deadline approaching: ${closingSoon[0].title} closes soon`, 'info');
+    }
   }
 
   async updateAlerts() {
@@ -236,14 +323,39 @@
     `).join('');
   }
 
+  appendActivity(message, level = 'info') {
+    const list = document.getElementById('activity-list');
+    if (!list) return;
+    const item = document.createElement('div');
+    item.className = 'activity-item';
+    item.innerHTML = `
+      <div class="activity-content">[${String(level).toUpperCase()}] ${message}</div>
+      <div class="activity-time">${new Date().toLocaleTimeString()}</div>`;
+    list.prepend(item);
+  }
+
   async scanFunding() {
-    this.addChatMessage('system', 'Starting EU funding opportunity scan...');
+    if (this.state.scanning) return;
+    this.state.scanning = true;
+    this.addChatMessage('system', 'Scanning EU portals…');
+    this.showToast('Scanning EU portals for opportunities…', 'info');
+    const btns = [this.$scanBtn1, this.$scanBtn2];
+    btns.forEach(b => this.setLoadingBtn(b, true));
+    const progressHost = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+    this.setInlineProgress(progressHost, 5, 'Contacting sources…');
     try {
-      await this.api('/api/scan-funding', { method: 'POST' });
-      this.addChatMessage('system', 'Scan complete. Updating opportunities...');
+      const res = await this.api('/api/scan-funding', { method: 'POST' });
+      this.addChatMessage('system', '✅ Scan complete - updating opportunities…');
+      this.showToast(`✅ ${res?.message || 'Scan complete'}${res?.found ? ` • ${res.found} opportunities` : ''}`, 'success');
       await this.updateOpportunities();
     } catch (e) {
       this.addChatMessage('system', 'Funding scan failed. Check logs.');
+      this.showToast('Funding scan failed', 'error');
+    }
+    finally {
+      btns.forEach(b => this.setLoadingBtn(b, false));
+      this.state.scanning = false;
+      if (progressHost) progressHost.remove();
     }
   }
 
@@ -253,14 +365,23 @@
     const task = document.getElementById('task-input').value.trim();
     if (!task) return;
     this.addChatMessage('user', `${dryRun ? 'Dry Run' : 'Execute'}: ${task}`);
+    this.showToast(`${dryRun ? 'Analyzing' : 'Executing'} task…`, 'info');
+    const execBtn = document.getElementById('submit-task-btn');
+    const dryBtn = document.getElementById('submit-task-dry-btn');
+    [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, true));
     try {
       await this.api('/api/execute', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ task, dryRun }) });
       this.addChatMessage('system', dryRun ? 'Task analyzed successfully.' : 'Task completed successfully.');
+      this.showToast(dryRun ? '✅ Analysis complete' : '✅ Task completed', 'success');
       document.getElementById('task-modal').classList.remove('open');
       document.getElementById('task-input').value = '';
       await this.refresh();
     } catch (e) {
       this.addChatMessage('system', 'Task execution failed.');
+      this.showToast('Task execution failed', 'error');
+    }
+    finally {
+      [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, false));
     }
   }
 
@@ -292,15 +413,31 @@
   }
 
   async search(q) {
-    if (!q || q.trim().length < 2) { this.$searchPanel.hidden = true; return; }
+    if (!q || q.trim().length < 2) {
+      // Suggestions
+      this.$searchPanel.hidden = false;
+      this.$searchResults.innerHTML = `
+        <div class="search-item">
+          <div class="type">Suggestions</div>
+          <div class="title">Searching ${this.counts.opportunities} opportunities, ${this.counts.notes} notes, ${this.counts.tools} tools</div>
+          <div class="snippet">Try: <code>AI funding</code>, <code>Horizon Europe</code>, <code>EIC Accelerator</code></div>
+        </div>
+      `;
+      return;
+    }
     try {
       const results = await this.api(`/api/search?q=${encodeURIComponent(q)}`);
       this.$searchPanel.hidden = false;
+      const hi = (text) => {
+        if (!text) return '';
+        const re = new RegExp(`(${q.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&')})`, 'ig');
+        return String(text).replace(re, '<mark>$1</mark>');
+      };
       this.$searchResults.innerHTML = results.map(r => `
         <div class="search-item">
           <div class="type">${r.type}</div>
-          <div class="title">${r.title}</div>
-          <div class="snippet">${r.snippet || ''}</div>
+          <div class="title">${hi(r.title)}</div>
+          <div class="snippet">${hi(r.snippet || '')}</div>
         </div>
       `).join('');
     } catch {
@@ -314,6 +451,7 @@
     a.href = URL.createObjectURL(blob);
     a.download = `eufm_status_${Date.now()}.json`;
     a.click();
+    this.showToast('📦 Exported system status JSON', 'success');
   }
 
   connectWS() {
@@ -327,6 +465,12 @@
           const msg = JSON.parse(evt.data);
           if (msg.type === 'status_update') { this.applyStatus(msg.data); }
           if (msg.type === 'funding_opportunities') { this.updateOpportunities(); }
+          if (msg.type === 'activity') { this.addChatMessage('system', msg.message); this.appendActivity(msg.message); }
+          if (msg.type === 'progress' && this.state.scanning) {
+            const host = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+            if (msg.percent != null) this.setInlineProgress(host, msg.percent, msg.message || '');
+          }
+          if (msg.type === 'notify') { this.showToast(msg.message, msg.level || 'info'); }
         } catch {}
       };
     } catch {}
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..a198345f17ddc65bfab84345163aef7be07c8efc
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>
@@ -222,7 +223,7 @@
               <span class="material-symbols-rounded">work</span>
               <h3>Live Opportunities</h3>
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
@@ -279,10 +280,11 @@
             </label>
           </div>
           <div class="row">
-            <button class="btn" id="export-json-btn">
+            <button class="btn" id="export-json-btn" title="Download a JSON snapshot of system status">
               <span class="material-symbols-rounded">download</span>
               <span>Export status JSON</span>
             </button>
+            <small class="meta">Includes agents, costs, memory, alerts and project status</small>
           </div>
         </div>
       </section>
@@ -295,6 +297,7 @@
       <button class="close" aria-label="Close" tabindex="0">×</button>
       <h3 id="task-title">Execute Task</h3>
       <textarea id="task-input" placeholder="Describe the task you want to execute..." aria-label="Task description"></textarea>
+      <div class="meta">Examples: analyze funding opportunities; generate proposal outline; summarize system status</div>
       <div class="modal-actions">
         <button class="btn primary" id="submit-task-btn">Execute</button>
         <button class="btn" id="submit-task-dry-btn">Dry Run</button>
@@ -307,6 +310,9 @@
     <div class="search-results" id="search-results" role="listbox" aria-label="Search results"></div>
   </div>
 
+  <!-- Toasts -->
+  <div id="toast-container" class="toast-container" aria-live="polite"></div>
+
   <script src="dashboard.js"></script>
 </body>
 </html>

[2025-09-05T17:30:04] apply_patch auto_approved=true:
M /Users/panda/Desktop/EUFM/src/dashboard/web/dashboard.js
@@ -473,2 +473,3 @@
           if (msg.type === 'notify') { this.showToast(msg.message, msg.level || 'info'); }
+          if (msg.type === 'task_result') { this.addChatMessage('system', `Task result: ${msg.data?.summary || 'completed'}`); }
         } catch {}
[2025-09-05T17:30:05] apply_patch(auto_approved=true) exited 0 in 874ms:
Success. Updated the following files:
M src/dashboard/web/dashboard.js
[2025-09-05T17:30:05] turn diff:
diff --git a/src/dashboard/dashboardServer.ts b/src/dashboard/dashboardServer.ts
index 848b8052607fea10292180ae5937190cada95a36..2f64c63a81231cee4042d957e425c63255be3ee9
--- a/src/dashboard/dashboardServer.ts
+++ b/src/dashboard/dashboardServer.ts
@@ -49,7 +49,7 @@
     this.app.post('/api/scan-funding', async (req, res) => {
       try {
         const opportunities = await this.missionControl.scanFundingOpportunities();
-        res.json(opportunities);
+        res.json({ message: 'Funding scan complete', found: opportunities.length });
       } catch (error) {
         res.status(500).json({ error: 'Funding scan failed' });
       }
@@ -175,6 +175,20 @@
       });
     });
 
+    // Relay mission control events to all clients
+    this.missionControl.events.on('alert', (evt) => {
+      const payload = JSON.stringify({ type: 'activity', message: `[${evt.level.toUpperCase()}] ${evt.message}` });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('progress', (evt) => {
+      const payload = JSON.stringify({ type: 'progress', ...evt });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('notify', (evt) => {
+      const payload = JSON.stringify({ type: 'notify', level: evt.level, message: evt.message });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+
     // Broadcast status updates every 30 seconds
     setInterval(() => {
       this.broadcastStatusUpdate();
diff --git a/src/dashboard/fundingOpportunityScanner.ts b/src/dashboard/fundingOpportunityScanner.ts
index ec1230aa52b2a4f6355a228632f4cbaed0a3799b..c24b9505f3661908fdcbfcbb0b517e8fb43719df
--- a/src/dashboard/fundingOpportunityScanner.ts
+++ b/src/dashboard/fundingOpportunityScanner.ts
@@ -28,7 +28,7 @@
     await fs.mkdir(this.baseDir, { recursive: true }).catch(() => {});
   }
 
-  async scanAll(): Promise<FundingOpportunity[]> {
+  async scanAll(progressCb?: (evt: { stage: string; message: string; percent?: number }) => void): Promise<FundingOpportunity[]> {
     const sources = [
       'Horizon Europe',
       'Digital Europe Programme', 
@@ -38,11 +38,15 @@
     ];
 
     const opportunities: FundingOpportunity[] = [];
-    
-    for (const source of sources) {
+    const total = sources.length;
+    progressCb?.({ stage: 'start', message: 'Starting funding scan…', percent: 2 });
+    for (let i = 0; i < sources.length; i++) {
+      const source = sources[i];
       try {
+        progressCb?.({ stage: 'source', message: `Scanning ${source}…`, percent: Math.round(((i) / total) * 100) });
         const sourceOpportunities = await this.scanSource(source);
         opportunities.push(...sourceOpportunities);
+        progressCb?.({ stage: 'parsed', message: `Analyzing ${source} results…`, percent: Math.round(((i + 0.6) / total) * 100) });
       } catch (error) {
         console.warn(`Failed to scan ${source}:`, error);
       }
@@ -50,8 +54,11 @@
 
     // Save results
     await this.saveOpportunities(opportunities);
+    progressCb?.({ stage: 'save', message: 'Saving results…', percent: 96 });
     
-    return opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    const sorted = opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    progressCb?.({ stage: 'done', message: `Scan complete — ${sorted.length} opportunities found`, percent: 100 });
+    return sorted;
   }
 
   private async scanSource(program: string): Promise<FundingOpportunity[]> {
diff --git a/src/dashboard/missionControl.ts b/src/dashboard/missionControl.ts
index b7cc2a083f748dc35dd013fe24edce703ae5e138..0b4b0a946d314e52604c7716e001fa4adbee3b6c
--- a/src/dashboard/missionControl.ts
+++ b/src/dashboard/missionControl.ts
@@ -1,4 +1,5 @@
 import { promises as fs } from 'fs';
+import { EventEmitter } from 'events';
 import { StrategicOrchestrator } from '../orchestrator/strategicOrchestrator.js';
 import { UsageAnalyticsAgent } from '../analytics/usageAnalytics.js';
 import { loadKnowledgeBase, toContext } from '../memory/memoryLoader.js';
@@ -28,6 +29,7 @@
   private monitor = new SystemMonitor();
   private fundingScanner = new FundingOpportunityScanner();
   private alerts: MissionControlStatus['alerts'] = [];
+  public events = new EventEmitter();
 
   async getStatus(): Promise<MissionControlStatus> {
     const timestamp = new Date().toISOString();
@@ -103,6 +105,7 @@
       message,
       timestamp: new Date().toISOString()
     });
+    this.events.emit('alert', { level, message });
     
     // Keep only last 50 alerts
     if (this.alerts.length > 50) {
@@ -112,13 +115,16 @@
 
   async executeTask(taskDescription: string, options: { dryRun?: boolean } = {}) {
     await this.addAlert('info', `Starting task: ${taskDescription}`);
+    this.events.emit('progress', { stage: 'task', message: 'Starting task…', percent: 5 });
     
     try {
       const result = await this.orchestrator.execute(taskDescription, options);
       await this.addAlert('info', `Task completed successfully: ${result.taskId}`);
+      this.events.emit('notify', { level: 'success', message: 'Task completed successfully' });
       return result;
     } catch (error) {
       await this.addAlert('error', `Task failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Task execution failed' });
       throw error;
     }
   }
@@ -126,11 +132,13 @@
   async scanFundingOpportunities() {
     await this.addAlert('info', 'Starting EU funding opportunity scan...');
     try {
-      const opportunities = await this.fundingScanner.scanAll();
+      const opportunities = await this.fundingScanner.scanAll((evt) => this.events.emit('progress', evt));
       await this.addAlert('info', `Found ${opportunities.length} funding opportunities`);
+      this.events.emit('notify', { level: 'success', message: `Scan complete — ${opportunities.length} found` });
       return opportunities;
     } catch (error) {
       await this.addAlert('error', `Funding scan failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Funding scan failed' });
       throw error;
     }
   }
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/dashboard.js b/src/dashboard/web/dashboard.js
index cd16d5697fb3c112440336e88cb1eb4ec5d3ffa1..ac1ba0b1ee0290c6ab99f731370b940325187aa1
--- a/src/dashboard/web/dashboard.js
+++ b/src/dashboard/web/dashboard.js
@@ -6,6 +6,8 @@
     this.initTime = new Date();
     this.theme = localStorage.getItem('eufm-theme') || 'light';
     this.sections = ['overview', 'funding', 'activity', 'analytics', 'settings'];
+    this.counts = { opportunities: 0, notes: 0, tools: 0 };
+    this.state = { scanning: false };
     this.init();
   }
 
@@ -21,6 +23,7 @@
     setInterval(() => this.updateTimestamp(), 1000);
     setInterval(() => this.updateUptime(), 1000);
     setInterval(() => this.refresh(), 30000);
+    this.onboardIfFirstRun();
   }
 
   cacheEls() {
@@ -31,6 +34,10 @@
     this.$globalSearch = document.getElementById('global-search');
     this.$searchPanel = document.getElementById('search-panel');
     this.$searchResults = document.getElementById('search-results');
+    this.$toast = document.getElementById('toast-container');
+    this.$scanBtn1 = document.getElementById('scan-funding-btn');
+    this.$scanBtn2 = document.getElementById('scan-funding-btn-2');
+    this.$scanHelp = document.getElementById('scan-help');
   }
 
   bindUI() {
@@ -142,6 +149,73 @@
     return res.text();
   }
 
+  // --- UI feedback helpers ---
+  showToast(message, type = 'info') {
+    if (!this.$toast) return;
+    const div = document.createElement('div');
+    div.className = `toast ${type}`;
+    div.innerHTML = `
+      <span class="material-symbols-rounded">${type === 'success' ? 'check_circle' : type === 'error' ? 'error' : 'info'}</span>
+      <div>${message}</div>
+    `;
+    this.$toast.appendChild(div);
+    setTimeout(() => div.remove(), 4000);
+  }
+
+  setLoadingBtn(btn, loading = true) {
+    if (!btn) return;
+    btn.classList.toggle('loading', !!loading);
+    btn.setAttribute('aria-busy', loading ? 'true' : 'false');
+    btn.disabled = !!loading;
+  }
+
+  insertInlineProgress(targetEl) {
+    if (!targetEl) return null;
+    let wrap = targetEl.parentElement?.querySelector('.progress-inline');
+    if (!wrap) {
+      wrap = document.createElement('div');
+      wrap.className = 'progress-inline';
+      wrap.innerHTML = `<div class="progress-bar"><div class="fill"></div></div><span class="label">Preparing…</span>`;
+      targetEl.parentElement?.appendChild(wrap);
+    }
+    return wrap;
+  }
+
+  setInlineProgress(wrap, percent, label) {
+    if (!wrap) return;
+    const fill = wrap.querySelector('.fill');
+    const lab = wrap.querySelector('.label');
+    if (fill) fill.style.width = `${Math.max(0, Math.min(100, percent))}%`;
+    if (lab && label) lab.textContent = label;
+  }
+
+  onboardIfFirstRun() {
+    const key = 'eufm-onboarded';
+    if (localStorage.getItem(key)) return;
+    const chip = document.getElementById('system-status-chip');
+    const scan = this.$scanBtn1 || this.$scanBtn2;
+    const hints = [];
+    const makeBubble = (target, title, hint) => {
+      if (!target) return;
+      const rect = target.getBoundingClientRect();
+      const b = document.createElement('div');
+      b.className = 'help-bubble';
+      b.style.top = `${window.scrollY + rect.top - 56}px`;
+      b.style.left = `${window.scrollX + rect.left}px`;
+      b.innerHTML = `<div class="title">${title}</div><div class="hint">${hint}</div><div class="help-arrow"></div>`;
+      document.body.appendChild(b);
+      hints.push(b);
+    };
+    makeBubble(chip, 'System Health', 'Live status of agents, uptime and time.');
+    makeBubble(scan, 'Scan for Funding', 'Click to scan EU portals for AI/tech calls.');
+    // Seed helpful chat and search suggestion
+    this.addChatMessage('system', 'Tip: Use the search bar to quickly find opportunities, notes, or alerts.');
+    if (this.$globalSearch && !this.$globalSearch.value) this.$globalSearch.value = 'AI funding';
+    const dismiss = () => { hints.forEach(h => h.remove()); localStorage.setItem(key, '1'); };
+    setTimeout(dismiss, 6000);
+    document.addEventListener('click', dismiss, { once: true });
+  }
+
   async updateStatus() {
     const s = await this.api('/api/status');
     // Agents
@@ -162,6 +236,11 @@
     document.getElementById('progress-text').textContent = `${s.eufmProject.progress}% Complete`;
     document.getElementById('next-milestone').textContent = `Next: ${s.eufmProject.nextMilestone}`;
     document.getElementById('funding-count').textContent = s.eufmProject.fundingOpportunities;
+    // counts for search context
+    this.counts.opportunities = s.eufmProject.fundingOpportunities;
+    document.getElementById('global-search').placeholder = `Search ${this.counts.opportunities} opportunities, ${s.system.memory.notes} notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator`;
+    this.counts.notes = s.system.memory.notes;
+    this.counts.tools = 8;
     // Activity from alerts
     this.renderActivity(s.alerts, 'activity-list');
   }
@@ -184,6 +263,7 @@
         <div class="tool-status status-${t.status}">${t.status}</div>
       </div>
     `).join('');
+    this.counts.tools = Array.isArray(tools) ? tools.length : 0;
   }
 
   async updateSubscriptions() {
@@ -219,6 +299,13 @@
     renderOpps(document.getElementById('opportunity-list'));
     const el2 = document.getElementById('opportunity-list-2');
     if (el2) renderOpps(el2);
+    // Update last scan helper and smart notifications
+    const last = opps.reduce((acc, o) => Math.max(acc, new Date(o.scannedAt || 0).getTime()), 0);
+    if (this.$scanHelp) this.$scanHelp.textContent = last ? `Last scan: ${new Date(last).toLocaleString()} • Found ${opps.length} opportunities` : 'Last scan: —';
+    const closingSoon = opps.filter(o => o.status === 'closing_soon').slice(0, 1);
+    if (closingSoon.length) {
+      this.showToast(`🚨 Deadline approaching: ${closingSoon[0].title} closes soon`, 'info');
+    }
   }
 
   async updateAlerts() {
@@ -236,14 +323,39 @@
     `).join('');
   }
 
+  appendActivity(message, level = 'info') {
+    const list = document.getElementById('activity-list');
+    if (!list) return;
+    const item = document.createElement('div');
+    item.className = 'activity-item';
+    item.innerHTML = `
+      <div class="activity-content">[${String(level).toUpperCase()}] ${message}</div>
+      <div class="activity-time">${new Date().toLocaleTimeString()}</div>`;
+    list.prepend(item);
+  }
+
   async scanFunding() {
-    this.addChatMessage('system', 'Starting EU funding opportunity scan...');
+    if (this.state.scanning) return;
+    this.state.scanning = true;
+    this.addChatMessage('system', 'Scanning EU portals…');
+    this.showToast('Scanning EU portals for opportunities…', 'info');
+    const btns = [this.$scanBtn1, this.$scanBtn2];
+    btns.forEach(b => this.setLoadingBtn(b, true));
+    const progressHost = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+    this.setInlineProgress(progressHost, 5, 'Contacting sources…');
     try {
-      await this.api('/api/scan-funding', { method: 'POST' });
-      this.addChatMessage('system', 'Scan complete. Updating opportunities...');
+      const res = await this.api('/api/scan-funding', { method: 'POST' });
+      this.addChatMessage('system', '✅ Scan complete - updating opportunities…');
+      this.showToast(`✅ ${res?.message || 'Scan complete'}${res?.found ? ` • ${res.found} opportunities` : ''}`, 'success');
       await this.updateOpportunities();
     } catch (e) {
       this.addChatMessage('system', 'Funding scan failed. Check logs.');
+      this.showToast('Funding scan failed', 'error');
+    }
+    finally {
+      btns.forEach(b => this.setLoadingBtn(b, false));
+      this.state.scanning = false;
+      if (progressHost) progressHost.remove();
     }
   }
 
@@ -253,15 +365,24 @@
     const task = document.getElementById('task-input').value.trim();
     if (!task) return;
     this.addChatMessage('user', `${dryRun ? 'Dry Run' : 'Execute'}: ${task}`);
+    this.showToast(`${dryRun ? 'Analyzing' : 'Executing'} task…`, 'info');
+    const execBtn = document.getElementById('submit-task-btn');
+    const dryBtn = document.getElementById('submit-task-dry-btn');
+    [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, true));
     try {
       await this.api('/api/execute', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ task, dryRun }) });
       this.addChatMessage('system', dryRun ? 'Task analyzed successfully.' : 'Task completed successfully.');
+      this.showToast(dryRun ? '✅ Analysis complete' : '✅ Task completed', 'success');
       document.getElementById('task-modal').classList.remove('open');
       document.getElementById('task-input').value = '';
       await this.refresh();
     } catch (e) {
       this.addChatMessage('system', 'Task execution failed.');
+      this.showToast('Task execution failed', 'error');
     }
+    finally {
+      [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, false));
+    }
   }
 
   addChatMessage(type, message) {
@@ -292,15 +413,31 @@
   }
 
   async search(q) {
-    if (!q || q.trim().length < 2) { this.$searchPanel.hidden = true; return; }
+    if (!q || q.trim().length < 2) {
+      // Suggestions
+      this.$searchPanel.hidden = false;
+      this.$searchResults.innerHTML = `
+        <div class="search-item">
+          <div class="type">Suggestions</div>
+          <div class="title">Searching ${this.counts.opportunities} opportunities, ${this.counts.notes} notes, ${this.counts.tools} tools</div>
+          <div class="snippet">Try: <code>AI funding</code>, <code>Horizon Europe</code>, <code>EIC Accelerator</code></div>
+        </div>
+      `;
+      return;
+    }
     try {
       const results = await this.api(`/api/search?q=${encodeURIComponent(q)}`);
       this.$searchPanel.hidden = false;
+      const hi = (text) => {
+        if (!text) return '';
+        const re = new RegExp(`(${q.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&')})`, 'ig');
+        return String(text).replace(re, '<mark>$1</mark>');
+      };
       this.$searchResults.innerHTML = results.map(r => `
         <div class="search-item">
           <div class="type">${r.type}</div>
-          <div class="title">${r.title}</div>
-          <div class="snippet">${r.snippet || ''}</div>
+          <div class="title">${hi(r.title)}</div>
+          <div class="snippet">${hi(r.snippet || '')}</div>
         </div>
       `).join('');
     } catch {
@@ -314,6 +451,7 @@
     a.href = URL.createObjectURL(blob);
     a.download = `eufm_status_${Date.now()}.json`;
     a.click();
+    this.showToast('📦 Exported system status JSON', 'success');
   }
 
   connectWS() {
@@ -327,6 +465,13 @@
           const msg = JSON.parse(evt.data);
           if (msg.type === 'status_update') { this.applyStatus(msg.data); }
           if (msg.type === 'funding_opportunities') { this.updateOpportunities(); }
+          if (msg.type === 'activity') { this.addChatMessage('system', msg.message); this.appendActivity(msg.message); }
+          if (msg.type === 'progress' && this.state.scanning) {
+            const host = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+            if (msg.percent != null) this.setInlineProgress(host, msg.percent, msg.message || '');
+          }
+          if (msg.type === 'notify') { this.showToast(msg.message, msg.level || 'info'); }
+          if (msg.type === 'task_result') { this.addChatMessage('system', `Task result: ${msg.data?.summary || 'completed'}`); }
         } catch {}
       };
     } catch {}
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..a198345f17ddc65bfab84345163aef7be07c8efc
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>
@@ -222,7 +223,7 @@
               <span class="material-symbols-rounded">work</span>
               <h3>Live Opportunities</h3>
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
@@ -279,10 +280,11 @@
             </label>
           </div>
           <div class="row">
-            <button class="btn" id="export-json-btn">
+            <button class="btn" id="export-json-btn" title="Download a JSON snapshot of system status">
               <span class="material-symbols-rounded">download</span>
               <span>Export status JSON</span>
             </button>
+            <small class="meta">Includes agents, costs, memory, alerts and project status</small>
           </div>
         </div>
       </section>
@@ -295,6 +297,7 @@
       <button class="close" aria-label="Close" tabindex="0">×</button>
       <h3 id="task-title">Execute Task</h3>
       <textarea id="task-input" placeholder="Describe the task you want to execute..." aria-label="Task description"></textarea>
+      <div class="meta">Examples: analyze funding opportunities; generate proposal outline; summarize system status</div>
       <div class="modal-actions">
         <button class="btn primary" id="submit-task-btn">Execute</button>
         <button class="btn" id="submit-task-dry-btn">Dry Run</button>
@@ -307,6 +310,9 @@
     <div class="search-results" id="search-results" role="listbox" aria-label="Search results"></div>
   </div>
 
+  <!-- Toasts -->
+  <div id="toast-container" class="toast-container" aria-live="polite"></div>
+
   <script src="dashboard.js"></script>
 </body>
 </html>

[2025-09-05T17:30:05] tokens used: 661
[2025-09-05T17:30:05] turn diff:
diff --git a/src/dashboard/dashboardServer.ts b/src/dashboard/dashboardServer.ts
index 848b8052607fea10292180ae5937190cada95a36..2f64c63a81231cee4042d957e425c63255be3ee9
--- a/src/dashboard/dashboardServer.ts
+++ b/src/dashboard/dashboardServer.ts
@@ -49,7 +49,7 @@
     this.app.post('/api/scan-funding', async (req, res) => {
       try {
         const opportunities = await this.missionControl.scanFundingOpportunities();
-        res.json(opportunities);
+        res.json({ message: 'Funding scan complete', found: opportunities.length });
       } catch (error) {
         res.status(500).json({ error: 'Funding scan failed' });
       }
@@ -175,6 +175,20 @@
       });
     });
 
+    // Relay mission control events to all clients
+    this.missionControl.events.on('alert', (evt) => {
+      const payload = JSON.stringify({ type: 'activity', message: `[${evt.level.toUpperCase()}] ${evt.message}` });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('progress', (evt) => {
+      const payload = JSON.stringify({ type: 'progress', ...evt });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('notify', (evt) => {
+      const payload = JSON.stringify({ type: 'notify', level: evt.level, message: evt.message });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+
     // Broadcast status updates every 30 seconds
     setInterval(() => {
       this.broadcastStatusUpdate();
diff --git a/src/dashboard/fundingOpportunityScanner.ts b/src/dashboard/fundingOpportunityScanner.ts
index ec1230aa52b2a4f6355a228632f4cbaed0a3799b..c24b9505f3661908fdcbfcbb0b517e8fb43719df
--- a/src/dashboard/fundingOpportunityScanner.ts
+++ b/src/dashboard/fundingOpportunityScanner.ts
@@ -28,7 +28,7 @@
     await fs.mkdir(this.baseDir, { recursive: true }).catch(() => {});
   }
 
-  async scanAll(): Promise<FundingOpportunity[]> {
+  async scanAll(progressCb?: (evt: { stage: string; message: string; percent?: number }) => void): Promise<FundingOpportunity[]> {
     const sources = [
       'Horizon Europe',
       'Digital Europe Programme', 
@@ -38,11 +38,15 @@
     ];
 
     const opportunities: FundingOpportunity[] = [];
-    
-    for (const source of sources) {
+    const total = sources.length;
+    progressCb?.({ stage: 'start', message: 'Starting funding scan…', percent: 2 });
+    for (let i = 0; i < sources.length; i++) {
+      const source = sources[i];
       try {
+        progressCb?.({ stage: 'source', message: `Scanning ${source}…`, percent: Math.round(((i) / total) * 100) });
         const sourceOpportunities = await this.scanSource(source);
         opportunities.push(...sourceOpportunities);
+        progressCb?.({ stage: 'parsed', message: `Analyzing ${source} results…`, percent: Math.round(((i + 0.6) / total) * 100) });
       } catch (error) {
         console.warn(`Failed to scan ${source}:`, error);
       }
@@ -50,8 +54,11 @@
 
     // Save results
     await this.saveOpportunities(opportunities);
+    progressCb?.({ stage: 'save', message: 'Saving results…', percent: 96 });
     
-    return opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    const sorted = opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    progressCb?.({ stage: 'done', message: `Scan complete — ${sorted.length} opportunities found`, percent: 100 });
+    return sorted;
   }
 
   private async scanSource(program: string): Promise<FundingOpportunity[]> {
diff --git a/src/dashboard/missionControl.ts b/src/dashboard/missionControl.ts
index b7cc2a083f748dc35dd013fe24edce703ae5e138..0b4b0a946d314e52604c7716e001fa4adbee3b6c
--- a/src/dashboard/missionControl.ts
+++ b/src/dashboard/missionControl.ts
@@ -1,4 +1,5 @@
 import { promises as fs } from 'fs';
+import { EventEmitter } from 'events';
 import { StrategicOrchestrator } from '../orchestrator/strategicOrchestrator.js';
 import { UsageAnalyticsAgent } from '../analytics/usageAnalytics.js';
 import { loadKnowledgeBase, toContext } from '../memory/memoryLoader.js';
@@ -28,6 +29,7 @@
   private monitor = new SystemMonitor();
   private fundingScanner = new FundingOpportunityScanner();
   private alerts: MissionControlStatus['alerts'] = [];
+  public events = new EventEmitter();
 
   async getStatus(): Promise<MissionControlStatus> {
     const timestamp = new Date().toISOString();
@@ -103,6 +105,7 @@
       message,
       timestamp: new Date().toISOString()
     });
+    this.events.emit('alert', { level, message });
     
     // Keep only last 50 alerts
     if (this.alerts.length > 50) {
@@ -112,13 +115,16 @@
 
   async executeTask(taskDescription: string, options: { dryRun?: boolean } = {}) {
     await this.addAlert('info', `Starting task: ${taskDescription}`);
+    this.events.emit('progress', { stage: 'task', message: 'Starting task…', percent: 5 });
     
     try {
       const result = await this.orchestrator.execute(taskDescription, options);
       await this.addAlert('info', `Task completed successfully: ${result.taskId}`);
+      this.events.emit('notify', { level: 'success', message: 'Task completed successfully' });
       return result;
     } catch (error) {
       await this.addAlert('error', `Task failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Task execution failed' });
       throw error;
     }
   }
@@ -126,11 +132,13 @@
   async scanFundingOpportunities() {
     await this.addAlert('info', 'Starting EU funding opportunity scan...');
     try {
-      const opportunities = await this.fundingScanner.scanAll();
+      const opportunities = await this.fundingScanner.scanAll((evt) => this.events.emit('progress', evt));
       await this.addAlert('info', `Found ${opportunities.length} funding opportunities`);
+      this.events.emit('notify', { level: 'success', message: `Scan complete — ${opportunities.length} found` });
       return opportunities;
     } catch (error) {
       await this.addAlert('error', `Funding scan failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Funding scan failed' });
       throw error;
     }
   }
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/dashboard.js b/src/dashboard/web/dashboard.js
index cd16d5697fb3c112440336e88cb1eb4ec5d3ffa1..ac1ba0b1ee0290c6ab99f731370b940325187aa1
--- a/src/dashboard/web/dashboard.js
+++ b/src/dashboard/web/dashboard.js
@@ -6,6 +6,8 @@
     this.initTime = new Date();
     this.theme = localStorage.getItem('eufm-theme') || 'light';
     this.sections = ['overview', 'funding', 'activity', 'analytics', 'settings'];
+    this.counts = { opportunities: 0, notes: 0, tools: 0 };
+    this.state = { scanning: false };
     this.init();
   }
 
@@ -21,6 +23,7 @@
     setInterval(() => this.updateTimestamp(), 1000);
     setInterval(() => this.updateUptime(), 1000);
     setInterval(() => this.refresh(), 30000);
+    this.onboardIfFirstRun();
   }
 
   cacheEls() {
@@ -31,6 +34,10 @@
     this.$globalSearch = document.getElementById('global-search');
     this.$searchPanel = document.getElementById('search-panel');
     this.$searchResults = document.getElementById('search-results');
+    this.$toast = document.getElementById('toast-container');
+    this.$scanBtn1 = document.getElementById('scan-funding-btn');
+    this.$scanBtn2 = document.getElementById('scan-funding-btn-2');
+    this.$scanHelp = document.getElementById('scan-help');
   }
 
   bindUI() {
@@ -142,6 +149,73 @@
     return res.text();
   }
 
+  // --- UI feedback helpers ---
+  showToast(message, type = 'info') {
+    if (!this.$toast) return;
+    const div = document.createElement('div');
+    div.className = `toast ${type}`;
+    div.innerHTML = `
+      <span class="material-symbols-rounded">${type === 'success' ? 'check_circle' : type === 'error' ? 'error' : 'info'}</span>
+      <div>${message}</div>
+    `;
+    this.$toast.appendChild(div);
+    setTimeout(() => div.remove(), 4000);
+  }
+
+  setLoadingBtn(btn, loading = true) {
+    if (!btn) return;
+    btn.classList.toggle('loading', !!loading);
+    btn.setAttribute('aria-busy', loading ? 'true' : 'false');
+    btn.disabled = !!loading;
+  }
+
+  insertInlineProgress(targetEl) {
+    if (!targetEl) return null;
+    let wrap = targetEl.parentElement?.querySelector('.progress-inline');
+    if (!wrap) {
+      wrap = document.createElement('div');
+      wrap.className = 'progress-inline';
+      wrap.innerHTML = `<div class="progress-bar"><div class="fill"></div></div><span class="label">Preparing…</span>`;
+      targetEl.parentElement?.appendChild(wrap);
+    }
+    return wrap;
+  }
+
+  setInlineProgress(wrap, percent, label) {
+    if (!wrap) return;
+    const fill = wrap.querySelector('.fill');
+    const lab = wrap.querySelector('.label');
+    if (fill) fill.style.width = `${Math.max(0, Math.min(100, percent))}%`;
+    if (lab && label) lab.textContent = label;
+  }
+
+  onboardIfFirstRun() {
+    const key = 'eufm-onboarded';
+    if (localStorage.getItem(key)) return;
+    const chip = document.getElementById('system-status-chip');
+    const scan = this.$scanBtn1 || this.$scanBtn2;
+    const hints = [];
+    const makeBubble = (target, title, hint) => {
+      if (!target) return;
+      const rect = target.getBoundingClientRect();
+      const b = document.createElement('div');
+      b.className = 'help-bubble';
+      b.style.top = `${window.scrollY + rect.top - 56}px`;
+      b.style.left = `${window.scrollX + rect.left}px`;
+      b.innerHTML = `<div class="title">${title}</div><div class="hint">${hint}</div><div class="help-arrow"></div>`;
+      document.body.appendChild(b);
+      hints.push(b);
+    };
+    makeBubble(chip, 'System Health', 'Live status of agents, uptime and time.');
+    makeBubble(scan, 'Scan for Funding', 'Click to scan EU portals for AI/tech calls.');
+    // Seed helpful chat and search suggestion
+    this.addChatMessage('system', 'Tip: Use the search bar to quickly find opportunities, notes, or alerts.');
+    if (this.$globalSearch && !this.$globalSearch.value) this.$globalSearch.value = 'AI funding';
+    const dismiss = () => { hints.forEach(h => h.remove()); localStorage.setItem(key, '1'); };
+    setTimeout(dismiss, 6000);
+    document.addEventListener('click', dismiss, { once: true });
+  }
+
   async updateStatus() {
     const s = await this.api('/api/status');
     // Agents
@@ -162,6 +236,11 @@
     document.getElementById('progress-text').textContent = `${s.eufmProject.progress}% Complete`;
     document.getElementById('next-milestone').textContent = `Next: ${s.eufmProject.nextMilestone}`;
     document.getElementById('funding-count').textContent = s.eufmProject.fundingOpportunities;
+    // counts for search context
+    this.counts.opportunities = s.eufmProject.fundingOpportunities;
+    document.getElementById('global-search').placeholder = `Search ${this.counts.opportunities} opportunities, ${s.system.memory.notes} notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator`;
+    this.counts.notes = s.system.memory.notes;
+    this.counts.tools = 8;
     // Activity from alerts
     this.renderActivity(s.alerts, 'activity-list');
   }
@@ -184,6 +263,7 @@
         <div class="tool-status status-${t.status}">${t.status}</div>
       </div>
     `).join('');
+    this.counts.tools = Array.isArray(tools) ? tools.length : 0;
   }
 
   async updateSubscriptions() {
@@ -219,6 +299,13 @@
     renderOpps(document.getElementById('opportunity-list'));
     const el2 = document.getElementById('opportunity-list-2');
     if (el2) renderOpps(el2);
+    // Update last scan helper and smart notifications
+    const last = opps.reduce((acc, o) => Math.max(acc, new Date(o.scannedAt || 0).getTime()), 0);
+    if (this.$scanHelp) this.$scanHelp.textContent = last ? `Last scan: ${new Date(last).toLocaleString()} • Found ${opps.length} opportunities` : 'Last scan: —';
+    const closingSoon = opps.filter(o => o.status === 'closing_soon').slice(0, 1);
+    if (closingSoon.length) {
+      this.showToast(`🚨 Deadline approaching: ${closingSoon[0].title} closes soon`, 'info');
+    }
   }
 
   async updateAlerts() {
@@ -236,14 +323,39 @@
     `).join('');
   }
 
+  appendActivity(message, level = 'info') {
+    const list = document.getElementById('activity-list');
+    if (!list) return;
+    const item = document.createElement('div');
+    item.className = 'activity-item';
+    item.innerHTML = `
+      <div class="activity-content">[${String(level).toUpperCase()}] ${message}</div>
+      <div class="activity-time">${new Date().toLocaleTimeString()}</div>`;
+    list.prepend(item);
+  }
+
   async scanFunding() {
-    this.addChatMessage('system', 'Starting EU funding opportunity scan...');
+    if (this.state.scanning) return;
+    this.state.scanning = true;
+    this.addChatMessage('system', 'Scanning EU portals…');
+    this.showToast('Scanning EU portals for opportunities…', 'info');
+    const btns = [this.$scanBtn1, this.$scanBtn2];
+    btns.forEach(b => this.setLoadingBtn(b, true));
+    const progressHost = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+    this.setInlineProgress(progressHost, 5, 'Contacting sources…');
     try {
-      await this.api('/api/scan-funding', { method: 'POST' });
-      this.addChatMessage('system', 'Scan complete. Updating opportunities...');
+      const res = await this.api('/api/scan-funding', { method: 'POST' });
+      this.addChatMessage('system', '✅ Scan complete - updating opportunities…');
+      this.showToast(`✅ ${res?.message || 'Scan complete'}${res?.found ? ` • ${res.found} opportunities` : ''}`, 'success');
       await this.updateOpportunities();
     } catch (e) {
       this.addChatMessage('system', 'Funding scan failed. Check logs.');
+      this.showToast('Funding scan failed', 'error');
+    }
+    finally {
+      btns.forEach(b => this.setLoadingBtn(b, false));
+      this.state.scanning = false;
+      if (progressHost) progressHost.remove();
     }
   }
 
@@ -253,15 +365,24 @@
     const task = document.getElementById('task-input').value.trim();
     if (!task) return;
     this.addChatMessage('user', `${dryRun ? 'Dry Run' : 'Execute'}: ${task}`);
+    this.showToast(`${dryRun ? 'Analyzing' : 'Executing'} task…`, 'info');
+    const execBtn = document.getElementById('submit-task-btn');
+    const dryBtn = document.getElementById('submit-task-dry-btn');
+    [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, true));
     try {
       await this.api('/api/execute', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ task, dryRun }) });
       this.addChatMessage('system', dryRun ? 'Task analyzed successfully.' : 'Task completed successfully.');
+      this.showToast(dryRun ? '✅ Analysis complete' : '✅ Task completed', 'success');
       document.getElementById('task-modal').classList.remove('open');
       document.getElementById('task-input').value = '';
       await this.refresh();
     } catch (e) {
       this.addChatMessage('system', 'Task execution failed.');
+      this.showToast('Task execution failed', 'error');
     }
+    finally {
+      [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, false));
+    }
   }
 
   addChatMessage(type, message) {
@@ -292,15 +413,31 @@
   }
 
   async search(q) {
-    if (!q || q.trim().length < 2) { this.$searchPanel.hidden = true; return; }
+    if (!q || q.trim().length < 2) {
+      // Suggestions
+      this.$searchPanel.hidden = false;
+      this.$searchResults.innerHTML = `
+        <div class="search-item">
+          <div class="type">Suggestions</div>
+          <div class="title">Searching ${this.counts.opportunities} opportunities, ${this.counts.notes} notes, ${this.counts.tools} tools</div>
+          <div class="snippet">Try: <code>AI funding</code>, <code>Horizon Europe</code>, <code>EIC Accelerator</code></div>
+        </div>
+      `;
+      return;
+    }
     try {
       const results = await this.api(`/api/search?q=${encodeURIComponent(q)}`);
       this.$searchPanel.hidden = false;
+      const hi = (text) => {
+        if (!text) return '';
+        const re = new RegExp(`(${q.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&')})`, 'ig');
+        return String(text).replace(re, '<mark>$1</mark>');
+      };
       this.$searchResults.innerHTML = results.map(r => `
         <div class="search-item">
           <div class="type">${r.type}</div>
-          <div class="title">${r.title}</div>
-          <div class="snippet">${r.snippet || ''}</div>
+          <div class="title">${hi(r.title)}</div>
+          <div class="snippet">${hi(r.snippet || '')}</div>
         </div>
       `).join('');
     } catch {
@@ -314,6 +451,7 @@
     a.href = URL.createObjectURL(blob);
     a.download = `eufm_status_${Date.now()}.json`;
     a.click();
+    this.showToast('📦 Exported system status JSON', 'success');
   }
 
   connectWS() {
@@ -327,6 +465,13 @@
           const msg = JSON.parse(evt.data);
           if (msg.type === 'status_update') { this.applyStatus(msg.data); }
           if (msg.type === 'funding_opportunities') { this.updateOpportunities(); }
+          if (msg.type === 'activity') { this.addChatMessage('system', msg.message); this.appendActivity(msg.message); }
+          if (msg.type === 'progress' && this.state.scanning) {
+            const host = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+            if (msg.percent != null) this.setInlineProgress(host, msg.percent, msg.message || '');
+          }
+          if (msg.type === 'notify') { this.showToast(msg.message, msg.level || 'info'); }
+          if (msg.type === 'task_result') { this.addChatMessage('system', `Task result: ${msg.data?.summary || 'completed'}`); }
         } catch {}
       };
     } catch {}
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..a198345f17ddc65bfab84345163aef7be07c8efc
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>
@@ -222,7 +223,7 @@
               <span class="material-symbols-rounded">work</span>
               <h3>Live Opportunities</h3>
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
@@ -279,10 +280,11 @@
             </label>
           </div>
           <div class="row">
-            <button class="btn" id="export-json-btn">
+            <button class="btn" id="export-json-btn" title="Download a JSON snapshot of system status">
               <span class="material-symbols-rounded">download</span>
               <span>Export status JSON</span>
             </button>
+            <small class="meta">Includes agents, costs, memory, alerts and project status</small>
           </div>
         </div>
       </section>
@@ -295,6 +297,7 @@
       <button class="close" aria-label="Close" tabindex="0">×</button>
       <h3 id="task-title">Execute Task</h3>
       <textarea id="task-input" placeholder="Describe the task you want to execute..." aria-label="Task description"></textarea>
+      <div class="meta">Examples: analyze funding opportunities; generate proposal outline; summarize system status</div>
       <div class="modal-actions">
         <button class="btn primary" id="submit-task-btn">Execute</button>
         <button class="btn" id="submit-task-dry-btn">Dry Run</button>
@@ -307,6 +310,9 @@
     <div class="search-results" id="search-results" role="listbox" aria-label="Search results"></div>
   </div>
 
+  <!-- Toasts -->
+  <div id="toast-container" class="toast-container" aria-live="polite"></div>
+
   <script src="dashboard.js"></script>
 </body>
 </html>

[2025-09-05T17:30:11] exec bash -lc "rg -n \"showToast|progress-inline|data-help|scan-help|onboarded|notify'|EventEmitter\" -S" in /Users/panda/Desktop/EUFM
[2025-09-05T17:30:11] bash -lc "rg -n \"showToast|progress-inline|data-help|scan-help|onboarded|notify'|EventEmitter\" -S" succeeded in 115ms:
src/dashboard/dashboardServer.ts:187:    this.missionControl.events.on('notify', (evt) => {
src/dashboard/dashboardServer.ts:188:      const payload = JSON.stringify({ type: 'notify', level: evt.level, message: evt.message });
src/dashboard/web/dashboard.js:40:    this.$scanHelp = document.getElementById('scan-help');
src/dashboard/web/dashboard.js:153:  showToast(message, type = 'info') {
src/dashboard/web/dashboard.js:174:    let wrap = targetEl.parentElement?.querySelector('.progress-inline');
src/dashboard/web/dashboard.js:177:      wrap.className = 'progress-inline';
src/dashboard/web/dashboard.js:193:    const key = 'eufm-onboarded';
src/dashboard/web/dashboard.js:307:      this.showToast(`🚨 Deadline approaching: ${closingSoon[0].title} closes soon`, 'info');
src/dashboard/web/dashboard.js:341:    this.showToast('Scanning EU portals for opportunities…', 'info');
src/dashboard/web/dashboard.js:349:      this.showToast(`✅ ${res?.message || 'Scan complete'}${res?.found ? ` • ${res.found} opportunities` : ''}`, 'success');
src/dashboard/web/dashboard.js:353:      this.showToast('Funding scan failed', 'error');
src/dashboard/web/dashboard.js:368:    this.showToast(`${dryRun ? 'Analyzing' : 'Executing'} task…`, 'info');
src/dashboard/web/dashboard.js:375:      this.showToast(dryRun ? '✅ Analysis complete' : '✅ Task completed', 'success');
src/dashboard/web/dashboard.js:381:      this.showToast('Task execution failed', 'error');
src/dashboard/web/dashboard.js:454:    this.showToast('📦 Exported system status JSON', 'success');
src/dashboard/web/dashboard.js:473:          if (msg.type === 'notify') { this.showToast(msg.message, msg.level || 'info'); }
src/dashboard/missionControl.ts:2:import { EventEmitter } from 'events';
src/dashboard/missionControl.ts:32:  public events = new EventEmitter();
src/dashboard/missionControl.ts:123:      this.events.emit('notify', { level: 'success', message: 'Task completed successfully' });
src/dashboard/missionControl.ts:127:      this.events.emit('notify', { level: 'error', message: 'Task execution failed' });
[2025-09-05T17:30:11] tokens used: 376
[2025-09-05T17:30:11] turn diff:
diff --git a/src/dashboard/dashboardServer.ts b/src/dashboard/dashboardServer.ts
index 848b8052607fea10292180ae5937190cada95a36..2f64c63a81231cee4042d957e425c63255be3ee9
--- a/src/dashboard/dashboardServer.ts
+++ b/src/dashboard/dashboardServer.ts
@@ -49,7 +49,7 @@
     this.app.post('/api/scan-funding', async (req, res) => {
       try {
         const opportunities = await this.missionControl.scanFundingOpportunities();
-        res.json(opportunities);
+        res.json({ message: 'Funding scan complete', found: opportunities.length });
       } catch (error) {
         res.status(500).json({ error: 'Funding scan failed' });
       }
@@ -175,6 +175,20 @@
       });
     });
 
+    // Relay mission control events to all clients
+    this.missionControl.events.on('alert', (evt) => {
+      const payload = JSON.stringify({ type: 'activity', message: `[${evt.level.toUpperCase()}] ${evt.message}` });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('progress', (evt) => {
+      const payload = JSON.stringify({ type: 'progress', ...evt });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('notify', (evt) => {
+      const payload = JSON.stringify({ type: 'notify', level: evt.level, message: evt.message });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+
     // Broadcast status updates every 30 seconds
     setInterval(() => {
       this.broadcastStatusUpdate();
diff --git a/src/dashboard/fundingOpportunityScanner.ts b/src/dashboard/fundingOpportunityScanner.ts
index ec1230aa52b2a4f6355a228632f4cbaed0a3799b..c24b9505f3661908fdcbfcbb0b517e8fb43719df
--- a/src/dashboard/fundingOpportunityScanner.ts
+++ b/src/dashboard/fundingOpportunityScanner.ts
@@ -28,7 +28,7 @@
     await fs.mkdir(this.baseDir, { recursive: true }).catch(() => {});
   }
 
-  async scanAll(): Promise<FundingOpportunity[]> {
+  async scanAll(progressCb?: (evt: { stage: string; message: string; percent?: number }) => void): Promise<FundingOpportunity[]> {
     const sources = [
       'Horizon Europe',
       'Digital Europe Programme', 
@@ -38,11 +38,15 @@
     ];
 
     const opportunities: FundingOpportunity[] = [];
-    
-    for (const source of sources) {
+    const total = sources.length;
+    progressCb?.({ stage: 'start', message: 'Starting funding scan…', percent: 2 });
+    for (let i = 0; i < sources.length; i++) {
+      const source = sources[i];
       try {
+        progressCb?.({ stage: 'source', message: `Scanning ${source}…`, percent: Math.round(((i) / total) * 100) });
         const sourceOpportunities = await this.scanSource(source);
         opportunities.push(...sourceOpportunities);
+        progressCb?.({ stage: 'parsed', message: `Analyzing ${source} results…`, percent: Math.round(((i + 0.6) / total) * 100) });
       } catch (error) {
         console.warn(`Failed to scan ${source}:`, error);
       }
@@ -50,8 +54,11 @@
 
     // Save results
     await this.saveOpportunities(opportunities);
+    progressCb?.({ stage: 'save', message: 'Saving results…', percent: 96 });
     
-    return opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    const sorted = opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    progressCb?.({ stage: 'done', message: `Scan complete — ${sorted.length} opportunities found`, percent: 100 });
+    return sorted;
   }
 
   private async scanSource(program: string): Promise<FundingOpportunity[]> {
diff --git a/src/dashboard/missionControl.ts b/src/dashboard/missionControl.ts
index b7cc2a083f748dc35dd013fe24edce703ae5e138..0b4b0a946d314e52604c7716e001fa4adbee3b6c
--- a/src/dashboard/missionControl.ts
+++ b/src/dashboard/missionControl.ts
@@ -1,4 +1,5 @@
 import { promises as fs } from 'fs';
+import { EventEmitter } from 'events';
 import { StrategicOrchestrator } from '../orchestrator/strategicOrchestrator.js';
 import { UsageAnalyticsAgent } from '../analytics/usageAnalytics.js';
 import { loadKnowledgeBase, toContext } from '../memory/memoryLoader.js';
@@ -28,6 +29,7 @@
   private monitor = new SystemMonitor();
   private fundingScanner = new FundingOpportunityScanner();
   private alerts: MissionControlStatus['alerts'] = [];
+  public events = new EventEmitter();
 
   async getStatus(): Promise<MissionControlStatus> {
     const timestamp = new Date().toISOString();
@@ -103,6 +105,7 @@
       message,
       timestamp: new Date().toISOString()
     });
+    this.events.emit('alert', { level, message });
     
     // Keep only last 50 alerts
     if (this.alerts.length > 50) {
@@ -112,13 +115,16 @@
 
   async executeTask(taskDescription: string, options: { dryRun?: boolean } = {}) {
     await this.addAlert('info', `Starting task: ${taskDescription}`);
+    this.events.emit('progress', { stage: 'task', message: 'Starting task…', percent: 5 });
     
     try {
       const result = await this.orchestrator.execute(taskDescription, options);
       await this.addAlert('info', `Task completed successfully: ${result.taskId}`);
+      this.events.emit('notify', { level: 'success', message: 'Task completed successfully' });
       return result;
     } catch (error) {
       await this.addAlert('error', `Task failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Task execution failed' });
       throw error;
     }
   }
@@ -126,11 +132,13 @@
   async scanFundingOpportunities() {
     await this.addAlert('info', 'Starting EU funding opportunity scan...');
     try {
-      const opportunities = await this.fundingScanner.scanAll();
+      const opportunities = await this.fundingScanner.scanAll((evt) => this.events.emit('progress', evt));
       await this.addAlert('info', `Found ${opportunities.length} funding opportunities`);
+      this.events.emit('notify', { level: 'success', message: `Scan complete — ${opportunities.length} found` });
       return opportunities;
     } catch (error) {
       await this.addAlert('error', `Funding scan failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Funding scan failed' });
       throw error;
     }
   }
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/dashboard.js b/src/dashboard/web/dashboard.js
index cd16d5697fb3c112440336e88cb1eb4ec5d3ffa1..ac1ba0b1ee0290c6ab99f731370b940325187aa1
--- a/src/dashboard/web/dashboard.js
+++ b/src/dashboard/web/dashboard.js
@@ -6,6 +6,8 @@
     this.initTime = new Date();
     this.theme = localStorage.getItem('eufm-theme') || 'light';
     this.sections = ['overview', 'funding', 'activity', 'analytics', 'settings'];
+    this.counts = { opportunities: 0, notes: 0, tools: 0 };
+    this.state = { scanning: false };
     this.init();
   }
 
@@ -21,6 +23,7 @@
     setInterval(() => this.updateTimestamp(), 1000);
     setInterval(() => this.updateUptime(), 1000);
     setInterval(() => this.refresh(), 30000);
+    this.onboardIfFirstRun();
   }
 
   cacheEls() {
@@ -31,6 +34,10 @@
     this.$globalSearch = document.getElementById('global-search');
     this.$searchPanel = document.getElementById('search-panel');
     this.$searchResults = document.getElementById('search-results');
+    this.$toast = document.getElementById('toast-container');
+    this.$scanBtn1 = document.getElementById('scan-funding-btn');
+    this.$scanBtn2 = document.getElementById('scan-funding-btn-2');
+    this.$scanHelp = document.getElementById('scan-help');
   }
 
   bindUI() {
@@ -142,6 +149,73 @@
     return res.text();
   }
 
+  // --- UI feedback helpers ---
+  showToast(message, type = 'info') {
+    if (!this.$toast) return;
+    const div = document.createElement('div');
+    div.className = `toast ${type}`;
+    div.innerHTML = `
+      <span class="material-symbols-rounded">${type === 'success' ? 'check_circle' : type === 'error' ? 'error' : 'info'}</span>
+      <div>${message}</div>
+    `;
+    this.$toast.appendChild(div);
+    setTimeout(() => div.remove(), 4000);
+  }
+
+  setLoadingBtn(btn, loading = true) {
+    if (!btn) return;
+    btn.classList.toggle('loading', !!loading);
+    btn.setAttribute('aria-busy', loading ? 'true' : 'false');
+    btn.disabled = !!loading;
+  }
+
+  insertInlineProgress(targetEl) {
+    if (!targetEl) return null;
+    let wrap = targetEl.parentElement?.querySelector('.progress-inline');
+    if (!wrap) {
+      wrap = document.createElement('div');
+      wrap.className = 'progress-inline';
+      wrap.innerHTML = `<div class="progress-bar"><div class="fill"></div></div><span class="label">Preparing…</span>`;
+      targetEl.parentElement?.appendChild(wrap);
+    }
+    return wrap;
+  }
+
+  setInlineProgress(wrap, percent, label) {
+    if (!wrap) return;
+    const fill = wrap.querySelector('.fill');
+    const lab = wrap.querySelector('.label');
+    if (fill) fill.style.width = `${Math.max(0, Math.min(100, percent))}%`;
+    if (lab && label) lab.textContent = label;
+  }
+
+  onboardIfFirstRun() {
+    const key = 'eufm-onboarded';
+    if (localStorage.getItem(key)) return;
+    const chip = document.getElementById('system-status-chip');
+    const scan = this.$scanBtn1 || this.$scanBtn2;
+    const hints = [];
+    const makeBubble = (target, title, hint) => {
+      if (!target) return;
+      const rect = target.getBoundingClientRect();
+      const b = document.createElement('div');
+      b.className = 'help-bubble';
+      b.style.top = `${window.scrollY + rect.top - 56}px`;
+      b.style.left = `${window.scrollX + rect.left}px`;
+      b.innerHTML = `<div class="title">${title}</div><div class="hint">${hint}</div><div class="help-arrow"></div>`;
+      document.body.appendChild(b);
+      hints.push(b);
+    };
+    makeBubble(chip, 'System Health', 'Live status of agents, uptime and time.');
+    makeBubble(scan, 'Scan for Funding', 'Click to scan EU portals for AI/tech calls.');
+    // Seed helpful chat and search suggestion
+    this.addChatMessage('system', 'Tip: Use the search bar to quickly find opportunities, notes, or alerts.');
+    if (this.$globalSearch && !this.$globalSearch.value) this.$globalSearch.value = 'AI funding';
+    const dismiss = () => { hints.forEach(h => h.remove()); localStorage.setItem(key, '1'); };
+    setTimeout(dismiss, 6000);
+    document.addEventListener('click', dismiss, { once: true });
+  }
+
   async updateStatus() {
     const s = await this.api('/api/status');
     // Agents
@@ -162,6 +236,11 @@
     document.getElementById('progress-text').textContent = `${s.eufmProject.progress}% Complete`;
     document.getElementById('next-milestone').textContent = `Next: ${s.eufmProject.nextMilestone}`;
     document.getElementById('funding-count').textContent = s.eufmProject.fundingOpportunities;
+    // counts for search context
+    this.counts.opportunities = s.eufmProject.fundingOpportunities;
+    document.getElementById('global-search').placeholder = `Search ${this.counts.opportunities} opportunities, ${s.system.memory.notes} notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator`;
+    this.counts.notes = s.system.memory.notes;
+    this.counts.tools = 8;
     // Activity from alerts
     this.renderActivity(s.alerts, 'activity-list');
   }
@@ -184,6 +263,7 @@
         <div class="tool-status status-${t.status}">${t.status}</div>
       </div>
     `).join('');
+    this.counts.tools = Array.isArray(tools) ? tools.length : 0;
   }
 
   async updateSubscriptions() {
@@ -219,6 +299,13 @@
     renderOpps(document.getElementById('opportunity-list'));
     const el2 = document.getElementById('opportunity-list-2');
     if (el2) renderOpps(el2);
+    // Update last scan helper and smart notifications
+    const last = opps.reduce((acc, o) => Math.max(acc, new Date(o.scannedAt || 0).getTime()), 0);
+    if (this.$scanHelp) this.$scanHelp.textContent = last ? `Last scan: ${new Date(last).toLocaleString()} • Found ${opps.length} opportunities` : 'Last scan: —';
+    const closingSoon = opps.filter(o => o.status === 'closing_soon').slice(0, 1);
+    if (closingSoon.length) {
+      this.showToast(`🚨 Deadline approaching: ${closingSoon[0].title} closes soon`, 'info');
+    }
   }
 
   async updateAlerts() {
@@ -236,14 +323,39 @@
     `).join('');
   }
 
+  appendActivity(message, level = 'info') {
+    const list = document.getElementById('activity-list');
+    if (!list) return;
+    const item = document.createElement('div');
+    item.className = 'activity-item';
+    item.innerHTML = `
+      <div class="activity-content">[${String(level).toUpperCase()}] ${message}</div>
+      <div class="activity-time">${new Date().toLocaleTimeString()}</div>`;
+    list.prepend(item);
+  }
+
   async scanFunding() {
-    this.addChatMessage('system', 'Starting EU funding opportunity scan...');
+    if (this.state.scanning) return;
+    this.state.scanning = true;
+    this.addChatMessage('system', 'Scanning EU portals…');
+    this.showToast('Scanning EU portals for opportunities…', 'info');
+    const btns = [this.$scanBtn1, this.$scanBtn2];
+    btns.forEach(b => this.setLoadingBtn(b, true));
+    const progressHost = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+    this.setInlineProgress(progressHost, 5, 'Contacting sources…');
     try {
-      await this.api('/api/scan-funding', { method: 'POST' });
-      this.addChatMessage('system', 'Scan complete. Updating opportunities...');
+      const res = await this.api('/api/scan-funding', { method: 'POST' });
+      this.addChatMessage('system', '✅ Scan complete - updating opportunities…');
+      this.showToast(`✅ ${res?.message || 'Scan complete'}${res?.found ? ` • ${res.found} opportunities` : ''}`, 'success');
       await this.updateOpportunities();
     } catch (e) {
       this.addChatMessage('system', 'Funding scan failed. Check logs.');
+      this.showToast('Funding scan failed', 'error');
+    }
+    finally {
+      btns.forEach(b => this.setLoadingBtn(b, false));
+      this.state.scanning = false;
+      if (progressHost) progressHost.remove();
     }
   }
 
@@ -253,15 +365,24 @@
     const task = document.getElementById('task-input').value.trim();
     if (!task) return;
     this.addChatMessage('user', `${dryRun ? 'Dry Run' : 'Execute'}: ${task}`);
+    this.showToast(`${dryRun ? 'Analyzing' : 'Executing'} task…`, 'info');
+    const execBtn = document.getElementById('submit-task-btn');
+    const dryBtn = document.getElementById('submit-task-dry-btn');
+    [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, true));
     try {
       await this.api('/api/execute', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ task, dryRun }) });
       this.addChatMessage('system', dryRun ? 'Task analyzed successfully.' : 'Task completed successfully.');
+      this.showToast(dryRun ? '✅ Analysis complete' : '✅ Task completed', 'success');
       document.getElementById('task-modal').classList.remove('open');
       document.getElementById('task-input').value = '';
       await this.refresh();
     } catch (e) {
       this.addChatMessage('system', 'Task execution failed.');
+      this.showToast('Task execution failed', 'error');
     }
+    finally {
+      [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, false));
+    }
   }
 
   addChatMessage(type, message) {
@@ -292,15 +413,31 @@
   }
 
   async search(q) {
-    if (!q || q.trim().length < 2) { this.$searchPanel.hidden = true; return; }
+    if (!q || q.trim().length < 2) {
+      // Suggestions
+      this.$searchPanel.hidden = false;
+      this.$searchResults.innerHTML = `
+        <div class="search-item">
+          <div class="type">Suggestions</div>
+          <div class="title">Searching ${this.counts.opportunities} opportunities, ${this.counts.notes} notes, ${this.counts.tools} tools</div>
+          <div class="snippet">Try: <code>AI funding</code>, <code>Horizon Europe</code>, <code>EIC Accelerator</code></div>
+        </div>
+      `;
+      return;
+    }
     try {
       const results = await this.api(`/api/search?q=${encodeURIComponent(q)}`);
       this.$searchPanel.hidden = false;
+      const hi = (text) => {
+        if (!text) return '';
+        const re = new RegExp(`(${q.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&')})`, 'ig');
+        return String(text).replace(re, '<mark>$1</mark>');
+      };
       this.$searchResults.innerHTML = results.map(r => `
         <div class="search-item">
           <div class="type">${r.type}</div>
-          <div class="title">${r.title}</div>
-          <div class="snippet">${r.snippet || ''}</div>
+          <div class="title">${hi(r.title)}</div>
+          <div class="snippet">${hi(r.snippet || '')}</div>
         </div>
       `).join('');
     } catch {
@@ -314,6 +451,7 @@
     a.href = URL.createObjectURL(blob);
     a.download = `eufm_status_${Date.now()}.json`;
     a.click();
+    this.showToast('📦 Exported system status JSON', 'success');
   }
 
   connectWS() {
@@ -327,6 +465,13 @@
           const msg = JSON.parse(evt.data);
           if (msg.type === 'status_update') { this.applyStatus(msg.data); }
           if (msg.type === 'funding_opportunities') { this.updateOpportunities(); }
+          if (msg.type === 'activity') { this.addChatMessage('system', msg.message); this.appendActivity(msg.message); }
+          if (msg.type === 'progress' && this.state.scanning) {
+            const host = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+            if (msg.percent != null) this.setInlineProgress(host, msg.percent, msg.message || '');
+          }
+          if (msg.type === 'notify') { this.showToast(msg.message, msg.level || 'info'); }
+          if (msg.type === 'task_result') { this.addChatMessage('system', `Task result: ${msg.data?.summary || 'completed'}`); }
         } catch {}
       };
     } catch {}
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..a198345f17ddc65bfab84345163aef7be07c8efc
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>
@@ -222,7 +223,7 @@
               <span class="material-symbols-rounded">work</span>
               <h3>Live Opportunities</h3>
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
@@ -279,10 +280,11 @@
             </label>
           </div>
           <div class="row">
-            <button class="btn" id="export-json-btn">
+            <button class="btn" id="export-json-btn" title="Download a JSON snapshot of system status">
               <span class="material-symbols-rounded">download</span>
               <span>Export status JSON</span>
             </button>
+            <small class="meta">Includes agents, costs, memory, alerts and project status</small>
           </div>
         </div>
       </section>
@@ -295,6 +297,7 @@
       <button class="close" aria-label="Close" tabindex="0">×</button>
       <h3 id="task-title">Execute Task</h3>
       <textarea id="task-input" placeholder="Describe the task you want to execute..." aria-label="Task description"></textarea>
+      <div class="meta">Examples: analyze funding opportunities; generate proposal outline; summarize system status</div>
       <div class="modal-actions">
         <button class="btn primary" id="submit-task-btn">Execute</button>
         <button class="btn" id="submit-task-dry-btn">Dry Run</button>
@@ -307,6 +310,9 @@
     <div class="search-results" id="search-results" role="listbox" aria-label="Search results"></div>
   </div>
 
+  <!-- Toasts -->
+  <div id="toast-container" class="toast-container" aria-live="polite"></div>
+
   <script src="dashboard.js"></script>
 </body>
 </html>


[2025-09-05T17:30:17] thinking

**Summarizing development updates**

I'm considering whether to add button state classes for success and error, but it might not be necessary. We've added WebSocket progress events for real-time operation updates, though adding a search endpoint may not be needed. I can ensure imports use the .js extension, focusing on events in missionControl.ts. Updating documentation is not strictly required, but it’s valuable since the dashboard should teach users. I’ll finalize a short, structured message summarizing the changes while keeping headers and bullets clear.
[2025-09-05T17:30:20] codex

I explored the dashboard code and implemented targeted UI/UX and API improvements to make it intuitive, informative, and responsive.

**What I Changed**
- Added real feedback: loading, progress, toasts, real-time activity.
- Clarified actions: tooltips, help text, examples, contextual search.
- Guided onboarding: first‑time hints and suggestion seeding.

**Frontend (src/dashboard/web)**
- dashboard.css
  - Spinner: `.spinner`, `.btn.loading`, `.icon-btn.loading`.
  - Toasts: `.toast-container`, `.toast.success|error|info`.
  - Tooltips: `[data-help]:hover::after` for helpful descriptions.
  - Progress: `.progress-inline`, `.progress-bar .fill`.
  - Button states: `.btn.success`, `.btn.error`.
  - Search highlights: `.search-item mark`.

- index.html
  - Search: contextual placeholder + `data-help` tooltip; suggestions handled in JS.
  - EU Funding: descriptive `title` + `data-help` on scan/export; “Last scan” meta line.
  - Chat/Tasks: clearer `title` + examples under textarea; better input placeholder.
  - App bar: improved export and shortcuts tooltips; contextual help text.
  - Toast container added: `#toast-container`.

- dashboard.js
  - Utilities: `showToast(type)`, button loading states, inline progress helpers.
  - Loading states: “Scan Now”, Execute/Dry Run, Export status JSON.
  - Progress: shows percent + step label during scans (via WebSocket progress events).
  - Activity: appends live events to the Activity feed; keeps alerts rendering.
  - Contextual search:
    - Suggestions when query <2 chars with “Searching X/Y/Z” and examples.
    - Highlights matches with `<mark>`.
    - Dynamic placeholder updates with live counts.
  - Smart notifications: closing soon deadlines trigger info toast.
  - Onboarding: first‑run guided bubbles for System Health and Scan; seeds helpful chat tip and sets default search query (“AI funding”).
  - WebSocket: handles `activity`, `progress`, `notify`, and `task_result` messages.
  - Exports: shows success toast after exporting status JSON.

**Backend (src/dashboard)**
- fundingOpportunityScanner.ts
  - Added progress callback to `scanAll(progressCb)`.
  - Emits granular stages with percent for each source; sends final “done” with count.

- missionControl.ts
  - Added `EventEmitter` (`events` property).
  - Emits:
    - `alert` when alerts update,
    - `progress` during scans/tasks,
    - `notify` for success/error summaries.
  - Existing alerts retained and still returned by `/api/status`.

- dashboardServer.ts
  - WebSocket broadcasts:
    - `activity` (alerts),
    - `progress` (long‑running ops),
    - `notify` (success/error notices).
  - `/api/scan-funding` now returns `{ message, found }` for better feedback.

**How This Addresses The Issues**
- No visual feedback
  - Buttons show spinners; progress bar appears during scans; toasts confirm success/error; activity feed updates live via WebSocket.
- Unclear buttons
  - All primary actions have `title` and `data-help` tooltips; help text explains scope (e.g., what Scan looks at; what Export includes).
- Missing helpful information
  - First‑run guided bubbles; chat tip; search suggestions and scope counts; “Last scan” indicator; notifications for deadlines.

**Smart Defaults**
- Search prefilled on first run; dynamic placeholder with live counts.
- Auto-refresh via existing timers + live WS pushes.
- Suggestions presented inline on search focus.

**Examples Of New UI Behaviors**
- Scan funding
  - Button shows spinner; progress “Contacting sources… → Scanning Horizon Europe… → Saving results…”.
  - Toast: “✅ Scan complete — 12 opportunities”.
  - Activity: “Scanning Horizon Europe…”, “Scan complete…”.
- Execute task
  - Spinner on Execute/Dry Run; toast on success/failure; live result message if sent over WS.
- Search
  - “Searching 29 opportunities, 21 notes, 8 tools”; highlights matches; suggestions when short queries.

**Next Options**
- Want me to run the dashboard locally and validate interactions end‑to‑end?
- Add SSE fallback for environments without WebSocket?
- Extend onboarding into a multi-step guided tour with “Next” actions?
[2025-09-05T17:30:32] tokens used: 4027
[2025-09-05T17:30:32] turn diff:
diff --git a/src/dashboard/dashboardServer.ts b/src/dashboard/dashboardServer.ts
index 848b8052607fea10292180ae5937190cada95a36..2f64c63a81231cee4042d957e425c63255be3ee9
--- a/src/dashboard/dashboardServer.ts
+++ b/src/dashboard/dashboardServer.ts
@@ -49,7 +49,7 @@
     this.app.post('/api/scan-funding', async (req, res) => {
       try {
         const opportunities = await this.missionControl.scanFundingOpportunities();
-        res.json(opportunities);
+        res.json({ message: 'Funding scan complete', found: opportunities.length });
       } catch (error) {
         res.status(500).json({ error: 'Funding scan failed' });
       }
@@ -175,6 +175,20 @@
       });
     });
 
+    // Relay mission control events to all clients
+    this.missionControl.events.on('alert', (evt) => {
+      const payload = JSON.stringify({ type: 'activity', message: `[${evt.level.toUpperCase()}] ${evt.message}` });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('progress', (evt) => {
+      const payload = JSON.stringify({ type: 'progress', ...evt });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+    this.missionControl.events.on('notify', (evt) => {
+      const payload = JSON.stringify({ type: 'notify', level: evt.level, message: evt.message });
+      this.wss.clients.forEach((client) => { if (client.readyState === 1) client.send(payload); });
+    });
+
     // Broadcast status updates every 30 seconds
     setInterval(() => {
       this.broadcastStatusUpdate();
diff --git a/src/dashboard/fundingOpportunityScanner.ts b/src/dashboard/fundingOpportunityScanner.ts
index ec1230aa52b2a4f6355a228632f4cbaed0a3799b..c24b9505f3661908fdcbfcbb0b517e8fb43719df
--- a/src/dashboard/fundingOpportunityScanner.ts
+++ b/src/dashboard/fundingOpportunityScanner.ts
@@ -28,7 +28,7 @@
     await fs.mkdir(this.baseDir, { recursive: true }).catch(() => {});
   }
 
-  async scanAll(): Promise<FundingOpportunity[]> {
+  async scanAll(progressCb?: (evt: { stage: string; message: string; percent?: number }) => void): Promise<FundingOpportunity[]> {
     const sources = [
       'Horizon Europe',
       'Digital Europe Programme', 
@@ -38,11 +38,15 @@
     ];
 
     const opportunities: FundingOpportunity[] = [];
-    
-    for (const source of sources) {
+    const total = sources.length;
+    progressCb?.({ stage: 'start', message: 'Starting funding scan…', percent: 2 });
+    for (let i = 0; i < sources.length; i++) {
+      const source = sources[i];
       try {
+        progressCb?.({ stage: 'source', message: `Scanning ${source}…`, percent: Math.round(((i) / total) * 100) });
         const sourceOpportunities = await this.scanSource(source);
         opportunities.push(...sourceOpportunities);
+        progressCb?.({ stage: 'parsed', message: `Analyzing ${source} results…`, percent: Math.round(((i + 0.6) / total) * 100) });
       } catch (error) {
         console.warn(`Failed to scan ${source}:`, error);
       }
@@ -50,8 +54,11 @@
 
     // Save results
     await this.saveOpportunities(opportunities);
+    progressCb?.({ stage: 'save', message: 'Saving results…', percent: 96 });
     
-    return opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    const sorted = opportunities.sort((a, b) => b.relevanceScore - a.relevanceScore);
+    progressCb?.({ stage: 'done', message: `Scan complete — ${sorted.length} opportunities found`, percent: 100 });
+    return sorted;
   }
 
   private async scanSource(program: string): Promise<FundingOpportunity[]> {
diff --git a/src/dashboard/missionControl.ts b/src/dashboard/missionControl.ts
index b7cc2a083f748dc35dd013fe24edce703ae5e138..0b4b0a946d314e52604c7716e001fa4adbee3b6c
--- a/src/dashboard/missionControl.ts
+++ b/src/dashboard/missionControl.ts
@@ -1,4 +1,5 @@
 import { promises as fs } from 'fs';
+import { EventEmitter } from 'events';
 import { StrategicOrchestrator } from '../orchestrator/strategicOrchestrator.js';
 import { UsageAnalyticsAgent } from '../analytics/usageAnalytics.js';
 import { loadKnowledgeBase, toContext } from '../memory/memoryLoader.js';
@@ -28,6 +29,7 @@
   private monitor = new SystemMonitor();
   private fundingScanner = new FundingOpportunityScanner();
   private alerts: MissionControlStatus['alerts'] = [];
+  public events = new EventEmitter();
 
   async getStatus(): Promise<MissionControlStatus> {
     const timestamp = new Date().toISOString();
@@ -103,6 +105,7 @@
       message,
       timestamp: new Date().toISOString()
     });
+    this.events.emit('alert', { level, message });
     
     // Keep only last 50 alerts
     if (this.alerts.length > 50) {
@@ -112,13 +115,16 @@
 
   async executeTask(taskDescription: string, options: { dryRun?: boolean } = {}) {
     await this.addAlert('info', `Starting task: ${taskDescription}`);
+    this.events.emit('progress', { stage: 'task', message: 'Starting task…', percent: 5 });
     
     try {
       const result = await this.orchestrator.execute(taskDescription, options);
       await this.addAlert('info', `Task completed successfully: ${result.taskId}`);
+      this.events.emit('notify', { level: 'success', message: 'Task completed successfully' });
       return result;
     } catch (error) {
       await this.addAlert('error', `Task failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Task execution failed' });
       throw error;
     }
   }
@@ -126,11 +132,13 @@
   async scanFundingOpportunities() {
     await this.addAlert('info', 'Starting EU funding opportunity scan...');
     try {
-      const opportunities = await this.fundingScanner.scanAll();
+      const opportunities = await this.fundingScanner.scanAll((evt) => this.events.emit('progress', evt));
       await this.addAlert('info', `Found ${opportunities.length} funding opportunities`);
+      this.events.emit('notify', { level: 'success', message: `Scan complete — ${opportunities.length} found` });
       return opportunities;
     } catch (error) {
       await this.addAlert('error', `Funding scan failed: ${error}`);
+      this.events.emit('notify', { level: 'error', message: 'Funding scan failed' });
       throw error;
     }
   }
diff --git a/src/dashboard/web/dashboard.css b/src/dashboard/web/dashboard.css
index f4006a7fba359ef018a54d5ca14824e5c5713882..153a6679a593a54fe370ad497da9f4ff84109e11
--- a/src/dashboard/web/dashboard.css
+++ b/src/dashboard/web/dashboard.css
@@ -48,6 +48,37 @@
   font-size: var(--fs-body);
 }
 
+/* --- Interactive feedback primitives --- */
+.spinner { display: inline-block; width: 14px; height: 14px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; vertical-align: -2px; }
+@keyframes spin { to { transform: rotate(360deg); } }
+
+.btn.loading, .icon-btn.loading { position: relative; pointer-events: none; opacity: .8; }
+.btn.loading > span, .icon-btn.loading > span { opacity: .0; }
+.btn.loading::after, .icon-btn.loading::after { content: ""; position: absolute; inset: 0; margin: auto; width: 16px; height: 16px; border: 2px solid currentColor; border-top-color: transparent; border-radius: 50%; animation: spin .8s linear infinite; }
+
+/* Toasts */
+.toast-container { position: fixed; right: 20px; bottom: 20px; display: grid; gap: 8px; z-index: 50; }
+.toast { display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface); box-shadow: var(--elev-3); min-width: 280px; }
+.toast.success { border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-success) 10%, var(--md3-surface)); }
+.toast.error { border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-error) 10%, var(--md3-surface)); }
+.toast.info { border-color: color-mix(in srgb, var(--md3-primary) 40%, var(--md3-outline)); background: color-mix(in srgb, var(--md3-primary) 8%, var(--md3-surface)); }
+.toast .material-symbols-rounded { font-size: 18px; }
+
+/* Tooltips (basic) */
+[data-help] { position: relative; }
+[data-help]:hover::after { content: attr(data-help); position: absolute; left: 0; top: 100%; margin-top: 6px; background: var(--md3-surface); color: var(--md3-on-surface); border: 1px solid var(--md3-outline); border-radius: 10px; padding: 8px 10px; white-space: pre-line; box-shadow: var(--elev-3); width: max-content; max-width: 320px; z-index: 4; }
+
+/* Inline progress */
+.progress-inline { display: flex; align-items: center; gap: 8px; font-size: 12px; color: #64748b; }
+.progress-bar { position: relative; width: 140px; height: 6px; border-radius: 999px; background: #e5e7eb; overflow: hidden; }
+.progress-bar .fill { position: absolute; left: 0; top: 0; bottom: 0; width: 0%; background: var(--md3-primary); transition: width .25s ease; }
+
+/* Guided bubbles */
+.help-bubble { position: absolute; transform: translateY(-8px); background: var(--md3-surface); border: 1px solid var(--md3-outline); box-shadow: var(--elev-3); border-radius: 12px; padding: 10px 12px; font-size: 13px; z-index: 40; }
+.help-bubble .title { font-weight: 600; margin-bottom: 4px; }
+.help-bubble .hint { color: #64748b; }
+.help-arrow { position: absolute; width: 10px; height: 10px; background: var(--md3-surface); border-left: 1px solid var(--md3-outline); border-top: 1px solid var(--md3-outline); transform: rotate(45deg); bottom: -5px; left: 14px; }
+
 /* focus + motion */
 :focus { outline: none; }
 :focus-visible { box-shadow: 0 0 0 3px color-mix(in srgb, var(--md3-primary) 30%, transparent); }
@@ -100,6 +131,10 @@
 .btn:hover { background: var(--md3-surface-variant); }
 .btn.primary:hover { filter: brightness(0.98); }
 
+/* Button states */
+.btn.success { background: color-mix(in srgb, var(--md3-success) 16%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-success) 40%, var(--md3-outline)); color: #166534; }
+.btn.error { background: color-mix(in srgb, var(--md3-error) 12%, var(--md3-surface)); border-color: color-mix(in srgb, var(--md3-error) 40%, var(--md3-outline)); color: #7f1d1d; }
+
 .section { display: none; padding: 16px 20px; }
 .section.active { display: block; }
 .section-title { margin: 8px 4px 16px; font-size: 18px; font-weight: 600; }
@@ -184,6 +219,7 @@
 .search-item { padding: 10px 12px; border-radius: 12px; border: 1px solid var(--md3-outline); background: var(--md3-surface-variant); display: grid; gap: 4px; }
 .search-item .type { font-size: 12px; color: #64748b; }
 .search-item .title { font-weight: 600; }
+.search-item mark { background: color-mix(in srgb, var(--md3-primary) 22%, transparent); color: inherit; border-radius: 3px; padding: 0 2px; }
 
 @media (max-width: 1024px) {
   .app-shell { grid-template-columns: 72px 1fr; }
diff --git a/src/dashboard/web/dashboard.js b/src/dashboard/web/dashboard.js
index cd16d5697fb3c112440336e88cb1eb4ec5d3ffa1..ac1ba0b1ee0290c6ab99f731370b940325187aa1
--- a/src/dashboard/web/dashboard.js
+++ b/src/dashboard/web/dashboard.js
@@ -6,6 +6,8 @@
     this.initTime = new Date();
     this.theme = localStorage.getItem('eufm-theme') || 'light';
     this.sections = ['overview', 'funding', 'activity', 'analytics', 'settings'];
+    this.counts = { opportunities: 0, notes: 0, tools: 0 };
+    this.state = { scanning: false };
     this.init();
   }
 
@@ -21,6 +23,7 @@
     setInterval(() => this.updateTimestamp(), 1000);
     setInterval(() => this.updateUptime(), 1000);
     setInterval(() => this.refresh(), 30000);
+    this.onboardIfFirstRun();
   }
 
   cacheEls() {
@@ -31,6 +34,10 @@
     this.$globalSearch = document.getElementById('global-search');
     this.$searchPanel = document.getElementById('search-panel');
     this.$searchResults = document.getElementById('search-results');
+    this.$toast = document.getElementById('toast-container');
+    this.$scanBtn1 = document.getElementById('scan-funding-btn');
+    this.$scanBtn2 = document.getElementById('scan-funding-btn-2');
+    this.$scanHelp = document.getElementById('scan-help');
   }
 
   bindUI() {
@@ -142,6 +149,73 @@
     return res.text();
   }
 
+  // --- UI feedback helpers ---
+  showToast(message, type = 'info') {
+    if (!this.$toast) return;
+    const div = document.createElement('div');
+    div.className = `toast ${type}`;
+    div.innerHTML = `
+      <span class="material-symbols-rounded">${type === 'success' ? 'check_circle' : type === 'error' ? 'error' : 'info'}</span>
+      <div>${message}</div>
+    `;
+    this.$toast.appendChild(div);
+    setTimeout(() => div.remove(), 4000);
+  }
+
+  setLoadingBtn(btn, loading = true) {
+    if (!btn) return;
+    btn.classList.toggle('loading', !!loading);
+    btn.setAttribute('aria-busy', loading ? 'true' : 'false');
+    btn.disabled = !!loading;
+  }
+
+  insertInlineProgress(targetEl) {
+    if (!targetEl) return null;
+    let wrap = targetEl.parentElement?.querySelector('.progress-inline');
+    if (!wrap) {
+      wrap = document.createElement('div');
+      wrap.className = 'progress-inline';
+      wrap.innerHTML = `<div class="progress-bar"><div class="fill"></div></div><span class="label">Preparing…</span>`;
+      targetEl.parentElement?.appendChild(wrap);
+    }
+    return wrap;
+  }
+
+  setInlineProgress(wrap, percent, label) {
+    if (!wrap) return;
+    const fill = wrap.querySelector('.fill');
+    const lab = wrap.querySelector('.label');
+    if (fill) fill.style.width = `${Math.max(0, Math.min(100, percent))}%`;
+    if (lab && label) lab.textContent = label;
+  }
+
+  onboardIfFirstRun() {
+    const key = 'eufm-onboarded';
+    if (localStorage.getItem(key)) return;
+    const chip = document.getElementById('system-status-chip');
+    const scan = this.$scanBtn1 || this.$scanBtn2;
+    const hints = [];
+    const makeBubble = (target, title, hint) => {
+      if (!target) return;
+      const rect = target.getBoundingClientRect();
+      const b = document.createElement('div');
+      b.className = 'help-bubble';
+      b.style.top = `${window.scrollY + rect.top - 56}px`;
+      b.style.left = `${window.scrollX + rect.left}px`;
+      b.innerHTML = `<div class="title">${title}</div><div class="hint">${hint}</div><div class="help-arrow"></div>`;
+      document.body.appendChild(b);
+      hints.push(b);
+    };
+    makeBubble(chip, 'System Health', 'Live status of agents, uptime and time.');
+    makeBubble(scan, 'Scan for Funding', 'Click to scan EU portals for AI/tech calls.');
+    // Seed helpful chat and search suggestion
+    this.addChatMessage('system', 'Tip: Use the search bar to quickly find opportunities, notes, or alerts.');
+    if (this.$globalSearch && !this.$globalSearch.value) this.$globalSearch.value = 'AI funding';
+    const dismiss = () => { hints.forEach(h => h.remove()); localStorage.setItem(key, '1'); };
+    setTimeout(dismiss, 6000);
+    document.addEventListener('click', dismiss, { once: true });
+  }
+
   async updateStatus() {
     const s = await this.api('/api/status');
     // Agents
@@ -162,6 +236,11 @@
     document.getElementById('progress-text').textContent = `${s.eufmProject.progress}% Complete`;
     document.getElementById('next-milestone').textContent = `Next: ${s.eufmProject.nextMilestone}`;
     document.getElementById('funding-count').textContent = s.eufmProject.fundingOpportunities;
+    // counts for search context
+    this.counts.opportunities = s.eufmProject.fundingOpportunities;
+    document.getElementById('global-search').placeholder = `Search ${this.counts.opportunities} opportunities, ${s.system.memory.notes} notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator`;
+    this.counts.notes = s.system.memory.notes;
+    this.counts.tools = 8;
     // Activity from alerts
     this.renderActivity(s.alerts, 'activity-list');
   }
@@ -184,6 +263,7 @@
         <div class="tool-status status-${t.status}">${t.status}</div>
       </div>
     `).join('');
+    this.counts.tools = Array.isArray(tools) ? tools.length : 0;
   }
 
   async updateSubscriptions() {
@@ -219,6 +299,13 @@
     renderOpps(document.getElementById('opportunity-list'));
     const el2 = document.getElementById('opportunity-list-2');
     if (el2) renderOpps(el2);
+    // Update last scan helper and smart notifications
+    const last = opps.reduce((acc, o) => Math.max(acc, new Date(o.scannedAt || 0).getTime()), 0);
+    if (this.$scanHelp) this.$scanHelp.textContent = last ? `Last scan: ${new Date(last).toLocaleString()} • Found ${opps.length} opportunities` : 'Last scan: —';
+    const closingSoon = opps.filter(o => o.status === 'closing_soon').slice(0, 1);
+    if (closingSoon.length) {
+      this.showToast(`🚨 Deadline approaching: ${closingSoon[0].title} closes soon`, 'info');
+    }
   }
 
   async updateAlerts() {
@@ -236,14 +323,39 @@
     `).join('');
   }
 
+  appendActivity(message, level = 'info') {
+    const list = document.getElementById('activity-list');
+    if (!list) return;
+    const item = document.createElement('div');
+    item.className = 'activity-item';
+    item.innerHTML = `
+      <div class="activity-content">[${String(level).toUpperCase()}] ${message}</div>
+      <div class="activity-time">${new Date().toLocaleTimeString()}</div>`;
+    list.prepend(item);
+  }
+
   async scanFunding() {
-    this.addChatMessage('system', 'Starting EU funding opportunity scan...');
+    if (this.state.scanning) return;
+    this.state.scanning = true;
+    this.addChatMessage('system', 'Scanning EU portals…');
+    this.showToast('Scanning EU portals for opportunities…', 'info');
+    const btns = [this.$scanBtn1, this.$scanBtn2];
+    btns.forEach(b => this.setLoadingBtn(b, true));
+    const progressHost = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+    this.setInlineProgress(progressHost, 5, 'Contacting sources…');
     try {
-      await this.api('/api/scan-funding', { method: 'POST' });
-      this.addChatMessage('system', 'Scan complete. Updating opportunities...');
+      const res = await this.api('/api/scan-funding', { method: 'POST' });
+      this.addChatMessage('system', '✅ Scan complete - updating opportunities…');
+      this.showToast(`✅ ${res?.message || 'Scan complete'}${res?.found ? ` • ${res.found} opportunities` : ''}`, 'success');
       await this.updateOpportunities();
     } catch (e) {
       this.addChatMessage('system', 'Funding scan failed. Check logs.');
+      this.showToast('Funding scan failed', 'error');
+    }
+    finally {
+      btns.forEach(b => this.setLoadingBtn(b, false));
+      this.state.scanning = false;
+      if (progressHost) progressHost.remove();
     }
   }
 
@@ -253,15 +365,24 @@
     const task = document.getElementById('task-input').value.trim();
     if (!task) return;
     this.addChatMessage('user', `${dryRun ? 'Dry Run' : 'Execute'}: ${task}`);
+    this.showToast(`${dryRun ? 'Analyzing' : 'Executing'} task…`, 'info');
+    const execBtn = document.getElementById('submit-task-btn');
+    const dryBtn = document.getElementById('submit-task-dry-btn');
+    [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, true));
     try {
       await this.api('/api/execute', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ task, dryRun }) });
       this.addChatMessage('system', dryRun ? 'Task analyzed successfully.' : 'Task completed successfully.');
+      this.showToast(dryRun ? '✅ Analysis complete' : '✅ Task completed', 'success');
       document.getElementById('task-modal').classList.remove('open');
       document.getElementById('task-input').value = '';
       await this.refresh();
     } catch (e) {
       this.addChatMessage('system', 'Task execution failed.');
+      this.showToast('Task execution failed', 'error');
     }
+    finally {
+      [execBtn, dryBtn].forEach(b => this.setLoadingBtn(b, false));
+    }
   }
 
   addChatMessage(type, message) {
@@ -292,15 +413,31 @@
   }
 
   async search(q) {
-    if (!q || q.trim().length < 2) { this.$searchPanel.hidden = true; return; }
+    if (!q || q.trim().length < 2) {
+      // Suggestions
+      this.$searchPanel.hidden = false;
+      this.$searchResults.innerHTML = `
+        <div class="search-item">
+          <div class="type">Suggestions</div>
+          <div class="title">Searching ${this.counts.opportunities} opportunities, ${this.counts.notes} notes, ${this.counts.tools} tools</div>
+          <div class="snippet">Try: <code>AI funding</code>, <code>Horizon Europe</code>, <code>EIC Accelerator</code></div>
+        </div>
+      `;
+      return;
+    }
     try {
       const results = await this.api(`/api/search?q=${encodeURIComponent(q)}`);
       this.$searchPanel.hidden = false;
+      const hi = (text) => {
+        if (!text) return '';
+        const re = new RegExp(`(${q.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&')})`, 'ig');
+        return String(text).replace(re, '<mark>$1</mark>');
+      };
       this.$searchResults.innerHTML = results.map(r => `
         <div class="search-item">
           <div class="type">${r.type}</div>
-          <div class="title">${r.title}</div>
-          <div class="snippet">${r.snippet || ''}</div>
+          <div class="title">${hi(r.title)}</div>
+          <div class="snippet">${hi(r.snippet || '')}</div>
         </div>
       `).join('');
     } catch {
@@ -314,6 +451,7 @@
     a.href = URL.createObjectURL(blob);
     a.download = `eufm_status_${Date.now()}.json`;
     a.click();
+    this.showToast('📦 Exported system status JSON', 'success');
   }
 
   connectWS() {
@@ -327,6 +465,13 @@
           const msg = JSON.parse(evt.data);
           if (msg.type === 'status_update') { this.applyStatus(msg.data); }
           if (msg.type === 'funding_opportunities') { this.updateOpportunities(); }
+          if (msg.type === 'activity') { this.addChatMessage('system', msg.message); this.appendActivity(msg.message); }
+          if (msg.type === 'progress' && this.state.scanning) {
+            const host = this.insertInlineProgress(this.$scanBtn1 || this.$scanBtn2);
+            if (msg.percent != null) this.setInlineProgress(host, msg.percent, msg.message || '');
+          }
+          if (msg.type === 'notify') { this.showToast(msg.message, msg.level || 'info'); }
+          if (msg.type === 'task_result') { this.addChatMessage('system', `Task result: ${msg.data?.summary || 'completed'}`); }
         } catch {}
       };
     } catch {}
diff --git a/src/dashboard/web/index.html b/src/dashboard/web/index.html
index 9cf82e0ac8d0cb2a9e5ff725b74b88675c1b2981..a198345f17ddc65bfab84345163aef7be07c8efc
--- a/src/dashboard/web/index.html
+++ b/src/dashboard/web/index.html
@@ -65,14 +65,14 @@
           </div>
         </div>
         <div class="right">
-          <div class="search">
+          <div class="search" data-help="Search through opportunities, notes, tools.\nTry: AI funding, Horizon Europe, EIC Accelerator">
             <span class="material-symbols-rounded">search</span>
-            <input id="global-search" type="search" placeholder="Search across data (/)" aria-label="Global search" autocomplete="off" />
+            <input id="global-search" type="search" placeholder="Search 29 opportunities, 21 notes, 8 tools — Try: AI funding, Horizon Europe, EIC Accelerator" aria-label="Global search" autocomplete="off" />
           </div>
-          <button class="icon-btn" id="export-btn" title="Export (e)">
+          <button class="icon-btn" id="export-btn" title="Export full system status JSON (press e)" data-help="Exports a snapshot of metrics, project status, alerts, and counts.">
             <span class="material-symbols-rounded">download</span>
           </button>
-          <button class="icon-btn" id="shortcuts-btn" title="Shortcuts (?)">
+          <button class="icon-btn" id="shortcuts-btn" title="Show keyboard shortcuts (?)" data-help="Quick keys: / search, e export, d theme, ? help">
             <span class="material-symbols-rounded">keyboard</span>
           </button>
         </div>
@@ -162,15 +162,16 @@
             <div class="card-head">
               <span class="material-symbols-rounded">work</span>
               <h3>EU Funding Opportunities</h3>
-              <div class="card-actions">
-                <button class="btn" id="scan-funding-btn">
+              <div class="card-actions" data-help="Scans EU portals (Horizon Europe, EIC, Digital Europe, etc.) for opportunities relevant to AI/tech and EUFM.">
+                <button class="btn" id="scan-funding-btn" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
-                <a class="icon-btn" id="export-opps-btn" title="Export CSV" href="#">
+                <a class="icon-btn" id="export-opps-btn" title="Export opportunities as CSV" href="#" data-help="Exports currently listed opportunities to CSV with title, program, deadline, score.">
                   <span class="material-symbols-rounded">table</span>
                 </a>
               </div>
+              <small id="scan-help" class="meta" aria-live="polite">Last scan: —</small>
             </div>
             <div class="opportunity-list" id="opportunity-list" role="list">
               <div class="loading">Scanning for opportunities...</div>
@@ -191,8 +192,8 @@
             <div class="card-head">
               <span class="material-symbols-rounded">chat</span>
               <h3>System Chat</h3>
-              <div class="card-actions">
-                <button class="btn" id="execute-task-btn">
+              <div class="card-actions" data-help="Execute built-in tasks like analyzing funding, generating proposal outlines, or coordinating agents.">
+                <button class="btn" id="execute-task-btn" title="Execute tasks like 'analyze funding opportunities' or 'generate proposal outline'">
                   <span class="material-symbols-rounded">play_arrow</span>
                   <span>Execute Task</span>
                 </button>
@@ -205,7 +206,7 @@
               </div>
             </div>
             <div class="chat-input">
-              <input id="chat-input" type="text" placeholder="Enter command or message..." aria-label="Chat input" />
+              <input id="chat-input" type="text" placeholder="Try: analyze funding opportunities; generate proposal outline; system status" aria-label="Chat input" />
               <button class="icon-btn" id="send-chat-btn" aria-label="Send">
                 <span class="material-symbols-rounded">send</span>
               </button>
@@ -222,7 +223,7 @@
               <span class="material-symbols-rounded">work</span>
               <h3>Live Opportunities</h3>
               <div class="card-actions">
-                <button class="btn" id="scan-funding-btn-2">
+                <button class="btn" id="scan-funding-btn-2" title="Scans EU funding portals for new AI/tech opportunities matching EUFM">
                   <span class="material-symbols-rounded">search</span>
                   <span>Scan Now</span>
                 </button>
@@ -279,10 +280,11 @@
             </label>
           </div>
           <div class="row">
-            <button class="btn" id="export-json-btn">
+            <button class="btn" id="export-json-btn" title="Download a JSON snapshot of system status">
               <span class="material-symbols-rounded">download</span>
               <span>Export status JSON</span>
             </button>
+            <small class="meta">Includes agents, costs, memory, alerts and project status</small>
           </div>
         </div>
       </section>
@@ -295,6 +297,7 @@
       <button class="close" aria-label="Close" tabindex="0">×</button>
       <h3 id="task-title">Execute Task</h3>
       <textarea id="task-input" placeholder="Describe the task you want to execute..." aria-label="Task description"></textarea>
+      <div class="meta">Examples: analyze funding opportunities; generate proposal outline; summarize system status</div>
       <div class="modal-actions">
         <button class="btn primary" id="submit-task-btn">Execute</button>
         <button class="btn" id="submit-task-dry-btn">Dry Run</button>
@@ -307,6 +310,9 @@
     <div class="search-results" id="search-results" role="listbox" aria-label="Search results"></div>
   </div>
 
+  <!-- Toasts -->
+  <div id="toast-container" class="toast-container" aria-live="polite"></div>
+
   <script src="dashboard.js"></script>
 </body>
 </html>

